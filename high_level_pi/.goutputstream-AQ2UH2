import cv2
import numpy as np
import math
# ~ import time
import matplotlib.pyplot as plt

from picamera2 import Picamera2, Preview
piCam = Picamera2()

### globale Variablen, die von "2d-Graph der image" abgelesen haben
# ~ Point_A = (272, 360)
# ~ Point_B = (272, 250)

#### geänderte Point A und B
Point_A = (272,400)
Point_B = (272,300)
size = 5
###  Umwandlung Image von oben nach unten wie Bird's view 
def Birds_view(img):
    
    IMAGE_H = 480
    IMAGE_W = 640
    src = np.float32([[75, IMAGE_H], [480, IMAGE_H], [480, 0], [IMAGE_W, 75]])
    dst = np.float32([[200, IMAGE_H], [340, IMAGE_H], [0, 0], [IMAGE_W, 0]])
    M = cv2.getPerspectiveTransform(src, dst) # The transformation matrix
    Minv = cv2.getPerspectiveTransform(dst, src) # Inverse transformation
    img = img[450:(450+IMAGE_H), 0:IMAGE_W] # Apply np slicing for ROI crop
    warped_img = cv2.warpPerspective(img, M, (IMAGE_W, IMAGE_H)) # Image warping
    return warped_img

### Umwandlung nach schwarz und weiß
def canny(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0) #Filter wird angwendet um das geblured mit einer 5 mal 5 Matrix -macht es weiccher
    ##### geänderte Canny
    canny = cv2.Canny(blur, 150, 255)#255,255
    return canny
        
def region_of_interest(image): 
    ##### originale roi_point
    roi_points = np.array([[(340, 479), (482, 479), (482, 300), (340, 300)], [(80, 479), (180, 479), (230, 300), (80, 300)]])
    
    ## y-Achse von 300 nach 430 geändert
    #roi_points = np.array([[(320, 479), (450, 479), (450, 430), (320, 430)], [(80, 479), (180, 479), (230, 430), (80, 430)]])

             ####          |   unten rechts          |    oben rechts         |       unten links     |      oben links
                ######     |    UR-L, UR-R           |    OR-R, OR-L           |     UL-L, UL-R        |     OL-R, OL-L  
    mask = np.zeros_like(image) 
    ####   erstellt eine schwarze Maske, gleiche Anzahl von Pixeln
    cv2.fillPoly(mask, roi_points, 255) 
    ####   Das Dreieck wir mit dieser Funktion auf das Bild gelegt, die 255 macht das Dreieck weiß
    masked_image =cv2.bitwise_and(image, mask) 
    # plt.imshow(masked_image)
    # plt.show()
    ####   macht einen Bitvergleich, pixel für pixel, dadurch wird alles was nicht in der region of intrest liegt raus gelöscht
    return masked_image

###  Rückgabe der Durchschnitt-Arrays
def average_lines(lines):
    if len(lines) > 0:
        return np.mean(lines, axis=0)
    else:
        return None

###  Bestimmung und Rückgabe der linke-seite oder recht-Seite Linien als array
###  Die Mittellinie liegt am den Punkt 300 an der (2d) x,y-Graph der "image"
def avarage_slope_intercept(image, lines):
    left_lines = []
    right_lines = []

    if lines is not None:
        for line in lines:

            x1, y1, x2, y2 = line.reshape(4)

            if x1 < 300:
                left_lines.append([x1, y1, x2, y2])
            else:
                right_lines.append([x1, y1, x2, y2])

    else:
        print("Keine Linien gefunden")


    left_lines = np.array(left_lines)
    right_lines = np.array(right_lines)

    return left_lines, right_lines


###  Die Berechnung der passenden Winkel durch Hypotenuse
###  Wenn X3 größer als X1 ist,  ist es der lenkwinkel nach links
###  Wenn X3 kleiner als X1 ist, ist Lenkwinkel nach rechts
###  (x1,y1) entspricht eine Mittellinie von Image
def get_lenkwinkel(A, B, C):
    x1, y1 = A
    x2, y2 = B
    x3, y3 = C

    line_length_GK = math.sqrt((x1 - x3)**2 + (y1 - y3)**2)
    line_length_HY = math.sqrt((x3 - x2)**2 + (y3 - y2)**2)

    if x3 > x1:
        left_turn_angle = -int(math.degrees(math.asin(line_length_GK / line_length_HY)))
        return left_turn_angle
    elif x1 > x3:
        right_turn_angle = int(math.degrees(math.asin(line_length_GK / line_length_HY)))
        return right_turn_angle
    elif x1 == x3:
        return 0

### Zeichnung der Mittellinie und die Linien für die passende Winkel
def draw_points(x_left, x_right, frame):
    x = ((x_right + x_left) / 2)
    # ~ print(f"x goofy: {x}")
    # ~ print(x_right)
    # ~ print(x_left)
    # ~ C = (int(x) , 360 )
    C = (int(x) , 400 )
    # ~ print(C)
    cv2.circle(frame, C, size, (0, 0, 255), -1)
    cv2.circle(frame, Point_A, size, (0, 255, 0), -1)
    cv2.circle(frame, Point_B, size, (0, 255, 0), -1)
    cv2.line(frame, Point_A, Point_B, (0, 255, 0), 2)
    cv2.line(frame, Point_B, C, (0, 255, 0), 2)
    cv2.line(frame, C, Point_A, (0, 255, 0), 2)
    # plt.imshow(frame)
    # plt.show()
    return C


# ~ # ###    Kamera_Initialisierung: Auflösung von (640x480), Bildformat: (RGB888)
def InitKamera():                                       
    piCam.preview_configuration.main.size=(640,480)         
    piCam.preview_configuration.main.format = "RGB888"
    piCam.preview_configuration.align()
    piCam.configure("preview")
    piCam.start()
    return 0

###    Bildaufnahme als Array
def getImg():
    
    frame = piCam.capture_array()       ## haupt programm
    
    return frame




InitKamera()



def main():
    
    
    
        
    
    while True:
        
        frame = getImg()
        # frame = cv2.imread("curve_strecke_Umdrehen_1.jpg")
        #frame = cv2.imread("curve_strecke_5.jpg")
        # plt.imshow(frame)
        # plt.show()        
     
        
        ###    [[tl],[bl],[tr],[br]]
        ### vorher
        #pts1 = np.float32([[0,180],[0,320],[639,180],[639,320]])
        #pts2 = np.float32([[0,0],[0,480],[640,0],[640,480]])

        ### geänderte 
        pts1 = np.float32([[0,250],[0,330],[639,250],[639,330]])
        pts2 = np.float32([[0,0],[0,480],[640,0],[640,480]])

        matrix = cv2.getPerspectiveTransform(pts1,pts2)
        transformed_frame = cv2.warpPerspective(frame,matrix,(640,480))
        #cv2.imshow("Transfromed_frame bird eye",transformed_frame)
        # ~ plt.imshow(transformed_frame)
        # ~ plt.show()

        warp_cany_image = canny(transformed_frame)
        #cv2.imshow("warp cany", warp_cany_image)
        # ~ plt.imshow(warp_cany_image)
        # ~ plt.show()

        warp_cany_image_region = region_of_interest(warp_cany_image)
        # ~ plt.imshow(warp_cany_image_region)
        # ~ plt.show()

   
        # plt.imshow(cropped_image)
        # plt.show()

        #cv2.imshow("wwarp ",warp_cany_image_region)
      
        lines = cv2.HoughLinesP(warp_cany_image_region, 1, np.pi/180, 50, np.array([]), minLineLength=10, maxLineGap=2)
        # ~ plt.imshow(lines)
        # ~ plt.show()        
        left_lines, right_lines = avarage_slope_intercept(warp_cany_image_region, lines)
        # plt.imshow(warp_cany_image_region)
        # plt.show()
        average_left = left_lines
        average_right = right_lines

        

        average_x_left = np.mean(average_left [0::2])
        average_x_right = np.mean(average_right [0::2])



        if average_left is not None:
            Point_C = draw_points(average_x_left, average_x_right, frame )

        else:
            print("No_Line ")

        lenkwinkel = get_lenkwinkel(Point_A, Point_B, Point_C)
        print(" ")
        print("Lenkwinkel in Grad ", lenkwinkel )
        print(" ")

        cv2.imshow("frame",frame)

        #cv2.imshow("result", cropped_image)
        cv2.imshow("result", warp_cany_image_region) 
        cv2.waitKey(30)


        return lenkwinkel
            
           
    

# if __name__ == "__main__":
#     main()
