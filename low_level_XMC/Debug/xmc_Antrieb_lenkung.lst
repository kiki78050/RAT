
xmc_Antrieb_lenkung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a1c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08007a1c  0c007a1c  0000fa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  08007a1c  0c007a1c  0000fa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  4 .data         000002cc  1ffe8800  0c007a24  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002a8  1ffe8acc  0c007cf0  00010acc  2**2
                  ALLOC
  6 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  7 .debug_aranges 000015a8  00000000  00000000  00010ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002a359  00000000  00000000  00012078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000505e  00000000  00000000  0003c3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c090  00000000  00000000  0004142f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00005f10  00000000  00000000  0004d4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000e65f  00000000  00000000  000533d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b99c  00000000  00000000  00061a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001280  00000000  00000000  0006d3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000e58  00000000  00000000  0006e64b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	dd 2d 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .-..............
 800004c:	99 02 00 08 b9 4a 00 08 99 02 00 08 99 02 00 08     .....J..........
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 d5 4a 00 08 99 02 00 08     .........J......
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 85 27 00 08     .............'..
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c007a24 	.word	0x0c007a24
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000002cc 	.word	0x000002cc
 8000254:	0c007a24 	.word	0x0c007a24
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8acc 	.word	0x1ffe8acc
 8000264:	000002a8 	.word	0x000002a8
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08005b45 	.word	0x08005b45
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08004b5d 	.word	0x08004b5d

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f003 fcf3 	bl	8003c98 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f003 fd5b 	bl	8003d6c <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f003 fd3a 	bl	8003d58 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <XMC_ERU_Enable+0x28>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d107      	bne.n	80003b0 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 80003a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003a4:	f000 fb04 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003ac:	f000 f97c 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40044000 	.word	0x40044000

080003bc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	460b      	mov	r3, r1
 80003c6:	607a      	str	r2, [r7, #4]
 80003c8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003ca:	7afb      	ldrb	r3, [r7, #11]
 80003cc:	089b      	lsrs	r3, r3, #2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	7afb      	ldrb	r3, [r7, #11]
 80003d4:	089b      	lsrs	r3, r3, #2
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	3204      	adds	r2, #4
 80003de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	f003 0303 	and.w	r3, r3, #3
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	4619      	mov	r1, r3
 80003ec:	23f8      	movs	r3, #248	; 0xf8
 80003ee:	408b      	lsls	r3, r1
 80003f0:	43db      	mvns	r3, r3
 80003f2:	ea02 0103 	and.w	r1, r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	1d02      	adds	r2, r0, #4
 80003fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4619      	mov	r1, r3
 8000408:	2303      	movs	r3, #3
 800040a:	408b      	lsls	r3, r1
 800040c:	43db      	mvns	r3, r3
 800040e:	401a      	ands	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	4a3a      	ldr	r2, [pc, #232]	; (8000500 <XMC_GPIO_Init+0x144>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d003      	beq.n	8000424 <XMC_GPIO_Init+0x68>
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4a39      	ldr	r2, [pc, #228]	; (8000504 <XMC_GPIO_Init+0x148>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d10a      	bne.n	800043a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000428:	7afb      	ldrb	r3, [r7, #11]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	401a      	ands	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	661a      	str	r2, [r3, #96]	; 0x60
 8000438:	e042      	b.n	80004c0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	b25b      	sxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	da3c      	bge.n	80004c0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	685a      	ldr	r2, [r3, #4]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	409a      	lsls	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	08db      	lsrs	r3, r3, #3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	3210      	adds	r2, #16
 8000466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	f003 0307 	and.w	r3, r3, #7
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4619      	mov	r1, r3
 8000474:	2307      	movs	r3, #7
 8000476:	408b      	lsls	r3, r1
 8000478:	43db      	mvns	r3, r3
 800047a:	ea02 0103 	and.w	r1, r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f100 0210 	add.w	r2, r0, #16
 8000484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	08db      	lsrs	r3, r3, #3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	7afb      	ldrb	r3, [r7, #11]
 8000492:	08db      	lsrs	r3, r3, #3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3210      	adds	r2, #16
 800049c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	7a1b      	ldrb	r3, [r3, #8]
 80004a4:	4619      	mov	r1, r3
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	f003 0307 	and.w	r3, r3, #7
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	ea42 0103 	orr.w	r1, r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f100 0210 	add.w	r2, r0, #16
 80004bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004c0:	7afb      	ldrb	r3, [r7, #11]
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	7afb      	ldrb	r3, [r7, #11]
 80004ca:	089b      	lsrs	r3, r3, #2
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3204      	adds	r2, #4
 80004d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	7afb      	ldrb	r3, [r7, #11]
 80004e0:	f003 0303 	and.w	r3, r3, #3
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	ea42 0103 	orr.w	r1, r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1d02      	adds	r2, r0, #4
 80004f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	48028e00 	.word	0x48028e00
 8000504:	48028f00 	.word	0x48028f00

08000508 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	2003ffc0 	.word	0x2003ffc0

08000520 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <XMC_SCU_GetMirrorStatus+0x14>)
 8000526:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	50004000 	.word	0x50004000

08000538 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000540:	f7ff febc 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <XMC_SCU_lDelay+0x3c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <XMC_SCU_lDelay+0x40>)
 800054a:	fba2 2303 	umull	r2, r3, r2, r3
 800054e:	0c9a      	lsrs	r2, r3, #18
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e003      	b.n	8000566 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800055e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3f7      	bcc.n	800055e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2003ffc0 	.word	0x2003ffc0
 8000578:	431bde83 	.word	0x431bde83

0800057c <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000582:	685b      	ldr	r3, [r3, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	50004074 	.word	0x50004074

08000594 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	60d3      	str	r3, [r2, #12]
}
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	50004074 	.word	0x50004074

080005b0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f8c5 	bl	8000748 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005be:	f000 fac7 	bl	8000b50 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	79db      	ldrb	r3, [r3, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00a      	beq.n	80005e0 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005ca:	f000 faff 	bl	8000bcc <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005ce:	bf00      	nop
 80005d0:	f000 faea 	bl	8000ba8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1f7      	bne.n	80005d0 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7a5b      	ldrb	r3, [r3, #9]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f929 	bl	800083c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005ea:	bf00      	nop
 80005ec:	f7ff ff98 	bl	8000520 <XMC_SCU_GetMirrorStatus>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1fa      	bne.n	80005ec <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7a1b      	ldrb	r3, [r3, #8]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fa82 	bl	8000b04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c1b      	ldrb	r3, [r3, #16]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f937 	bl	8000878 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7c5b      	ldrb	r3, [r3, #17]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f95a 	bl	80008c8 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7c9b      	ldrb	r3, [r3, #18]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f941 	bl	80008a0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7cdb      	ldrb	r3, [r3, #19]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f964 	bl	80008f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	799b      	ldrb	r3, [r3, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00a      	beq.n	8000646 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000630:	f000 fb04 	bl	8000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000634:	bf00      	nop
 8000636:	f000 fb29 	bl	8000c8c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800063a:	4603      	mov	r3, r0
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f7      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	78db      	ldrb	r3, [r3, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	799b      	ldrb	r3, [r3, #6]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d017      	beq.n	800068c <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 800065c:	f000 fb3a 	bl	8000cd4 <XMC_SCU_CLOCK_DisableSystemPll>
 8000660:	e014      	b.n	800068c <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000662:	f000 fb27 	bl	8000cb4 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	8899      	ldrh	r1, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000672:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000678:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4608      	mov	r0, r1
 8000682:	4611      	mov	r1, r2
 8000684:	462a      	mov	r2, r5
 8000686:	4623      	mov	r3, r4
 8000688:	f000 fb34 	bl	8000cf4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000694:	d103      	bne.n	800069e <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000696:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800069a:	f000 f855 	bl	8000748 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800069e:	f7ff fe0d 	bl	80002bc <SystemCoreClockUpdate>
}
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}

080006a8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	0f1b      	lsrs	r3, r3, #28
 80006b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006bc:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006cc:	4413      	add	r3, r2
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	50004414 	.word	0x50004414

080006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	0f1b      	lsrs	r3, r3, #28
 80006ec:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006f4:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	461a      	mov	r2, r3
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000704:	4413      	add	r3, r2
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4013      	ands	r3, r2
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	5000440c 	.word	0x5000440c

08000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800072c:	f7ff feec 	bl	8000508 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000730:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000734:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	50004600 	.word	0x50004600

08000748 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000750:	4906      	ldr	r1, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	50004600 	.word	0x50004600

08000770 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	50004600 	.word	0x50004600

08000798 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	50004600 	.word	0x50004600

080007c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d108      	bne.n	80007e2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	60d3      	str	r3, [r2, #12]
 80007e0:	e007      	b.n	80007f2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	60d3      	str	r3, [r2, #12]
  }
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004710 	.word	0x50004710

08000800 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800080a:	bf00      	nop
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800080e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1f8      	bne.n	800080c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800081a:	4907      	ldr	r1, [pc, #28]	; (8000838 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000824:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000826:	4313      	orrs	r3, r2
 8000828:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	50004000 	.word	0x50004000
 8000838:	50004300 	.word	0x50004300

0800083c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000846:	bf00      	nop
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800084a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f8      	bne.n	8000848 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000856:	4907      	ldr	r1, [pc, #28]	; (8000874 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000860:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004000 	.word	0x50004000
 8000874:	50004300 	.word	0x50004300

08000878 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800088e:	4313      	orrs	r3, r2
 8000890:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008ac:	6a1b      	ldr	r3, [r3, #32]
 80008ae:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	50004600 	.word	0x50004600

080008c8 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008de:	4313      	orrs	r3, r2
 80008e0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	50004600 	.word	0x50004600

080008f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000906:	4313      	orrs	r3, r2
 8000908:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	50004600 	.word	0x50004600

08000918 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800092e:	4313      	orrs	r3, r2
 8000930:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	50004600 	.word	0x50004600

08000940 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000956:	4313      	orrs	r3, r2
 8000958:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	50004600 	.word	0x50004600

08000968 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800097e:	4313      	orrs	r3, r2
 8000980:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	50004600 	.word	0x50004600

08000990 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	6053      	str	r3, [r2, #4]
}
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	50004600 	.word	0x50004600

080009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	0f1b      	lsrs	r3, r3, #28
 80009bc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009c4:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009d4:	4413      	add	r3, r2
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	50004648 	.word	0x50004648

080009e8 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	0f1b      	lsrs	r3, r3, #28
 80009f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009fc:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4013      	ands	r3, r2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf14      	ite	ne
 8000a18:	2301      	movne	r3, #1
 8000a1a:	2300      	moveq	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	50004640 	.word	0x50004640

08000a30 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a3e:	f023 0302 	bic.w	r3, r3, #2
 8000a42:	6153      	str	r3, [r2, #20]
}
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	50004710 	.word	0x50004710

08000a50 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a5a:	4a28      	ldr	r2, [pc, #160]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a66:	bf00      	nop
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f9      	beq.n	8000a68 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a80:	491e      	ldr	r1, [pc, #120]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f023 0310 	bic.w	r3, r3, #16
 8000aa8:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000aaa:	4a14      	ldr	r2, [pc, #80]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab4:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000ab6:	bf00      	nop
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f023 0301 	bic.w	r3, r3, #1
 8000ace:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000ad0:	bf00      	nop
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f9      	bne.n	8000ad2 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ade:	4a07      	ldr	r2, [pc, #28]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ae8:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	60da      	str	r2, [r3, #12]
}
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	50004710 	.word	0x50004710
 8000b00:	50004160 	.word	0x50004160

08000b04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b18:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10e      	bne.n	8000b3e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b2a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b2c:	2064      	movs	r0, #100	; 0x64
 8000b2e:	f7ff fd03 	bl	8000538 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b32:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b3c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b3e:	2064      	movs	r0, #100	; 0x64
 8000b40:	f7ff fcfa 	bl	8000538 <XMC_SCU_lDelay>
}
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	50004710 	.word	0x50004710

08000b50 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d109      	bne.n	8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b66:	bf00      	nop
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0f9      	beq.n	8000b68 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00a      	beq.n	8000b96 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b86:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b88:	bf00      	nop
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f9      	bne.n	8000b8a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	50004200 	.word	0x50004200
 8000ba4:	50004400 	.word	0x50004400

08000ba8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	50004300 	.word	0x50004300

08000bcc <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000bd0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bd4:	f7ff fcde 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000be2:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000be4:	bf00      	nop
 8000be6:	f7ff fcc9 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f8      	beq.n	8000be6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bf4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bf8:	f7ff fccc 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bfe:	2208      	movs	r2, #8
 8000c00:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000c02:	bf00      	nop
 8000c04:	f7ff fcba 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f8      	beq.n	8000c04 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000c12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c16:	f7ff fcbd 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000c26:	bf00      	nop
 8000c28:	f7ff fca8 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f8      	beq.n	8000c28 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	50004300 	.word	0x50004300

08000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c40:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c4c:	4d0d      	ldr	r5, [pc, #52]	; (8000c84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c56:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c5a:	f003 f87d 	bl	8003d58 <OSCHP_GetFrequency>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c62:	fba3 2302 	umull	r2, r3, r3, r2
 8000c66:	0d1b      	lsrs	r3, r3, #20
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c6c:	4323      	orrs	r3, r4
 8000c6e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c7a:	6053      	str	r3, [r2, #4]
}
 8000c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	50004710 	.word	0x50004710
 8000c84:	50004700 	.word	0x50004700
 8000c88:	6b5fca6b 	.word	0x6b5fca6b

08000c8c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c98:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	50004710 	.word	0x50004710

08000cb4 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc2:	f023 0302 	bic.w	r3, r3, #2
 8000cc6:	6053      	str	r3, [r2, #4]
}
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	50004710 	.word	0x50004710

08000cd4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	6053      	str	r3, [r2, #4]
}
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	50004710 	.word	0x50004710

08000cf4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4603      	mov	r3, r0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	460b      	mov	r3, r1
 8000d04:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fd59 	bl	80007c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000d0e:	7b7b      	ldrb	r3, [r7, #13]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	f040 808b 	bne.w	8000e2c <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000d1c:	f003 f81c 	bl	8003d58 <OSCHP_GetFrequency>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b54      	ldr	r3, [pc, #336]	; (8000e74 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000d24:	fba3 2302 	umull	r2, r3, r3, r2
 8000d28:	0c9b      	lsrs	r3, r3, #18
 8000d2a:	059b      	lsls	r3, r3, #22
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e002      	b.n	8000d36 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d30:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d34:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	fb02 f203 	mul.w	r2, r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4a4b      	ldr	r2, [pc, #300]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	0d9b      	lsrs	r3, r3, #22
 8000d52:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d54:	4a49      	ldr	r2, [pc, #292]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d56:	4b49      	ldr	r3, [pc, #292]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d60:	bf00      	nop
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f9      	beq.n	8000d62 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d6e:	4a43      	ldr	r2, [pc, #268]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d70:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d7a:	4940      	ldr	r1, [pc, #256]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7c:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d82:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	3a01      	subs	r2, #1
 8000d88:	0212      	lsls	r2, r2, #8
 8000d8a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d92:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000daa:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f023 0310 	bic.w	r3, r3, #16
 8000db4:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000db6:	4a31      	ldr	r2, [pc, #196]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000dc2:	bf00      	nop
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f9      	beq.n	8000dc4 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000dd0:	4a2a      	ldr	r2, [pc, #168]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f023 0301 	bic.w	r3, r3, #1
 8000dda:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000ddc:	bf00      	nop
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f9      	bne.n	8000dde <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	0d9b      	lsrs	r3, r3, #22
 8000df6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000df8:	6a3a      	ldr	r2, [r7, #32]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d202      	bcs.n	8000e06 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e00:	6938      	ldr	r0, [r7, #16]
 8000e02:	f000 f845 	bl	8000e90 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	085b      	lsrs	r3, r3, #1
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	0d9b      	lsrs	r3, r3, #22
 8000e14:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d202      	bcs.n	8000e24 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e1e:	6938      	ldr	r0, [r7, #16]
 8000e20:	f000 f836 	bl	8000e90 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000e24:	6a38      	ldr	r0, [r7, #32]
 8000e26:	f000 f833 	bl	8000e90 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e2a:	e01c      	b.n	8000e66 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e2c:	4913      	ldr	r1, [pc, #76]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e3e:	bf00      	nop
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0310 	and.w	r3, r3, #16
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f9      	beq.n	8000e40 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e58:	bf00      	nop
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f9      	beq.n	8000e5a <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e68:	2205      	movs	r2, #5
 8000e6a:	60da      	str	r2, [r3, #12]
}
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	aaaaaaab 	.word	0xaaaaaaab
 8000e7c:	50004710 	.word	0x50004710
 8000e80:	f08080ff 	.word	0xf08080ff
 8000e84:	88888889 	.word	0x88888889
 8000e88:	b60b60b7 	.word	0xb60b60b7
 8000e8c:	50004160 	.word	0x50004160

08000e90 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e98:	490b      	ldr	r1, [pc, #44]	; (8000ec8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000eac:	bf00      	nop
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f9      	beq.n	8000eae <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000eba:	2032      	movs	r0, #50	; 0x32
 8000ebc:	f7ff fb3c 	bl	8000538 <XMC_SCU_lDelay>
}
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	50004710 	.word	0x50004710

08000ecc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eda:	60da      	str	r2, [r3, #12]
}
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <XMC_CCU4_lDeassertReset+0x4c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d103      	bne.n	8000f00 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000ef8:	2004      	movs	r0, #4
 8000efa:	f7ff fbd5 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000efe:	e016      	b.n	8000f2e <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <XMC_CCU4_lDeassertReset+0x50>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d103      	bne.n	8000f10 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000f08:	2008      	movs	r0, #8
 8000f0a:	f7ff fbcd 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000f0e:	e00e      	b.n	8000f2e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <XMC_CCU4_lDeassertReset+0x54>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d103      	bne.n	8000f20 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000f18:	2010      	movs	r0, #16
 8000f1a:	f7ff fbc5 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000f1e:	e006      	b.n	8000f2e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <XMC_CCU4_lDeassertReset+0x58>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <XMC_CCU4_lDeassertReset+0x5c>)
 8000f2a:	f7ff fbbd 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	4000c000 	.word	0x4000c000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40014000 	.word	0x40014000
 8000f40:	48004000 	.word	0x48004000
 8000f44:	10000001 	.word	0x10000001

08000f48 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <XMC_CCU4_lUngateClock+0x4c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d103      	bne.n	8000f60 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000f58:	2004      	movs	r0, #4
 8000f5a:	f7ff fd29 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f5e:	e016      	b.n	8000f8e <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <XMC_CCU4_lUngateClock+0x50>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d103      	bne.n	8000f70 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000f68:	2008      	movs	r0, #8
 8000f6a:	f7ff fd21 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f6e:	e00e      	b.n	8000f8e <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <XMC_CCU4_lUngateClock+0x54>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d103      	bne.n	8000f80 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f7ff fd19 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f7e:	e006      	b.n	8000f8e <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <XMC_CCU4_lUngateClock+0x58>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d102      	bne.n	8000f8e <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <XMC_CCU4_lUngateClock+0x5c>)
 8000f8a:	f7ff fd11 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	4000c000 	.word	0x4000c000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	40014000 	.word	0x40014000
 8000fa0:	48004000 	.word	0x48004000
 8000fa4:	10000001 	.word	0x10000001

08000fa8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f7ff fced 	bl	8000990 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffc6 	bl	8000f48 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff93 	bl	8000ee8 <XMC_CCU4_lDeassertReset>
#endif
}
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffe7 	bl	8000fa8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff76 	bl	8000ecc <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fec:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	039b      	lsls	r3, r3, #14
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	601a      	str	r2, [r3, #0]
}
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	051a      	lsls	r2, r3, #20
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	795b      	ldrb	r3, [r3, #5]
 800103a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	795b      	ldrb	r3, [r3, #5]
 800104a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	791b      	ldrb	r3, [r3, #4]
 800105a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	795b      	ldrb	r3, [r3, #5]
 8001086:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	051a      	lsls	r2, r3, #20
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	791b      	ldrb	r3, [r3, #4]
 80010a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <XMC_CCU4_SLICE_Capture0Config>:
  slice->CMC = cmc;
}

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010d4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	605a      	str	r2, [r3, #4]
}
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001108:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	605a      	str	r2, [r3, #4]
}
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	460b      	mov	r3, r1
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	3b01      	subs	r3, #1
 8001136:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800113e:	7ffb      	ldrb	r3, [r7, #31]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3310      	adds	r3, #16
 8001146:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	461a      	mov	r2, r3
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 800116a:	7ffb      	ldrb	r3, [r7, #31]
 800116c:	3316      	adds	r3, #22
 800116e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2201      	movs	r2, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	789b      	ldrb	r3, [r3, #2]
 8001184:	461a      	mov	r2, r3
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3319      	adds	r3, #25
 800119a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	78db      	ldrb	r3, [r3, #3]
 80011b0:	461a      	mov	r2, r3
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]
#endif
}
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
 8001204:	4613      	mov	r3, r2
 8001206:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b0b      	cmp	r3, #11
 800120c:	d836      	bhi.n	800127c <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001245 	.word	0x08001245
 8001218:	08001245 	.word	0x08001245
 800121c:	0800124f 	.word	0x0800124f
 8001220:	0800124f 	.word	0x0800124f
 8001224:	0800127d 	.word	0x0800127d
 8001228:	0800127d 	.word	0x0800127d
 800122c:	0800127d 	.word	0x0800127d
 8001230:	0800127d 	.word	0x0800127d
 8001234:	08001259 	.word	0x08001259
 8001238:	08001265 	.word	0x08001265
 800123c:	08001271 	.word	0x08001271
 8001240:	08001271 	.word	0x08001271
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001244:	2303      	movs	r3, #3
 8001246:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
      break;
 800124c:	e01b      	b.n	8001286 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800124e:	230c      	movs	r3, #12
 8001250:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001252:	2302      	movs	r3, #2
 8001254:	617b      	str	r3, [r7, #20]
      break;
 8001256:	e016      	b.n	8001286 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800125e:	2308      	movs	r3, #8
 8001260:	617b      	str	r3, [r7, #20]
      break;
 8001262:	e010      	b.n	8001286 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001264:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001268:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800126a:	230a      	movs	r3, #10
 800126c:	617b      	str	r3, [r7, #20]
      break;
 800126e:	e00a      	b.n	8001286 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001270:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001274:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8001276:	230c      	movs	r3, #12
 8001278:	617b      	str	r3, [r7, #20]
      break;
 800127a:	e004      	b.n	8001286 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
	  break;
 8001284:	bf00      	nop
  }

  if (mask != 0)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001292:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 800129e:	78ba      	ldrb	r2, [r7, #2]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ce:	60da      	str	r2, [r3, #12]
}
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	611a      	str	r2, [r3, #16]
}
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <XMC_CCU8_lDeassertReset+0x30>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d103      	bne.n	800130c <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8001304:	2080      	movs	r0, #128	; 0x80
 8001306:	f7ff f9cf 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
 800130a:	e007      	b.n	800131c <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a06      	ldr	r2, [pc, #24]	; (8001328 <XMC_CCU8_lDeassertReset+0x34>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d103      	bne.n	800131c <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8001314:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001318:	f7ff f9c6 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020000 	.word	0x40020000
 8001328:	40024000 	.word	0x40024000

0800132c <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <XMC_CCU8_lUngateClock+0x30>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d103      	bne.n	8001344 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 800133c:	2080      	movs	r0, #128	; 0x80
 800133e:	f7ff fb37 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8001342:	e007      	b.n	8001354 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a06      	ldr	r2, [pc, #24]	; (8001360 <XMC_CCU8_lUngateClock+0x34>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d103      	bne.n	8001354 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 800134c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001350:	f7ff fb2e 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020000 	.word	0x40020000
 8001360:	40024000 	.word	0x40024000

08001364 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800136c:	2010      	movs	r0, #16
 800136e:	f7ff fb0f 	bl	8000990 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffda 	bl	800132c <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffbb 	bl	80012f4 <XMC_CCU8_lDeassertReset>
#endif
}
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffe7 	bl	8001364 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff92 	bl	80012c0 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a8:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	039b      	lsls	r3, r3, #14
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff86 	bl	80012dc <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	7b5b      	ldrb	r3, [r3, #13]
 80013dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	051a      	lsls	r2, r3, #20
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	7b1b      	ldrb	r3, [r3, #12]
 80013ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	7b1b      	ldrb	r3, [r3, #12]
 80013fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	7b5b      	ldrb	r3, [r3, #13]
 800140c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f083 0214 	eor.w	r2, r3, #20
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop

08001434 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001440:	887a      	ldrh	r2, [r7, #2]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
 800145c:	4613      	mov	r3, r2
 800145e:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8001466:	883a      	ldrh	r2, [r7, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
 800146c:	e002      	b.n	8001474 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 800146e:	883a      	ldrh	r2, [r7, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
 800148c:	4613      	mov	r3, r2
 800148e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b0b      	cmp	r3, #11
 8001494:	d83b      	bhi.n	800150e <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <XMC_CCU8_SLICE_SetInterruptNode+0x1c>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014cd 	.word	0x080014cd
 80014a0:	080014cd 	.word	0x080014cd
 80014a4:	080014d7 	.word	0x080014d7
 80014a8:	080014d7 	.word	0x080014d7
 80014ac:	080014e1 	.word	0x080014e1
 80014b0:	080014e1 	.word	0x080014e1
 80014b4:	0800150f 	.word	0x0800150f
 80014b8:	0800150f 	.word	0x0800150f
 80014bc:	080014eb 	.word	0x080014eb
 80014c0:	080014f7 	.word	0x080014f7
 80014c4:	08001503 	.word	0x08001503
 80014c8:	08001503 	.word	0x08001503
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 80014cc:	2303      	movs	r3, #3
 80014ce:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
      break;
 80014d4:	e020      	b.n	8001518 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 80014da:	2302      	movs	r3, #2
 80014dc:	613b      	str	r3, [r7, #16]
      break;
 80014de:	e01b      	b.n	8001518 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 80014e0:	2330      	movs	r3, #48	; 0x30
 80014e2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 80014e4:	2304      	movs	r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
      break;
 80014e8:	e016      	b.n	8001518 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 80014ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ee:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 80014f0:	2308      	movs	r3, #8
 80014f2:	613b      	str	r3, [r7, #16]
      break;
 80014f4:	e010      	b.n	8001518 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 80014f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014fa:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 80014fc:	230a      	movs	r3, #10
 80014fe:	613b      	str	r3, [r7, #16]
      break;
 8001500:	e00a      	b.n	8001518 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU8_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8001502:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001506:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8001508:	230c      	movs	r3, #12
 800150a:	613b      	str	r3, [r7, #16]
      break;
 800150c:	e004      	b.n	8001518 <XMC_CCU8_SLICE_SetInterruptNode+0x98>
	  
	default:
	  mask = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
	  pos = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
	  break;
 8001516:	bf00      	nop
  }

  if (mask != 0)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d013      	beq.n	8001546 <XMC_CCU8_SLICE_SetInterruptNode+0xc6>
  {
    srs = slice->SRS;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001524:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	43db      	mvns	r3, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8001530:	78ba      	ldrb	r2, [r7, #2]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	460b      	mov	r3, r1
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7fe ff16 	bl	8000390 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001568:	7afb      	ldrb	r3, [r7, #11]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4619      	mov	r1, r3
 800156e:	230f      	movs	r3, #15
 8001570:	408b      	lsls	r3, r1
 8001572:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 8001574:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	7af9      	ldrb	r1, [r7, #11]
 800157c:	0089      	lsls	r1, r1, #2
 800157e:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001580:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
 8001586:	7afa      	ldrb	r2, [r7, #11]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3204      	adds	r2, #4
 8001590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop

0800159c <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
 80015a8:	4613      	mov	r3, r2
 80015aa:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	78bb      	ldrb	r3, [r7, #2]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	f001 0103 	and.w	r1, r1, #3
 80015be:	0109      	lsls	r1, r1, #4
 80015c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80015c4:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80015c8:	4301      	orrs	r1, r0
 80015ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
 80015e4:	4613      	mov	r3, r2
 80015e6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4619      	mov	r1, r3
 80015f2:	2303      	movs	r3, #3
 80015f4:	408b      	lsls	r3, r1
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001602:	78bb      	ldrb	r3, [r7, #2]
 8001604:	78f9      	ldrb	r1, [r7, #3]
 8001606:	0049      	lsls	r1, r1, #1
 8001608:	408b      	lsls	r3, r1
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop

08001658 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	4613      	mov	r3, r2
 8001664:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001666:	2310      	movs	r3, #16
 8001668:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 f89e 	bl	80017ac <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	7a1b      	ldrb	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	7a1b      	ldrb	r3, [r3, #8]
 800167c:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d014      	beq.n	80016ae <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	791b      	ldrb	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	f000 f945 	bl	8001928 <XMC_USIC_CH_SetBaudrateEx>
 800169e:	e006      	b.n	80016ae <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	4619      	mov	r1, r3
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	f000 f8cb 	bl	8001844 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	79db      	ldrb	r3, [r3, #7]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	3301      	adds	r3, #1
 80016bc:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80016be:	4313      	orrs	r3, r2
 80016c0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	795b      	ldrb	r3, [r3, #5]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	799b      	ldrb	r3, [r3, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	799b      	ldrb	r3, [r3, #6]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
 80016f6:	e008      	b.n	800170a <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	795b      	ldrb	r3, [r3, #5]
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
 8001704:	431a      	orrs	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	895b      	ldrh	r3, [r3, #10]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop

0800172c <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800173e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d110      	bne.n	8001768 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001746:	bf00      	nop
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff67 	bl	800161c <XMC_USIC_CH_GetTransmitBufferStatus>
 800174e:	4603      	mov	r3, r0
 8001750:	2b80      	cmp	r3, #128	; 0x80
 8001752:	d0f9      	beq.n	8001748 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	f7ff ff6f 	bl	800163c <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001766:	e003      	b.n	8001770 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001768:	887a      	ldrh	r2, [r7, #2]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop

08001778 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001786:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	e003      	b.n	800179e <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800179c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800179e:	89fb      	ldrh	r3, [r7, #14]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <XMC_USIC_CH_Enable+0x74>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d003      	beq.n	80017c4 <XMC_USIC_CH_Enable+0x18>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a19      	ldr	r2, [pc, #100]	; (8001824 <XMC_USIC_CH_Enable+0x78>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d103      	bne.n	80017cc <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80017c4:	4818      	ldr	r0, [pc, #96]	; (8001828 <XMC_USIC_CH_Enable+0x7c>)
 80017c6:	f000 f9bb 	bl	8001b40 <XMC_USIC_Enable>
 80017ca:	e016      	b.n	80017fa <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <XMC_USIC_CH_Enable+0x80>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d003      	beq.n	80017dc <XMC_USIC_CH_Enable+0x30>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <XMC_USIC_CH_Enable+0x84>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d103      	bne.n	80017e4 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80017dc:	4815      	ldr	r0, [pc, #84]	; (8001834 <XMC_USIC_CH_Enable+0x88>)
 80017de:	f000 f9af 	bl	8001b40 <XMC_USIC_Enable>
 80017e2:	e00a      	b.n	80017fa <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <XMC_USIC_CH_Enable+0x8c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d003      	beq.n	80017f4 <XMC_USIC_CH_Enable+0x48>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <XMC_USIC_CH_Enable+0x90>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d102      	bne.n	80017fa <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80017f4:	4812      	ldr	r0, [pc, #72]	; (8001840 <XMC_USIC_CH_Enable+0x94>)
 80017f6:	f000 f9a3 	bl	8001b40 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001800:	bf00      	nop
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f9      	beq.n	8001802 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f023 020f 	bic.w	r2, r3, #15
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
}
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40030000 	.word	0x40030000
 8001824:	40030200 	.word	0x40030200
 8001828:	40030008 	.word	0x40030008
 800182c:	48020000 	.word	0x48020000
 8001830:	48020200 	.word	0x48020200
 8001834:	48020008 	.word	0x48020008
 8001838:	48024000 	.word	0x48024000
 800183c:	48024200 	.word	0x48024200
 8001840:	48024008 	.word	0x48024008

08001844 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b63      	cmp	r3, #99	; 0x63
 8001854:	d95a      	bls.n	800190c <XMC_USIC_CH_SetBaudrate+0xc8>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d057      	beq.n	800190c <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 800185c:	f7fe ff64 	bl	8000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001860:	4602      	mov	r2, r0
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001864:	fba3 2302 	umull	r2, r3, r3, r2
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 800187e:	2301      	movs	r3, #1
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001882:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001886:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
 800188e:	e022      	b.n	80018d6 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001894:	fb02 f203 	mul.w	r2, r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	0a9b      	lsrs	r3, r3, #10
 80018aa:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018b2:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ba:	d809      	bhi.n	80018d0 <XMC_USIC_CH_SetBaudrate+0x8c>
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d205      	bcs.n	80018d0 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d2:	3b01      	subs	r3, #1
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1d9      	bne.n	8001890 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80018e0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <XMC_USIC_CH_SetBaudrate+0xe0>)
 80018ee:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	3a01      	subs	r2, #1
 80018f4:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80018f6:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fa:	3b01      	subs	r3, #1
 80018fc:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80018fe:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800190a:	e002      	b.n	8001912 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8001912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001916:	4618      	mov	r0, r3
 8001918:	3738      	adds	r7, #56	; 0x38
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	51eb851f 	.word	0x51eb851f
 8001924:	fc0080ef 	.word	0xfc0080ef

08001928 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001934:	f7fe fef8 	bl	8000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001938:	4603      	mov	r3, r0
 800193a:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 800194a:	6a3a      	ldr	r2, [r7, #32]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	429a      	cmp	r2, r3
 8001950:	dd5f      	ble.n	8001a12 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	fb92 f3f3 	sdiv	r3, r2, r3
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 800195c:	e010      	b.n	8001980 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	3301      	adds	r3, #1
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	461a      	mov	r2, r3
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	fb03 f302 	mul.w	r3, r3, r2
 8001974:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001976:	6a3a      	ldr	r2, [r7, #32]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	fb92 f3f3 	sdiv	r3, r2, r3
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001986:	4293      	cmp	r3, r2
 8001988:	d8e9      	bhi.n	800195e <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 800198a:	6a3a      	ldr	r2, [r7, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80019a0:	6a3a      	ldr	r2, [r7, #32]
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	3301      	adds	r3, #1
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019c2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bfb8      	it	lt
 80019d0:	425b      	neglt	r3, r3
 80019d2:	429a      	cmp	r2, r3
 80019d4:	da02      	bge.n	80019dc <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	3301      	adds	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 80019f4:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	3a01      	subs	r2, #1
 80019fa:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80019fc:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001a04:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a10:	e002      	b.n	8001a18 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3730      	adds	r7, #48	; 0x30
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	fc0080ef 	.word	0xfc0080ef

08001a28 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a3e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001a50:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	0211      	lsls	r1, r2, #8
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001a5e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8001a60:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	f8ffc0c0 	.word	0xf8ffc0c0

08001a78 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	4613      	mov	r3, r2
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a8e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001aa0:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	0211      	lsls	r1, r2, #8
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001aaa:	79fa      	ldrb	r2, [r7, #7]
 8001aac:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001aae:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	efffc0c0 	.word	0xefffc0c0

08001acc <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	7afb      	ldrb	r3, [r7, #11]
 8001ae0:	2107      	movs	r1, #7
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001af2:	431a      	orrs	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	2107      	movs	r1, #7
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001b24:	7afb      	ldrb	r3, [r7, #11]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop

08001b40 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <XMC_USIC_Enable+0xac>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d118      	bne.n	8001b82 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001b50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b54:	f7fe ff2c 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001b58:	bf00      	nop
 8001b5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b5e:	f7fe ff43 	bl	80009e8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f8      	bne.n	8001b5a <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001b68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b6c:	f7fe fd9c 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001b70:	bf00      	nop
 8001b72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b76:	f7fe fdb3 	bl	80006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f8      	bne.n	8001b72 <XMC_USIC_Enable+0x32>
 8001b80:	e030      	b.n	8001be4 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <XMC_USIC_Enable+0xb0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d114      	bne.n	8001bb4 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001b8a:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <XMC_USIC_Enable+0xb4>)
 8001b8c:	f7fe ff10 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001b90:	bf00      	nop
 8001b92:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <XMC_USIC_Enable+0xb4>)
 8001b94:	f7fe ff28 	bl	80009e8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001b9e:	4815      	ldr	r0, [pc, #84]	; (8001bf4 <XMC_USIC_Enable+0xb4>)
 8001ba0:	f7fe fd82 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001ba4:	bf00      	nop
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <XMC_USIC_Enable+0xb4>)
 8001ba8:	f7fe fd9a 	bl	80006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f9      	bne.n	8001ba6 <XMC_USIC_Enable+0x66>
 8001bb2:	e017      	b.n	8001be4 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <XMC_USIC_Enable+0xb8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d113      	bne.n	8001be4 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8001bbc:	480f      	ldr	r0, [pc, #60]	; (8001bfc <XMC_USIC_Enable+0xbc>)
 8001bbe:	f7fe fef7 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8001bc2:	bf00      	nop
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <XMC_USIC_Enable+0xbc>)
 8001bc6:	f7fe ff0f 	bl	80009e8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <XMC_USIC_Enable+0xbc>)
 8001bd2:	f7fe fd69 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8001bd6:	bf00      	nop
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <XMC_USIC_Enable+0xbc>)
 8001bda:	f7fe fd81 	bl	80006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40030008 	.word	0x40030008
 8001bf0:	48020008 	.word	0x48020008
 8001bf4:	10000080 	.word	0x10000080
 8001bf8:	48024008 	.word	0x48024008
 8001bfc:	10000100 	.word	0x10000100

08001c00 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001c0a:	783b      	ldrb	r3, [r7, #0]
 8001c0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001c3e:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	079b      	lsls	r3, r3, #30
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop

08001cc4 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7fe fe71 	bl	80009b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7fe fcea 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop

08001cd8 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001ce2:	f7ff ffef 	bl	8001cc4 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop

08001d2c <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f240 731f 	movw	r3, #1823	; 0x71f
 8001d48:	4013      	ands	r3, r2
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	3128      	adds	r1, #40	; 0x28
 8001d50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001d54:	e007      	b.n	8001d66 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	3128      	adds	r1, #40	; 0x28
 8001d62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	071f0000 	.word	0x071f0000

08001d74 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e017      	b.n	8001dc2 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001daa:	e000      	b.n	8001dae <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8001dac:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f7      	bne.n	8001dac <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d9e4      	bls.n	8001d92 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	08007728 	.word	0x08007728

08001dd8 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d903      	bls.n	8001df2 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	3b04      	subs	r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e001      	b.n	8001df6 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001dfc:	f023 020f 	bic.w	r2, r3, #15
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	2300      	movs	r3, #0
 8001e34:	f000 f828 	bl	8001e88 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2300      	movs	r3, #0
 8001e42:	f000 f821 	bl	8001e88 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 f81a 	bl	8001e88 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f000 f813 	bl	8001e88 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	f7ff fec0 	bl	8001c00 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop

08001e88 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b08d      	sub	sp, #52	; 0x34
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d113      	bne.n	8001ec6 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001ea2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001eac:	231f      	movs	r3, #31
 8001eae:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001eb0:	7a3b      	ldrb	r3, [r7, #8]
 8001eb2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001eba:	7a7b      	ldrb	r3, [r7, #9]
 8001ebc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	76fb      	strb	r3, [r7, #27]
 8001ec4:	e013      	b.n	8001eee <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001ec6:	2318      	movs	r3, #24
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001eca:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001ed4:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001ed8:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001eda:	7abb      	ldrb	r3, [r7, #10]
 8001edc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	3228      	adds	r2, #40	; 0x28
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	43db      	mvns	r3, r3
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001f04:	7efa      	ldrb	r2, [r7, #27]
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	3228      	adds	r2, #40	; 0x28
 8001f30:	6979      	ldr	r1, [r7, #20]
 8001f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f36:	3734      	adds	r7, #52	; 0x34
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f52:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]
 8001f86:	e009      	b.n	8001f9c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	4a39      	ldr	r2, [pc, #228]	; (8002070 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fe85 	bl	8001ca0 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	75fb      	strb	r3, [r7, #23]
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d9f2      	bls.n	8001f88 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fb8:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]
 8001fbe:	e021      	b.n	8002004 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fcc:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	3301      	adds	r3, #1
 8002002:	75fb      	strb	r3, [r7, #23]
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d9da      	bls.n	8001fc0 <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800203e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	75fb      	strb	r3, [r7, #23]
 800204c:	e009      	b.n	8002062 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fe10 	bl	8001c7c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	3301      	adds	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d9f2      	bls.n	800204e <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	08007728 	.word	0x08007728

08002074 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7b1b      	ldrb	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2201      	movs	r2, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7b5b      	ldrb	r3, [r3, #13]
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db29      	blt.n	8002112 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10a      	bne.n	80020de <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 80020c8:	2308      	movs	r3, #8
 80020ca:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020dc:	e00c      	b.n	80020f8 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020ee:	f023 021f 	bic.w	r2, r3, #31
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	7b52      	ldrb	r2, [r2, #13]
 8002102:	b251      	sxtb	r1, r2
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	431a      	orrs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	431a      	orrs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	3280      	adds	r2, #128	; 0x80
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <_sbrk+0x5c>)
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <_sbrk+0x60>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <_sbrk+0x5c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3303      	adds	r3, #3
 8002170:	f023 0303 	bic.w	r3, r3, #3
 8002174:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <_sbrk+0x5c>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <_sbrk+0x64>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <_sbrk+0x5c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <_sbrk+0x5c>)
 800218e:	6013      	str	r3, [r2, #0]
    return (base);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	e006      	b.n	80021a2 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002194:	f003 fcd0 	bl	8005b38 <__errno>
 8002198:	4602      	mov	r2, r0
 800219a:	230c      	movs	r3, #12
 800219c:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	1ffe8acc 	.word	0x1ffe8acc
 80021b0:	20000000 	.word	0x20000000
 80021b4:	2003ffc0 	.word	0x2003ffc0

080021b8 <_init>:

/* Init */
void _init(void)
{}
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021fa:	b2db      	uxtb	r3, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	43db      	mvns	r3, r3
 800221c:	401a      	ands	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf14      	ite	ne
 800226e:	2301      	movne	r3, #1
 8002270:	2300      	moveq	r3, #0
 8002272:	b2db      	uxtb	r3, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800228e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <XMC_UART_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 */
__STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return channel->PSR_ASCMode;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4798      	blx	r3
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]

  return status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop

0800231c <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002328:	2304      	movs	r3, #4
 800232a:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002334:	2b02      	cmp	r3, #2
 8002336:	d000      	beq.n	800233a <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8002338:	e007      	b.n	800234a <UART_Receive+0x2e>
    ret_stat = UART_StartReceiveDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_RX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	f000 f808 	bl	8002354 <UART_lStartReceivePolling>
 8002344:	4603      	mov	r3, r0
 8002346:	75fb      	strb	r3, [r7, #23]
    break;
 8002348:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 800234a:	7dfb      	ldrb	r3, [r7, #23]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <UART_lStartReceivePolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either RBUF or OUT register will be read.
 *
 */
static UART_STATUS_t UART_lStartReceivePolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8002360:	2303      	movs	r3, #3
 8002362:	77fb      	strb	r3, [r7, #31]
  uint32_t loc_status;

  XMC_ASSERT("UART_Receive: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d060      	beq.n	800242c <UART_lStartReceivePolling+0xd8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d05d      	beq.n	800242c <UART_lStartReceivePolling+0xd8>
  {
    ret_stat = UART_STATUS_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	77fb      	strb	r3, [r7, #31]
    if (handle->runtime->rx_busy == false)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	7e5b      	ldrb	r3, [r3, #25]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d052      	beq.n	800242c <UART_lStartReceivePolling+0xd8>
    {
      handle->runtime->rx_busy = true;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2201      	movs	r2, #1
 800238c:	765a      	strb	r2, [r3, #25]
      if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <UART_lStartReceivePolling+0x50>
      {
        /*Clear the receive FIFO, configure the trigger lime
         * and enable the receive events*/
        XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff6e 	bl	8002280 <XMC_USIC_CH_RXFIFO_Flush>
      }
      for (loc_index = 0U; loc_index < count; loc_index++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	e036      	b.n	8002418 <UART_lStartReceivePolling+0xc4>
      {
        /*If receive FIFO is configured, wait for FIFO to get data.*/
        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <UART_lStartReceivePolling+0x76>
        {
          /*Wait if FIFO empty*/
          while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 80023b6:	bf00      	nop
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff6d 	bl	800229c <XMC_USIC_CH_RXFIFO_IsEmpty>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f7      	bne.n	80023b8 <UART_lStartReceivePolling+0x64>
 80023c8:	e018      	b.n	80023fc <UART_lStartReceivePolling+0xa8>
          }
        }
        else
        {
          /*Wait for RIF or AIF flag update*/
          loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff78 	bl	80022c4 <XMC_UART_CH_GetStatusFlag>
 80023d4:	6178      	str	r0, [r7, #20]
          while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 80023d6:	e005      	b.n	80023e4 <UART_lStartReceivePolling+0x90>
                (uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION)))
          {
            loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff71 	bl	80022c4 <XMC_UART_CH_GetStatusFlag>
 80023e2:	6178      	str	r0, [r7, #20]
        }
        else
        {
          /*Wait for RIF or AIF flag update*/
          loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
          while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f4      	beq.n	80023d8 <UART_lStartReceivePolling+0x84>
            loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
          }
          /*Clear the detected event.
           * Both events should not be cleared at once, otherwise if 2 bytes are received, only
           * one byte will be read.*/
          XMC_UART_CH_ClearStatusFlag(handle->channel,
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80023f8:	f7ff ff70 	bl	80022dc <XMC_UART_CH_ClearStatusFlag>
              ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
        }
        data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	18d4      	adds	r4, r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f9b6 	bl	8001778 <XMC_UART_CH_GetReceivedData>
 800240c:	4603      	mov	r3, r0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	7023      	strb	r3, [r4, #0]
      {
        /*Clear the receive FIFO, configure the trigger lime
         * and enable the receive events*/
        XMC_USIC_CH_RXFIFO_Flush(handle->channel);
      }
      for (loc_index = 0U; loc_index < count; loc_index++)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	3301      	adds	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d3c4      	bcc.n	80023aa <UART_lStartReceivePolling+0x56>
          XMC_UART_CH_ClearStatusFlag(handle->channel,
              ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
        }
        data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      }
      ret_stat = UART_STATUS_SUCCESS;
 8002420:	2300      	movs	r3, #0
 8002422:	77fb      	strb	r3, [r7, #31]
      handle->runtime->rx_busy = false;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	765a      	strb	r2, [r3, #25]
    }
  }
  return ret_stat;
 800242c:	7ffb      	ldrb	r3, [r7, #31]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}
 8002436:	bf00      	nop

08002438 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	d240      	bcs.n	80024d4 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800245a:	2b00      	cmp	r3, #0
 800245c:	d027      	beq.n	80024ae <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 800245e:	e01a      	b.n	8002496 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	429a      	cmp	r2, r3
 800246a:	d212      	bcs.n	8002492 <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4608      	mov	r0, r1
 8002480:	4619      	mov	r1, r3
 8002482:	f7ff f953 	bl	800172c <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	e001      	b.n	8002496 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8002492:	bf00      	nop
 8002494:	e053      	b.n	800253e <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fec8 	bl	8002230 <XMC_USIC_CH_TXFIFO_IsFull>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1d9      	bne.n	8002460 <UART_lTransmitHandler+0x28>
 80024ac:	e047      	b.n	800253e <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4608      	mov	r0, r1
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7ff f932 	bl	800172c <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	e034      	b.n	800253e <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff febd 	bl	8002258 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02c      	beq.n	800253e <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024fa:	f7ff fe85 	bl	8002208 <XMC_USIC_CH_TXFIFO_DisableEvent>
 80024fe:	e006      	b.n	800250e <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800250a:	f7ff fe5b 	bl	80021c4 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800250e:	bf00      	nop
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fe67 	bl	80021e8 <XMC_USIC_CH_GetTransmitBufferStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d0f7      	beq.n	8002510 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4798      	blx	r3
      }
    }
  }
}
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002550:	0a1b      	lsrs	r3, r3, #8
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_EnableIRQ+0x34>)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	f002 021f 	and.w	r2, r2, #31
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	490d      	ldr	r1, [pc, #52]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	4909      	ldr	r1, [pc, #36]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
  }
}
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b06      	cmp	r3, #6
 8002608:	bf28      	it	cs
 800260a:	2306      	movcs	r3, #6
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3306      	adds	r3, #6
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b01      	subs	r3, #1
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2201      	movs	r2, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	401a      	ands	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	1e59      	subs	r1, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002640:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
 800265c:	4613      	mov	r3, r2
 800265e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002660:	78f8      	ldrb	r0, [r7, #3]
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	3306      	adds	r3, #6
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002672:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002674:	431a      	orrs	r2, r3
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	1d83      	adds	r3, r0, #6
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	f7fe ffdc 	bl	8001658 <XMC_UART_CH_InitEx>
}
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop

080026a8 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f023 030f 	bic.w	r3, r3, #15
 80026b8:	f043 0202 	orr.w	r2, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <UART_PROTOKOLL_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_PROTOKOLL_init()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80026d2:	2300      	movs	r3, #0
 80026d4:	71fb      	strb	r3, [r7, #7]
  /*Reset the runtime state variables*/
  UART_PROTOKOLL.runtime->tx_busy = false;
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <UART_PROTOKOLL_init+0x9c>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2200      	movs	r2, #0
 80026dc:	761a      	strb	r2, [r3, #24]
  UART_PROTOKOLL.runtime->rx_busy = false;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <UART_PROTOKOLL_init+0x9c>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2200      	movs	r2, #0
 80026e4:	765a      	strb	r2, [r3, #25]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 1U, &UART_PROTOKOLL_rx_pin_config);
 80026e6:	4821      	ldr	r0, [pc, #132]	; (800276c <UART_PROTOKOLL_init+0xa0>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <UART_PROTOKOLL_init+0xa4>)
 80026ec:	f7fd fe66 	bl	80003bc <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART2_CH0, &UART_PROTOKOLL_channel_config);
 80026f0:	4820      	ldr	r0, [pc, #128]	; (8002774 <UART_PROTOKOLL_init+0xa8>)
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <UART_PROTOKOLL_init+0xac>)
 80026f4:	f7ff ffca 	bl	800268c <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART2_CH0, XMC_USIC_CH_INPUT_DX0, 0U);
 80026f8:	481e      	ldr	r0, [pc, #120]	; (8002774 <UART_PROTOKOLL_init+0xa8>)
 80026fa:	2100      	movs	r1, #0
 80026fc:	2200      	movs	r2, #0
 80026fe:	f7ff ffa7 	bl	8002650 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART2_CH0,
 8002702:	481c      	ldr	r0, [pc, #112]	; (8002774 <UART_PROTOKOLL_init+0xa8>)
 8002704:	2108      	movs	r1, #8
 8002706:	2204      	movs	r2, #4
 8002708:	2301      	movs	r3, #1
 800270a:	f7ff f98d 	bl	8001a28 <XMC_USIC_CH_TXFIFO_Configure>
        8U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART2_CH0,
 800270e:	4819      	ldr	r0, [pc, #100]	; (8002774 <UART_PROTOKOLL_init+0xa8>)
 8002710:	2100      	movs	r1, #0
 8002712:	2203      	movs	r2, #3
 8002714:	2307      	movs	r3, #7
 8002716:	f7ff f9af 	bl	8001a78 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_8WORDS,
        7U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART2_CH0);
 800271a:	4816      	ldr	r0, [pc, #88]	; (8002774 <UART_PROTOKOLL_init+0xa8>)
 800271c:	f7ff ffc4 	bl	80026a8 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT6_BASE, 6U, &UART_PROTOKOLL_tx_pin_config);
 8002720:	4816      	ldr	r0, [pc, #88]	; (800277c <UART_PROTOKOLL_init+0xb0>)
 8002722:	2106      	movs	r1, #6
 8002724:	4a16      	ldr	r2, [pc, #88]	; (8002780 <UART_PROTOKOLL_init+0xb4>)
 8002726:	f7fd fe49 	bl	80003bc <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART2_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 800272a:	4812      	ldr	r0, [pc, #72]	; (8002774 <UART_PROTOKOLL_init+0xa8>)
 800272c:	2110      	movs	r1, #16
 800272e:	2200      	movs	r2, #0
 8002730:	f7ff f9cc 	bl	8001acc <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART2_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002734:	480f      	ldr	r0, [pc, #60]	; (8002774 <UART_PROTOKOLL_init+0xa8>)
 8002736:	2110      	movs	r1, #16
 8002738:	2202      	movs	r2, #2
 800273a:	f7ff f9e3 	bl	8001b04 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      2U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)98, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 800273e:	f7ff ff01 	bl	8002544 <__NVIC_GetPriorityGrouping>
 8002742:	4603      	mov	r3, r0
 8002744:	4618      	mov	r0, r3
 8002746:	213f      	movs	r1, #63	; 0x3f
 8002748:	2200      	movs	r2, #0
 800274a:	f7ff ff4f 	bl	80025ec <NVIC_EncodePriority>
 800274e:	4603      	mov	r3, r0
 8002750:	2062      	movs	r0, #98	; 0x62
 8002752:	4619      	mov	r1, r3
 8002754:	f7ff ff20 	bl	8002598 <__NVIC_SetPriority>
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)98);
 8002758:	2062      	movs	r0, #98	; 0x62
 800275a:	f7ff ff01 	bl	8002560 <__NVIC_EnableIRQ>
  return status;
 800275e:	79fb      	ldrb	r3, [r7, #7]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	1ffe8800 	.word	0x1ffe8800
 800276c:	48028500 	.word	0x48028500
 8002770:	08007788 	.word	0x08007788
 8002774:	48024000 	.word	0x48024000
 8002778:	08007738 	.word	0x08007738
 800277c:	48028600 	.word	0x48028600
 8002780:	08007744 	.word	0x08007744

08002784 <USIC2_2_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_PROTOKOLL_TX_HANDLER()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_PROTOKOLL);
 8002788:	4801      	ldr	r0, [pc, #4]	; (8002790 <USIC2_2_IRQHandler+0xc>)
 800278a:	f7ff fe55 	bl	8002438 <UART_lTransmitHandler>
}
 800278e:	bd80      	pop	{r7, pc}
 8002790:	1ffe8800 	.word	0x1ffe8800

08002794 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	2201      	movs	r2, #1
 80027a4:	409a      	lsls	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60da      	str	r2, [r3, #12]
}
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	60da      	str	r2, [r3, #12]
}
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	611a      	str	r2, [r3, #16]
}
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80027f0:	887a      	ldrh	r2, [r7, #2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	611a      	str	r2, [r3, #16]
}
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002876:	f083 0301 	eor.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f808 	bl	80028a0 <TIMER_CCU4_lInit>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop

080028a0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 f921 	bl	8003af4 <GLOBAL_CCU4_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7ff ff66 	bl	8002794 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe fb96 	bl	8001004 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f82d 	bl	8002938 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00f      	beq.n	8002908 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f2:	4610      	mov	r0, r2
 80028f4:	2100      	movs	r1, #0
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7fe fc7e 	bl	80011f8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	4618      	mov	r0, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f7ff ff98 	bl	8002838 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff43 	bl	80027b4 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7ff ff4a 	bl	80027e4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	4618      	mov	r0, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f7ff ff52 	bl	8002800 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7ff ff57 	bl	800281c <XMC_CCU4_EnableShadowTransfer>
}
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002980:	0a1b      	lsrs	r3, r3, #8
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db0a      	blt.n	80029ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a4:	490d      	ldr	r1, [pc, #52]	; (80029dc <__NVIC_SetPriority+0x4c>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	440b      	add	r3, r1
 80029b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80029b8:	e00a      	b.n	80029d0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	4909      	ldr	r1, [pc, #36]	; (80029e0 <__NVIC_SetPriority+0x50>)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	3b04      	subs	r3, #4
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	440b      	add	r3, r1
 80029ce:	761a      	strb	r2, [r3, #24]
  }
}
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f1c3 0307 	rsb	r3, r3, #7
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	bf28      	it	cs
 8002a02:	2306      	movcs	r3, #6
 8002a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3306      	adds	r3, #6
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d902      	bls.n	8002a14 <NVIC_EncodePriority+0x30>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	e000      	b.n	8002a16 <NVIC_EncodePriority+0x32>
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	401a      	ands	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	1e59      	subs	r1, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002a38:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a58:	d301      	bcc.n	8002a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00f      	b.n	8002a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <SysTick_Config+0x40>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a66:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6a:	213f      	movs	r1, #63	; 0x3f
 8002a6c:	f7ff ff90 	bl	8002990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <SysTick_Config+0x40>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <SysTick_Config+0x40>)
 8002a78:	2207      	movs	r2, #7
 8002a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010

08002a8c <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8002a8c:	b490      	push	{r4, r7}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8002a98:	496b      	ldr	r1, [pc, #428]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3318      	adds	r3, #24
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8002aac:	4b67      	ldr	r3, [pc, #412]	; (8002c4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4a62      	ldr	r2, [pc, #392]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4a62      	ldr	r2, [pc, #392]	; (8002c4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e0bb      	b.n	8002c40 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8002ac8:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002ad2:	e0ab      	b.n	8002c2c <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dc7a      	bgt.n	8002bdc <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d026      	beq.n	8002b3c <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002afe:	4413      	add	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	4850      	ldr	r0, [pc, #320]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4403      	add	r3, r0
 8002b14:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8002b16:	494c      	ldr	r1, [pc, #304]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4a45      	ldr	r2, [pc, #276]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b34:	441a      	add	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e01c      	b.n	8002b76 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8002b3c:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	4841      	ldr	r0, [pc, #260]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4403      	add	r3, r0
 8002b4e:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8002b50:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4a3a      	ldr	r2, [pc, #232]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b60:	4413      	add	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4a36      	ldr	r2, [pc, #216]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b70:	4413      	add	r3, r2
 8002b72:	4a36      	ldr	r2, [pc, #216]	; (8002c4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002b74:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8002b76:	4934      	ldr	r1, [pc, #208]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	18d1      	adds	r1, r2, r3
 8002b8c:	482e      	ldr	r0, [pc, #184]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4403      	add	r3, r0
 8002b9a:	3318      	adds	r3, #24
 8002b9c:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8002b9e:	492a      	ldr	r1, [pc, #168]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	4826      	ldr	r0, [pc, #152]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4403      	add	r3, r0
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6998      	ldr	r0, [r3, #24]
 8002bc0:	4c21      	ldr	r4, [pc, #132]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4423      	add	r3, r4
 8002bce:	3318      	adds	r3, #24
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1ac3      	subs	r3, r0, r3
 8002bd4:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e024      	b.n	8002c26 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	dd21      	ble.n	8002c26 <SYSTIMER_lInsertTimerList+0x19a>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11d      	bne.n	8002c26 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8002bea:	4917      	ldr	r1, [pc, #92]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002c08:	441a      	add	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8002c0e:	6939      	ldr	r1, [r7, #16]
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4403      	add	r3, r0
 8002c1e:	3318      	adds	r3, #24
 8002c20:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <SYSTIMER_lInsertTimerList+0x1b4>
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f af4a 	bne.w	8002ad4 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc90      	pop	{r4, r7}
 8002c46:	4770      	bx	lr
 8002c48:	1ffe8b48 	.word	0x1ffe8b48
 8002c4c:	1ffe8af4 	.word	0x1ffe8af4

08002c50 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <SYSTIMER_lRemoveTimerList+0xb8>)
 8002c64:	4413      	add	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <SYSTIMER_lRemoveTimerList+0x30>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e03d      	b.n	8002cfc <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d114      	bne.n	8002cb2 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8002c8e:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2200      	movs	r2, #0
 8002c96:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	6991      	ldr	r1, [r2, #24]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6992      	ldr	r2, [r2, #24]
 8002ca6:	440a      	add	r2, r1
 8002ca8:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e024      	b.n	8002cfc <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	e018      	b.n	8002cfc <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	6991      	ldr	r1, [r2, #24]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	6992      	ldr	r2, [r2, #24]
 8002cec:	440a      	add	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	605a      	str	r2, [r3, #4]
  }
}
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	1ffe8b48 	.word	0x1ffe8b48
 8002d0c:	1ffe8af4 	.word	0x1ffe8af4

08002d10 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <SYSTIMER_lTimerHandler+0xc4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002d1c:	e050      	b.n	8002dc0 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff8f 	bl	8002c50 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2301      	movs	r3, #1
 8002d40:	4093      	lsls	r3, r2
 8002d42:	43da      	mvns	r2, r3
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <SYSTIMER_lTimerHandler+0xc8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <SYSTIMER_lTimerHandler+0xc8>)
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e034      	b.n	8002dba <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7b1b      	ldrb	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d112      	bne.n	8002d7e <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7b5b      	ldrb	r3, [r3, #13]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d12c      	bne.n	8002dba <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff73 	bl	8002c50 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6912      	ldr	r2, [r2, #16]
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4798      	blx	r3
 8002d7c:	e01d      	b.n	8002dba <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7b1b      	ldrb	r3, [r3, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d118      	bne.n	8002db8 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7b5b      	ldrb	r3, [r3, #13]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d115      	bne.n	8002dba <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff5c 	bl	8002c50 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe71 	bl	8002a8c <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6912      	ldr	r2, [r2, #16]
 8002db2:	4610      	mov	r0, r2
 8002db4:	4798      	blx	r3
 8002db6:	e000      	b.n	8002dba <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8002db8:	e009      	b.n	8002dce <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <SYSTIMER_lTimerHandler+0xc4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <SYSTIMER_lTimerHandler+0xbe>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0a7      	beq.n	8002d1e <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	1ffe8af4 	.word	0x1ffe8af4
 8002dd8:	1ffe8af8 	.word	0x1ffe8af8

08002ddc <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <SysTick_Handler+0x40>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <SysTick_Handler+0x44>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <SysTick_Handler+0x44>)
 8002df0:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d905      	bls.n	8002e0c <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
 8002e0a:	e004      	b.n	8002e16 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8002e12:	f7ff ff7d 	bl	8002d10 <SYSTIMER_lTimerHandler>
    }
  }
}
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	1ffe8af4 	.word	0x1ffe8af4
 8002e20:	1ffe8afc 	.word	0x1ffe8afc

08002e24 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	f083 0301 	eor.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <SYSTIMER_Init+0x68>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8002e44:	4812      	ldr	r0, [pc, #72]	; (8002e90 <SYSTIMER_Init+0x6c>)
 8002e46:	f7ff fdff 	bl	8002a48 <SysTick_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d015      	beq.n	8002e80 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8002e54:	f7ff fd8e 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	213f      	movs	r1, #63	; 0x3f
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f7ff fdc0 	bl	80029e4 <NVIC_EncodePriority>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7ff fd90 	bl	8002990 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <SYSTIMER_Init+0x70>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	1ffe8af4 	.word	0x1ffe8af4
 8002e90:	00023280 	.word	0x00023280
 8002e94:	1ffe8af8 	.word	0x1ffe8af8

08002e98 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eba:	d202      	bcs.n	8002ec2 <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	e07b      	b.n	8002fba <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e075      	b.n	8002fb4 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <SYSTIMER_CreateTimer+0x130>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d16a      	bne.n	8002fae <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2201      	movs	r2, #1
 8002edc:	409a      	lsls	r2, r3
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <SYSTIMER_CreateTimer+0x130>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <SYSTIMER_CreateTimer+0x130>)
 8002ee6:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8002ee8:	4938      	ldr	r1, [pc, #224]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3310      	adds	r3, #16
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8002efc:	4933      	ldr	r1, [pc, #204]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	7afa      	ldrb	r2, [r7, #11]
 8002f0e:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8002f10:	492e      	ldr	r1, [pc, #184]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3308      	adds	r3, #8
 8002f20:	2202      	movs	r2, #2
 8002f22:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <SYSTIMER_CreateTimer+0x138>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1c59      	adds	r1, r3, #1
 8002f34:	4825      	ldr	r0, [pc, #148]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4403      	add	r3, r0
 8002f42:	3318      	adds	r3, #24
 8002f44:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8002f46:	4921      	ldr	r1, [pc, #132]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3318      	adds	r3, #24
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8002f5a:	491c      	ldr	r1, [pc, #112]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3308      	adds	r3, #8
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8002f6e:	4917      	ldr	r1, [pc, #92]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3310      	adds	r3, #16
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8002f82:	4912      	ldr	r1, [pc, #72]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8002f94:	490d      	ldr	r1, [pc, #52]	; (8002fcc <SYSTIMER_CreateTimer+0x134>)
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
        break;
 8002fac:	e005      	b.n	8002fba <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b07      	cmp	r3, #7
 8002fb8:	d986      	bls.n	8002ec8 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8002fba:	69fb      	ldr	r3, [r7, #28]
}  
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3724      	adds	r7, #36	; 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	1ffe8af8 	.word	0x1ffe8af8
 8002fcc:	1ffe8b48 	.word	0x1ffe8b48
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	491a      	ldr	r1, [pc, #104]	; (8003050 <SYSTIMER_StartTimer+0x7c>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	795b      	ldrb	r3, [r3, #5]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d126      	bne.n	8003046 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1e5a      	subs	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1e59      	subs	r1, r3, #1
 8003000:	4813      	ldr	r0, [pc, #76]	; (8003050 <SYSTIMER_StartTimer+0x7c>)
 8003002:	460b      	mov	r3, r1
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4403      	add	r3, r0
 800300c:	3318      	adds	r3, #24
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	1c59      	adds	r1, r3, #1
 8003012:	480f      	ldr	r0, [pc, #60]	; (8003050 <SYSTIMER_StartTimer+0x7c>)
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4403      	add	r3, r0
 800301e:	3318      	adds	r3, #24
 8003020:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1e5a      	subs	r2, r3, #1
 8003026:	490a      	ldr	r1, [pc, #40]	; (8003050 <SYSTIMER_StartTimer+0x7c>)
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3308      	adds	r3, #8
 8003034:	2201      	movs	r2, #1
 8003036:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fd25 	bl	8002a8c <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	1ffe8b48 	.word	0x1ffe8b48

08003054 <SYSTIMER_StopTimer>:

/*
 *  API to stop the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StopTimer(uint32_t id)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("SYSTIMER_StopTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StopTimer: Error during stop of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	1e5a      	subs	r2, r3, #1
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <SYSTIMER_StopTimer+0x6c>)
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3308      	adds	r3, #8
 8003072:	795b      	ldrb	r3, [r3, #5]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <SYSTIMER_StopTimer+0x2a>
  {
    status = SYSTIMER_STATUS_FAILURE;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e01b      	b.n	80030b6 <SYSTIMER_StopTimer+0x62>
  }
  else
  {
    /* Check whether Timer is in Stop state */
    if (SYSTIMER_STATE_RUNNING == g_timer_tbl[id - 1U].state)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	490f      	ldr	r1, [pc, #60]	; (80030c0 <SYSTIMER_StopTimer+0x6c>)
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3308      	adds	r3, #8
 8003090:	795b      	ldrb	r3, [r3, #5]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10f      	bne.n	80030b6 <SYSTIMER_StopTimer+0x62>
    {
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        g_timer_tbl[id - 1U].state = SYSTIMER_STATE_STOPPED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	1e5a      	subs	r2, r3, #1
 800309a:	4909      	ldr	r1, [pc, #36]	; (80030c0 <SYSTIMER_StopTimer+0x6c>)
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3308      	adds	r3, #8
 80030a8:	2202      	movs	r2, #2
 80030aa:	715a      	strb	r2, [r3, #5]

        /* remove Timer from node list */
        SYSTIMER_lRemoveTimerList(id - 1U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fdcd 	bl	8002c50 <SYSTIMER_lRemoveTimerList>

    }
  }

  return (status);
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	1ffe8b48 	.word	0x1ffe8b48

080030c4 <SYSTIMER_RestartTimer>:

/*
 *  API to reinitialize the time interval and to start the timer.
 */
SYSTIMER_STATUS_t SYSTIMER_RestartTimer(uint32_t id, uint32_t microsec)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t period_ratio = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_RestartTimer: Error during restart of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  XMC_ASSERT("SYSTIMER_RestartTimer: Can not restart timer due to invalid period value",
            (microsec >= SYSTIMER_TICK_PERIOD_US) && (microsec > 0U));


  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	1e5a      	subs	r2, r3, #1
 80030da:	491e      	ldr	r1, [pc, #120]	; (8003154 <SYSTIMER_RestartTimer+0x90>)
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3308      	adds	r3, #8
 80030e8:	795b      	ldrb	r3, [r3, #5]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <SYSTIMER_RestartTimer+0x30>
  {
      status = SYSTIMER_STATUS_FAILURE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	e029      	b.n	8003148 <SYSTIMER_RestartTimer+0x84>
  }
  else
  {
    /* check whether timer is in run state */
    if( SYSTIMER_STATE_STOPPED != g_timer_tbl[id - 1U].state)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	4916      	ldr	r1, [pc, #88]	; (8003154 <SYSTIMER_RestartTimer+0x90>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3308      	adds	r3, #8
 8003106:	795b      	ldrb	r3, [r3, #5]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d004      	beq.n	8003116 <SYSTIMER_RestartTimer+0x52>
    {
         /* Stop the timer */
         status = SYSTIMER_StopTimer(id);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ffa1 	bl	8003054 <SYSTIMER_StopTimer>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
    }
    if (SYSTIMER_STATUS_SUCCESS == status)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d115      	bne.n	8003148 <SYSTIMER_RestartTimer+0x84>
    {
      period_ratio = (uint32_t)(microsec / SYSTIMER_TICK_PERIOD_US);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <SYSTIMER_RestartTimer+0x94>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	60bb      	str	r3, [r7, #8]
      g_timer_tbl[id - 1U].reload = period_ratio;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <SYSTIMER_RestartTimer+0x90>)
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3318      	adds	r3, #24
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	605a      	str	r2, [r3, #4]
      /* Start the timer */
      status = SYSTIMER_StartTimer(id);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff48 	bl	8002fd4 <SYSTIMER_StartTimer>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	1ffe8b48 	.word	0x1ffe8b48
 8003158:	10624dd3 	.word	0x10624dd3

0800315c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	2201      	movs	r2, #1
 800316c:	409a      	lsls	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60da      	str	r2, [r3, #12]
}
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	60da      	str	r2, [r3, #12]
}
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80031a0:	887a      	ldrh	r2, [r7, #2]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80031bc:	887a      	ldrh	r2, [r7, #2]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	611a      	str	r2, [r3, #16]
}
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop

080031e8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	2101      	movs	r1, #1
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
}
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	60da      	str	r2, [r3, #12]
}
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	611a      	str	r2, [r3, #16]
}
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL));

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d14d      	bne.n	8003346 <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fc20 	bl	8003af4 <GLOBAL_CCU4_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d13f      	bne.n	800333e <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f7fd fe9b 	bl	8001004 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	f7ff ff5a 	bl	8003194 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	f7ff ff5f 	bl	80031b0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	f7ff ff65 	bl	80031cc <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f824 	bl	8003350 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6919      	ldr	r1, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4608      	mov	r0, r1
 8003318:	4611      	mov	r1, r2
 800331a:	461a      	mov	r2, r3
 800331c:	f7fd f84e 	bl	80003bc <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9ba 	bl	80036ac <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e003      	b.n	8003346 <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 8003346:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00f      	beq.n	8003382 <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	2100      	movs	r1, #0
 800336a:	f7ff ff3d 	bl	80031e8 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003378:	4610      	mov	r0, r2
 800337a:	2100      	movs	r1, #0
 800337c:	461a      	mov	r2, r3
 800337e:	f7fd ff3b 	bl	80011f8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00f      	beq.n	80033ac <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	2102      	movs	r1, #2
 8003394:	f7ff ff28 	bl	80031e8 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80033a2:	4610      	mov	r0, r2
 80033a4:	2102      	movs	r1, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	f7fd ff26 	bl	80011f8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop

080033b4 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <PWM_lCCU4_Start+0x1c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d111      	bne.n	80033f4 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	f7ff febd 	bl	800315c <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fec8 	bl	800317c <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2203      	movs	r2, #3
 80033f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop

080033fc <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)));

  status = PWM_STATUS_FAILURE;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003410:	2b02      	cmp	r3, #2
 8003412:	d02c      	beq.n	800346e <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f242 7210 	movw	r2, #10000	; 0x2710
 800341a:	4293      	cmp	r3, r2
 800341c:	d827      	bhi.n	800346e <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	3301      	adds	r3, #1
 8003424:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800342c:	3310      	adds	r3, #16
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <PWM_lCCU4_SetDutyCycle+0x7c>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7ff feab 	bl	80031b0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	f7ff feb1 	bl	80031cc <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 800346e:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	d1b71759 	.word	0xd1b71759

0800347c <PWM_lCCU8_Init>:

#ifdef PWM_SLICE_USED_CCU8

/*Initialize the APP and CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_Init(PWM_t *const handle_ptr)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800348e:	2b02      	cmp	r3, #2
 8003490:	d14e      	bne.n	8003530 <PWM_lCCU8_Init+0xb4>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handle);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fafe 	bl	8003a98 <GLOBAL_CCU8_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU8 slice */
    if (PWM_STATUS_SUCCESS == status)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d140      	bne.n	8003528 <PWM_lCCU8_Init+0xac>
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f7fd ff85 	bl	80013c0 <XMC_CCU8_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
    		                            (uint16_t)handle_ptr->period_value);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU8_Init:Initilizing Slice")
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fd ffb6 	bl	8001434 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr,
    		                            (uint16_t)handle_ptr->period_value);

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	2100      	movs	r1, #0
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7fd ffba 	bl	8001450 <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7ff feb0 	bl	800324c <XMC_CCU8_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU8_ConfigInterrupts(handle_ptr);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f825 	bl	800353c <PWM_lCCU8_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6919      	ldr	r1, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	f7fc ff59 	bl	80003bc <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <PWM_lCCU8_Init+0xa6>
      {
        PWM_Start(handle_ptr);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8c5 	bl	80036ac <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e003      	b.n	8003530 <PWM_lCCU8_Init+0xb4>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return(status);
 8003530:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU8_Init() api */
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop

0800353c <PWM_lCCU8_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU8_ConfigInterrupts(PWM_t *const handle_ptr)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00f      	beq.n	800356e <PWM_lCCU8_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:period match event enable")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	2100      	movs	r1, #0
 8003556:	f7ff fe87 	bl	8003268 <XMC_CCU8_SLICE_EnableEvent>

    /* Bind event to Service Request Node for period match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003564:	4610      	mov	r0, r2
 8003566:	2100      	movs	r1, #0
 8003568:	461a      	mov	r2, r3
 800356a:	f7fd ff89 	bl	8001480 <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00f      	beq.n	8003598 <PWM_lCCU8_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU8_ConfigInterrupts:compare match event enable ")

    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	2102      	movs	r1, #2
 8003580:	f7ff fe72 	bl	8003268 <XMC_CCU8_SLICE_EnableEvent>
    /* Bind event to Service Request Node for compare match event */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800358e:	4610      	mov	r0, r2
 8003590:	2102      	movs	r1, #2
 8003592:	461a      	mov	r2, r3
 8003594:	f7fd ff74 	bl	8001480 <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_slice_compare_match_node);
  }
}
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop

080035a0 <PWM_lCCU8_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU8 slice. */
void PWM_lCCU8_Start(PWM_t *const handle_ptr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_lCCU8_Start:Invalid handle_ptr" , (handle_ptr != NULL));

  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d004      	beq.n	80035bc <PWM_lCCU8_Start+0x1c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d111      	bne.n	80035e0 <PWM_lCCU8_Start+0x40>
  {
    /* Clears IDLE mode for the slice */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_kernel_ptr,handle_ptr->slice_number);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	f7ff fe23 	bl	8003214 <XMC_CCU8_EnableClock>
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fe2e 	bl	8003234 <XMC_CCU8_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2203      	movs	r2, #3
 80035dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU8_Start:start PWM")
  }
} /* end of PWM_lCCU8_Start() api */
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <PWM_lCCU8_SetDutyCycle>:
} /* end of PWM_lCCU8_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU8 slice. */
PWM_STATUS_t PWM_lCCU8_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));
  XMC_ASSERT("PWM_lCCU8_SetDutyCycle:Invalid duty_cycle",((duty_cycle >= 0) &&
                                                          (duty_cycle <= PWM_MAX_DUTY_CYCLE)));

  status = PWM_STATUS_FAILURE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
  if (handle_ptr->state != PWM_STATUS_UNINITIALIZED)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d02d      	beq.n	800365c <PWM_lCCU8_SetDutyCycle+0x74>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f242 7210 	movw	r2, #10000	; 0x2710
 8003606:	4293      	cmp	r3, r2
 8003608:	d828      	bhi.n	800365c <PWM_lCCU8_SetDutyCycle+0x74>
    {
      period = (uint32_t)handle_ptr->period_value + 1U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * ((uint32_t) PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8003618:	3310      	adds	r3, #16
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <PWM_lCCU8_SetDutyCycle+0x80>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	621a      	str	r2, [r3, #32]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	b29b      	uxth	r3, r3
 800363e:	4610      	mov	r0, r2
 8003640:	2100      	movs	r1, #0
 8003642:	461a      	mov	r2, r3
 8003644:	f7fd ff04 	bl	8001450 <XMC_CCU8_SLICE_SetTimerCompareMatch>
    		                             (uint16_t)compare);

      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_kernel_ptr, handle_ptr->shadow_mask);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	f7ff fdfa 	bl	800324c <XMC_CCU8_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8003658:	2300      	movs	r3, #0
 800365a:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU8_SetDutyCycle:dutycycle set")
  return (status);
 800365c:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU8_SetDutyCycle() api */
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	d1b71759 	.word	0xd1b71759

0800366c <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fe06 	bl	8003294 <PWM_lCCU4_Init>
 8003688:	4603      	mov	r3, r0
 800368a:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003692:	2b01      	cmp	r3, #1
 8003694:	d104      	bne.n	80036a0 <PWM_Init+0x34>
  {
    status = PWM_lCCU8_Init(handle_ptr);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fef0 	bl	800347c <PWM_lCCU8_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop

080036ac <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe78 	bl	80033b4 <PWM_lCCU4_Start>
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <PWM_Start+0x28>
  {
    PWM_lCCU8_Start(handle_ptr);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ff66 	bl	80035a0 <PWM_lCCU8_Start>
  }
#endif
}
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop

080036dc <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	f7ff fe80 	bl	80033fc <PWM_lCCU4_SetDutyCycle>
 80036fc:	4603      	mov	r3, r0
 80036fe:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef PWM_SLICE_USED_CCU8
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <PWM_SetDutyCycle+0x3a>
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	f7ff ff6b 	bl	80035e8 <PWM_lCCU8_SetDutyCycle>
 8003712:	4603      	mov	r3, r0
 8003714:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <__NVIC_GetPriorityGrouping+0x18>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800372c:	0a1b      	lsrs	r3, r3, #8
}
 800372e:	4618      	mov	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	2b00      	cmp	r3, #0
 800374c:	db0b      	blt.n	8003766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374e:	4908      	ldr	r1, [pc, #32]	; (8003770 <__NVIC_EnableIRQ+0x34>)
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	79fa      	ldrb	r2, [r7, #7]
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2001      	movs	r0, #1
 800375e:	fa00 f202 	lsl.w	r2, r0, r2
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000e100 	.word	0xe000e100

08003774 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0c      	blt.n	80037a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	4909      	ldr	r1, [pc, #36]	; (80037ac <__NVIC_ClearPendingIRQ+0x38>)
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	79fa      	ldrb	r2, [r7, #7]
 8003790:	f002 021f 	and.w	r2, r2, #31
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	3360      	adds	r3, #96	; 0x60
 800379c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	490d      	ldr	r1, [pc, #52]	; (80037fc <__NVIC_SetPriority+0x4c>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	0092      	lsls	r2, r2, #2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	4909      	ldr	r1, [pc, #36]	; (8003800 <__NVIC_SetPriority+0x50>)
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	3b04      	subs	r3, #4
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	0092      	lsls	r2, r2, #2
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
  }
}
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b06      	cmp	r3, #6
 8003820:	bf28      	it	cs
 8003822:	2306      	movcs	r3, #6
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3306      	adds	r3, #6
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b01      	subs	r3, #1
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2201      	movs	r2, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	1e5a      	subs	r2, r3, #1
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	401a      	ands	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	1e59      	subs	r1, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003858:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800385a:	4618      	mov	r0, r3
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3308      	adds	r3, #8
 800387e:	4608      	mov	r0, r1
 8003880:	4611      	mov	r1, r2
 8003882:	461a      	mov	r2, r3
 8003884:	f7fc fd9a 	bl	80003bc <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6819      	ldr	r1, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7fda      	ldrb	r2, [r3, #31]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3314      	adds	r3, #20
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	f7fd fe59 	bl	8001550 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	2201      	movs	r2, #1
 80038ae:	f7fd fe75 	bl	800159c <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7f1c      	ldrb	r4, [r3, #28]
 80038b6:	f7ff ff33 	bl	8003720 <__NVIC_GetPriorityGrouping>
 80038ba:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80038c0:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80038c6:	4608      	mov	r0, r1
 80038c8:	4611      	mov	r1, r2
 80038ca:	461a      	mov	r2, r3
 80038cc:	f7ff ff9a 	bl	8003804 <NVIC_EncodePriority>
 80038d0:	4602      	mov	r2, r0
 80038d2:	b263      	sxtb	r3, r4
 80038d4:	4618      	mov	r0, r3
 80038d6:	4611      	mov	r1, r2
 80038d8:	f7ff ff6a 	bl	80037b0 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7f1b      	ldrb	r3, [r3, #28]
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff41 	bl	8003774 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7f1b      	ldrb	r3, [r3, #28]
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff1f 	bl	800373c <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}

08003908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <__NVIC_GetPriorityGrouping+0x18>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003914:	0a1b      	lsrs	r3, r3, #8
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	2b00      	cmp	r3, #0
 8003934:	db0b      	blt.n	800394e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003936:	4908      	ldr	r1, [pc, #32]	; (8003958 <__NVIC_EnableIRQ+0x34>)
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	79fa      	ldrb	r2, [r7, #7]
 8003940:	f002 021f 	and.w	r2, r2, #31
 8003944:	2001      	movs	r0, #1
 8003946:	fa00 f202 	lsl.w	r2, r0, r2
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	490d      	ldr	r1, [pc, #52]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	4909      	ldr	r1, [pc, #36]	; (80039ac <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
  }
}
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	bf28      	it	cs
 80039ce:	2306      	movcs	r3, #6
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3306      	adds	r3, #6
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b01      	subs	r3, #1
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2201      	movs	r2, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	401a      	ands	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	1e59      	subs	r1, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003a04:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b25b      	sxtb	r3, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff7e 	bl	8003924 <__NVIC_EnableIRQ>
}
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop

08003a30 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	781c      	ldrb	r4, [r3, #0]
 8003a3c:	f7ff ff64 	bl	8003908 <__NVIC_GetPriorityGrouping>
 8003a40:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003a46:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	f7ff ffad 	bl	80039b0 <NVIC_EncodePriority>
 8003a56:	4602      	mov	r2, r0
 8003a58:	b263      	sxtb	r3, r4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	f7ff ff7d 	bl	800395c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ffd2 	bl	8003a14 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	bf00      	nop

08003a7c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8a:	60da      	str	r2, [r3, #12]
}
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7b5b      	ldrb	r3, [r3, #13]
 8003aa4:	f083 0301 	eor.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00f      	beq.n	8003ace <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7b1b      	ldrb	r3, [r3, #12]
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f7fd fc63 	bl	8001384 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ffda 	bl	8003a7c <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ae6:	60da      	str	r2, [r3, #12]
}
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7b5b      	ldrb	r3, [r3, #13]
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7b1b      	ldrb	r3, [r3, #12]
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	f7fd fa57 	bl	8000fc8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ffda 	bl	8003ad8 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	3310      	adds	r3, #16
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	408b      	lsls	r3, r1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7e1b      	ldrb	r3, [r3, #24]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d149      	bne.n	8003c04 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f7fe f8ac 	bl	8001cd8 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e02f      	b.n	8003be6 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fe f93f 	bl	8001e20 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	2103      	movs	r1, #3
 8003bb0:	f7fe f9c6 	bl	8001f40 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	7a1b      	ldrb	r3, [r3, #8]
 8003bbe:	f083 0301 	eor.w	r3, r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	f7ff ffb0 	bl	8003b34 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3301      	adds	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d9cc      	bls.n	8003b86 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7e5b      	ldrb	r3, [r3, #25]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe f8bb 	bl	8001d74 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	7e1b      	ldrb	r3, [r3, #24]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7c1a      	ldrb	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f7fc fbc7 	bl	80003bc <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7c1a      	ldrb	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7c5b      	ldrb	r3, [r3, #17]
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7fd fcca 	bl	80015d8 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop

08003c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003c82:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
}
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7ff ffd6 	bl	8003c50 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ca4:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <SystemCoreSetup+0x94>)
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <SystemCoreSetup+0x98>)
 8003caa:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cac:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003cb0:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <SystemCoreSetup+0x94>)
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <SystemCoreSetup+0x94>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <SystemCoreSetup+0x9c>)
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	3314      	adds	r3, #20
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f023 030f 	bic.w	r3, r3, #15
 8003cd4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <SystemCoreSetup+0x9c>)
 8003ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <SystemCoreSetup+0x94>)
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <SystemCoreSetup+0x94>)
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f023 0310 	bic.w	r3, r3, #16
 8003cf4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003cf6:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <SystemCoreSetup+0x94>)
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <SystemCoreSetup+0x94>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f023 0308 	bic.w	r3, r3, #8
 8003d00:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003d02:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <SystemCoreSetup+0x94>)
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <SystemCoreSetup+0x94>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <SystemCoreSetup+0x94>)
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <SystemCoreSetup+0x94>)
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d18:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003d1a:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <SystemCoreSetup+0x94>)
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <SystemCoreSetup+0x94>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d24:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	e000ed00 	.word	0xe000ed00
 8003d30:	08000000 	.word	0x08000000
 8003d34:	58001000 	.word	0x58001000

08003d38 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]

  return (status);
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8003d5c:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <OSCHP_GetFrequency+0x10>)
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	00b71b00 	.word	0x00b71b00

08003d6c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <SystemCoreClockSetup+0x54>)
 8003d74:	1d3c      	adds	r4, r7, #4
 8003d76:	461d      	mov	r5, r3
 8003d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8003d80:	1d3b      	adds	r3, r7, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fc14 	bl	80005b0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fc fd39 	bl	8000800 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7fc fcee 	bl	8000770 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003d94:	2004      	movs	r0, #4
 8003d96:	f7fc fdbf 	bl	8000918 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8003d9a:	f7fc fe49 	bl	8000a30 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	2120      	movs	r1, #32
 8003da2:	f7fc fe55 	bl	8000a50 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003da6:	2000      	movs	r0, #0
 8003da8:	f7fc fcf6 	bl	8000798 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7fc fddb 	bl	8000968 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8003db2:	2001      	movs	r0, #1
 8003db4:	f7fc fdc4 	bl	8000940 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	080078ac 	.word	0x080078ac

08003dc4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60da      	str	r2, [r3, #12]
}
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	60da      	str	r2, [r3, #12]
}
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	611a      	str	r2, [r3, #16]
}
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003e20:	887a      	ldrh	r2, [r7, #2]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8003e3c:	887a      	ldrh	r2, [r7, #2]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	611a      	str	r2, [r3, #16]
}
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop

08003e68 <CAPTURE_Init>:
  return version;
}

/* This function initializes a capture APP based on user configuration. */
CAPTURE_STATUS_t CAPTURE_Init(CAPTURE_t *const handler)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Init:handler NULL", (handler != NULL));

  status = CAPTURE_STATUS_SUCCESS;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handler->initialized)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d030      	beq.n	8003ee6 <CAPTURE_Init+0x7e>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <CAPTURE_Init+0x40>
    {
      status = (CAPTURE_STATUS_t) GLOBAL_CCU4_Init (handler->global_ccu4_handler);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fe2e 	bl	8003af4 <GLOBAL_CCU4_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	73fb      	strb	r3, [r7, #15]
      if (status == CAPTURE_STATUS_SUCCESS)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <CAPTURE_Init+0x40>
      {
        /* Configure CCU4 capture for the required time tick settings */
        CAPTURE_CCU4_lInit (handler);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8d4 	bl	8004050 <CAPTURE_CCU4_lInit>
      }
    }
#endif

#ifdef CAPTURE_GPIO_USED
    if (handler->input != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <CAPTURE_Init+0x62>
    {
      XMC_GPIO_Init (handler->input->port, handler->input->pin, handler->input_pin_config);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	791a      	ldrb	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f7fc fa79 	bl	80003bc <XMC_GPIO_Init>

    }
#endif

    /* update the initialization flag as true for particular instance. */
    handler->initialized = true;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Check whether the start of the timer is enabled during initialization or not */
    if (handler->start_control == true)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <CAPTURE_Init+0x7e>
    {
      status = CAPTURE_Start(handler);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f807 	bl	8003ef0 <CAPTURE_Start>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <CAPTURE_Start>:

/* This function starts the capture timer. */
CAPTURE_STATUS_t CAPTURE_Start(const CAPTURE_t *const handler)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Start:handler NULL", (handler != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01e      	beq.n	8003f40 <CAPTURE_Start+0x50>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d116      	bne.n	8003f3a <CAPTURE_Start+0x4a>
    {
      (void)handler->ccu4_slice_ptr->CV[0];
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      (void)handler->ccu4_slice_ptr->CV[1];
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      (void)handler->ccu4_slice_ptr->CV[2];
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
      (void)handler->ccu4_slice_ptr->CV[3];
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80

      /* Start the capture manually */
      XMC_CCU4_SLICE_ClearTimer (handler->ccu4_slice_ptr);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff66 	bl	8003dfc <XMC_CCU4_SLICE_ClearTimer>
      /* Start the capture manually */
      XMC_CCU4_SLICE_StartTimer (handler->ccu4_slice_ptr);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff55 	bl	8003de4 <XMC_CCU4_SLICE_StartTimer>
      XMC_CCU8_SLICE_ClearTimer (handler->ccu8_slice_ptr);
      /* Start the capture manually */
      XMC_CCU8_SLICE_StartTimer (handler->ccu8_slice_ptr);
    }
#endif
    status = CAPTURE_STATUS_SUCCESS;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
 8003f3e:	e001      	b.n	8003f44 <CAPTURE_Start+0x54>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <CAPTURE_GetCapturedTimeInNanoSec>:
  return (status);
}


CAPTURE_STATUS_t CAPTURE_GetCapturedTimeInNanoSec(const CAPTURE_t *const handler, uint32_t *const captured_time)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
  CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75bb      	strb	r3, [r7, #22]

  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:handler NULL", (handler != NULL));
  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:NULL data pointer", (captured_time != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d069      	beq.n	8004040 <CAPTURE_GetCapturedTimeInNanoSec+0xf0>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d166      	bne.n	8004044 <CAPTURE_GetCapturedTimeInNanoSec+0xf4>
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <CAPTURE_GetCapturedTimeInNanoSec+0x3a>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
  if (true == handler->initialized)
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d141      	bne.n	800400e <CAPTURE_GetCapturedTimeInNanoSec+0xbe>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
        uint32_t captured_time_low_reg = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
        uint32_t captured_time_high_reg = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]

        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	f107 0310 	add.w	r3, r7, #16
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 f97e 	bl	80042a0 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	75fb      	strb	r3, [r7, #23]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_LOW,
                                                                  &captured_time_low_reg);

        status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f000 f973 	bl	80042a0 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	75bb      	strb	r3, [r7, #22]
                                                                   XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                   &captured_time_high_reg);

        /*calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
 8003fbe:	f107 0310 	add.w	r3, r7, #16
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f000 f89a 	bl	8004100 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        captured_time_low_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_low_reg);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f000 f8f9 	bl	80041c8 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	613b      	str	r3, [r7, #16]

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
 8003fda:	f107 030c 	add.w	r3, r7, #12
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f000 f88c 	bl	8004100 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured_time_high_reg**/
        captured_time_high_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_high_reg);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4619      	mov	r1, r3
 8003fee:	f000 f8eb 	bl	80041c8 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	60fb      	str	r3, [r7, #12]

        /* add both high and lower register value*/
        *captured_time = captured_time_low_reg + captured_time_high_reg;
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	601a      	str	r2, [r3, #0]

        if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 8004000:	7dbb      	ldrb	r3, [r7, #22]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d102      	bne.n	800400c <CAPTURE_GetCapturedTimeInNanoSec+0xbc>
        {
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 8004006:	2302      	movs	r3, #2
 8004008:	75fb      	strb	r3, [r7, #23]
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
 800400a:	e018      	b.n	800403e <CAPTURE_GetCapturedTimeInNanoSec+0xee>
 800400c:	e017      	b.n	800403e <CAPTURE_GetCapturedTimeInNanoSec+0xee>
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
        }
      }
      else
      {
        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	4618      	mov	r0, r3
 8004014:	2101      	movs	r1, #1
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	f000 f942 	bl	80042a0 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                  captured_time);

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, true);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	f000 f86b 	bl	8004100 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        *captured_time = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, *captured_time);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4619      	mov	r1, r3
 8004032:	f000 f8c9 	bl	80041c8 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
 8004036:	4602      	mov	r2, r0
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e002      	b.n	8004044 <CAPTURE_GetCapturedTimeInNanoSec+0xf4>
 800403e:	e001      	b.n	8004044 <CAPTURE_GetCapturedTimeInNanoSec+0xf4>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
 8004040:	2301      	movs	r3, #1
 8004042:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop

08004050 <CAPTURE_CCU4_lInit>:
/*********************************************************************************************************************
* PRIVATE API IMPLEMENTATION
**********************************************************************************************************************/
#ifdef CAPTURE_CCU4_USED
static void CAPTURE_CCU4_lInit(const CAPTURE_t *const handler)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CaptureInit(handler->ccu4_slice_ptr, handler->ccu4_slice_config_ptr);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	f7fd f804 	bl	8001070 <XMC_CCU4_SLICE_CaptureInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  CAPTURE_CCU4_lShadowTransfer(handler);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f82b 	bl	80040c4 <CAPTURE_CCU4_lShadowTransfer>

  /************Configure External Events***************/
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0, handler->ccu4_event0_ptr);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4610      	mov	r0, r2
 8004078:	2101      	movs	r1, #1
 800407a:	461a      	mov	r2, r3
 800407c:	f7fd f852 	bl	8001124 <XMC_CCU4_SLICE_ConfigureEvent>
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1, handler->ccu4_event1_ptr);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	4610      	mov	r0, r2
 800408a:	2102      	movs	r1, #2
 800408c:	461a      	mov	r2, r3
 800408e:	f7fd f849 	bl	8001124 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_Capture0Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4618      	mov	r0, r3
 8004098:	2101      	movs	r1, #1
 800409a:	f7fd f80f 	bl	80010bc <XMC_CCU4_SLICE_Capture0Config>
  XMC_CCU4_SLICE_Capture1Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	4618      	mov	r0, r3
 80040a4:	2102      	movs	r1, #2
 80040a6:	f7fd f823 	bl	80010f0 <XMC_CCU4_SLICE_Capture1Config>
    XMC_CCU4_SLICE_EnableEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
  }
  #endif

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handler->global_ccu4_handler->module_ptr, handler->ccu_slice_number);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	f7ff fe83 	bl	8003dc4 <XMC_CCU4_EnableClock>
}
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <CAPTURE_CCU4_lShadowTransfer>:

static void CAPTURE_CCU4_lShadowTransfer(const CAPTURE_t *const handler)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handler->ccu4_slice_ptr, CAPTURE_PERIOD_16BIT_MAX);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040d6:	f7ff fe9d 	bl	8003e14 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handler->ccu4_slice_ptr, 0x0U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	4618      	mov	r0, r3
 80040e0:	2100      	movs	r1, #0
 80040e2:	f7ff fea5 	bl	8003e30 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handler->global_ccu4_handler->module_ptr, handler->shadow_mask);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	f7ff feaa 	bl	8003e4c <XMC_CCU4_EnableShadowTransfer>
}
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop

08004100 <CAPTURE_lCalculateTimeTickFromTimerValue>:
#endif

static void CAPTURE_lCalculateTimeTickFromTimerValue(const CAPTURE_t *const handler,
                                                     uint32_t *const timer_val_ptr,
                                                     bool is_increment)
{
 8004100:	b480      	push	{r7}
 8004102:	b08d      	sub	sp, #52	; 0x34
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
  /* Check for APP instance is initialized or not */
  uint32_t psc_psiv_val = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool is_float_prescaler = false;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t cxv_captv_val = (uint32_t)((uint32_t)*timer_val_ptr & 0xFFFFU);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cxv_fpcv_val = (uint32_t)((uint32_t)*timer_val_ptr >> 16U) & 0xFU;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	61bb      	str	r3, [r7, #24]

  /* Period measured should be added 1 to get actual value*/
  if (is_increment == true)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <CAPTURE_lCalculateTimeTickFromTimerValue+0x38>
  {
    cxv_captv_val = cxv_captv_val + 1U;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	3301      	adds	r3, #1
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
  }
#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800413e:	2b00      	cmp	r3, #0
 8004140:	d111      	bne.n	8004166 <CAPTURE_lCalculateTimeTickFromTimerValue+0x66>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	791b      	ldrb	r3, [r3, #4]
 8004148:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800414c:	b2db      	uxtb	r3, r3
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (handler->ccu4_slice_config_ptr->prescaler_mode == (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	789b      	ldrb	r3, [r3, #2]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <CAPTURE_lCalculateTimeTickFromTimerValue+0x66>
    {
      is_float_prescaler =  true;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      is_float_prescaler =  true;
    }
  }
#endif

  if (is_float_prescaler == true)
 8004166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800416a:	2b00      	cmp	r3, #0
 800416c:	d023      	beq.n	80041b6 <CAPTURE_lCalculateTimeTickFromTimerValue+0xb6>
  {
    int32_t loop = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	623b      	str	r3, [r7, #32]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]

    prescaler_value = cxv_fpcv_val - psc_psiv_val;
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	e00a      	b.n	800419a <CAPTURE_lCalculateTimeTickFromTimerValue+0x9a>
    {
      timer_val = (uint32_t)timer_val << 1U;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
      timer_val += 65535U;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004190:	33ff      	adds	r3, #255	; 0xff
 8004192:	61fb      	str	r3, [r7, #28]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;

    prescaler_value = cxv_fpcv_val - psc_psiv_val;

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	3b01      	subs	r3, #1
 8004198:	623b      	str	r3, [r7, #32]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2b00      	cmp	r3, #0
 800419e:	dcf1      	bgt.n	8004184 <CAPTURE_lCalculateTimeTickFromTimerValue+0x84>
    {
      timer_val = (uint32_t)timer_val << 1U;
      timer_val += 65535U;
    }

    timer_val += (uint32_t)(cxv_captv_val * (1UL << prescaler_value));
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	61fb      	str	r3, [r7, #28]
    *timer_val_ptr = timer_val;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e002      	b.n	80041bc <CAPTURE_lCalculateTimeTickFromTimerValue+0xbc>
  }
  else
  {
    *timer_val_ptr = cxv_captv_val;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ba:	601a      	str	r2, [r3, #0]
  }
}
 80041bc:	3734      	adds	r7, #52	; 0x34
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>:

static uint32_t CAPTURE_lCalculateTimeInNanoSecFromTimerTick(const CAPTURE_t *const handler, uint32_t timer_val)
{
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint64_t singal_period_long_long;
  uint32_t inv_sig_resolution_in_sec = 1U;
 80041d2:	2301      	movs	r3, #1
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t norm_timer_val;
  uint32_t norm_inv_sig_resolution_in_sec;
  uint32_t min_norm;
  uint32_t psc_psiv_val = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10d      	bne.n	8004200 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x38>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	791b      	ldrb	r3, [r3, #4]
 80041ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
    inv_sig_resolution_in_sec = handler->global_ccu4_handler->module_frequency >> psc_psiv_val;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x46>
  {
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e003      	b.n	8004216 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x4e>
  }
  return __builtin_clz(value);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
    psc_psiv_val = handler->ccu8_slice_config_ptr->prescaler_initval;
    inv_sig_resolution_in_sec = handler->global_ccu8_handler->module_frequency >> psc_psiv_val;
  }
#endif

  norm_timer_val = (uint32_t)__CLZ(timer_val);
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	60bb      	str	r3, [r7, #8]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x5e>
  {
    return 32U;
 8004222:	2320      	movs	r3, #32
 8004224:	e003      	b.n	800422e <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x66>
  }
  return __builtin_clz(value);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	b2db      	uxtb	r3, r3
  norm_inv_sig_resolution_in_sec = (uint32_t)__CLZ(inv_sig_resolution_in_sec);
 800422e:	61fb      	str	r3, [r7, #28]

  if (norm_timer_val > norm_inv_sig_resolution_in_sec)
 8004230:	6a3a      	ldr	r2, [r7, #32]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	429a      	cmp	r2, r3
 8004236:	d902      	bls.n	800423e <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x76>
  {
    min_norm = norm_inv_sig_resolution_in_sec;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
 800423c:	e001      	b.n	8004242 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x7a>
  }
  else
  {
    min_norm = norm_timer_val;
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Normalized the value to get better precision*/
  timer_val = timer_val << min_norm;
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	603b      	str	r3, [r7, #0]
  inv_sig_resolution_in_sec = inv_sig_resolution_in_sec << min_norm;
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c

  singal_period_long_long = (((uint64_t) timer_val) * 1000000000U) / inv_sig_resolution_in_sec;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	490f      	ldr	r1, [pc, #60]	; (800429c <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0xd4>)
 8004260:	fb01 f003 	mul.w	r0, r1, r3
 8004264:	2100      	movs	r1, #0
 8004266:	fb01 f102 	mul.w	r1, r1, r2
 800426a:	4401      	add	r1, r0
 800426c:	480b      	ldr	r0, [pc, #44]	; (800429c <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0xd4>)
 800426e:	fba2 2300 	umull	r2, r3, r2, r0
 8004272:	4419      	add	r1, r3
 8004274:	460b      	mov	r3, r1
 8004276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004278:	460c      	mov	r4, r1
 800427a:	f04f 0500 	mov.w	r5, #0
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	f001 f98b 	bl	80055a0 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  return ((uint32_t)singal_period_long_long);
 8004292:	693b      	ldr	r3, [r7, #16]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3730      	adds	r7, #48	; 0x30
 8004298:	46bd      	mov	sp, r7
 800429a:	bdb0      	pop	{r4, r5, r7, pc}
 800429c:	3b9aca00 	.word	0x3b9aca00

080042a0 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>:
#ifdef  CAPTURE_CCU4_USED
/* @brief Retrieves the latest captured timer value from CCU4*/
static CAPTURE_STATUS_t CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(const XMC_CCU4_SLICE_t * const slice,
                                                                         const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                                         uint32_t * const val_ptr)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	460b      	mov	r3, r1
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	72fb      	strb	r3, [r7, #11]
              ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) || (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));

  XMC_ASSERT ("CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:Invalid Extended Capture Mode ",
              ((slice->TC) & CCU4_CC4_TC_ECM_Msk) == 0);

  retval = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]

  if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d11c      	bne.n	80042f2 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x52>
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_3];
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x34>
    {
      retval = CAPTURE_STATUS_SUCCESS;
 80042ce:	2300      	movs	r3, #0
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e028      	b.n	8004326 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x86>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_2];
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d8:	61bb      	str	r3, [r7, #24]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x50>
      {
        retval = CAPTURE_STATUS_SUCCESS;
 80042e4:	2300      	movs	r3, #0
 80042e6:	77fb      	strb	r3, [r7, #31]
        *val_ptr = capture_reg_value_low;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e01a      	b.n	8004326 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x86>
 80042f0:	e019      	b.n	8004326 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x86>
    }
  }
  else
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_1];
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x6c>
    {
      retval = CAPTURE_STATUS_SUCCESS;
 8004306:	2300      	movs	r3, #0
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e00c      	b.n	8004326 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x86>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_0];
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	617b      	str	r3, [r7, #20]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x86>
      {
        retval = CAPTURE_STATUS_SUCCESS;
 800431c:	2300      	movs	r3, #0
 800431e:	77fb      	strb	r3, [r7, #31]
        *val_ptr = capture_reg_value_low;
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return retval;
 8004326:	7ffb      	ldrb	r3, [r7, #31]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3724      	adds	r7, #36	; 0x24
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <__NVIC_GetPriorityGrouping+0x18>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004340:	0a1b      	lsrs	r3, r3, #8
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db0b      	blt.n	800437a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	4908      	ldr	r1, [pc, #32]	; (8004384 <__NVIC_EnableIRQ+0x34>)
 8004364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	79fa      	ldrb	r2, [r7, #7]
 800436c:	f002 021f 	and.w	r2, r2, #31
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000e100 	.word	0xe000e100

08004388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db0a      	blt.n	80043b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439c:	490d      	ldr	r1, [pc, #52]	; (80043d4 <__NVIC_SetPriority+0x4c>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	440b      	add	r3, r1
 80043ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80043b0:	e00a      	b.n	80043c8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	4909      	ldr	r1, [pc, #36]	; (80043d8 <__NVIC_SetPriority+0x50>)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	3b04      	subs	r3, #4
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	0092      	lsls	r2, r2, #2
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	440b      	add	r3, r1
 80043c6:	761a      	strb	r2, [r3, #24]
  }
}
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	e000e100 	.word	0xe000e100
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	bf28      	it	cs
 80043fa:	2306      	movcs	r3, #6
 80043fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3306      	adds	r3, #6
 8004402:	2b06      	cmp	r3, #6
 8004404:	d902      	bls.n	800440c <NVIC_EncodePriority+0x30>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3b01      	subs	r3, #1
 800440a:	e000      	b.n	800440e <NVIC_EncodePriority+0x32>
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2201      	movs	r2, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	401a      	ands	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	1e59      	subs	r1, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004430:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	; 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop

08004440 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800444e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop

08004464 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	3260      	adds	r2, #96	; 0x60
 8004476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2101      	movs	r1, #1
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	ea42 0103 	orr.w	r1, r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	3260      	adds	r2, #96	; 0x60
 800448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop

0800449c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	32a0      	adds	r2, #160	; 0xa0
 80044b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	32c0      	adds	r2, #192	; 0xc0
 80044d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d4:	b29b      	uxth	r3, r3
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop

080044e4 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7e1b      	ldrb	r3, [r3, #24]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	f040 8099 	bne.w	8004628 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fb30 	bl	8003b60 <GLOBAL_ADC_Init>
 8004500:	4603      	mov	r3, r0
 8004502:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4610      	mov	r0, r2
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	2300      	movs	r3, #0
 8004516:	f7fd fc09 	bl	8001d2c <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f7fd fd26 	bl	8001f78 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e02e      	b.n	8004590 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	7b5b      	ldrb	r3, [r3, #13]
 8004546:	4619      	mov	r1, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4610      	mov	r0, r2
 800454e:	461a      	mov	r2, r3
 8004550:	f7fd fd90 	bl	8002074 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	789b      	ldrb	r3, [r3, #2]
 800455e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004562:	b2db      	uxtb	r3, r3
 8004564:	4619      	mov	r1, r3
                                indexed->res_handle);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800456a:	4610      	mov	r0, r2
 800456c:	461a      	mov	r2, r3
 800456e:	f7ff ff95 	bl	800449c <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800457c:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8004582:	4610      	mov	r0, r2
 8004584:	461a      	mov	r2, r3
 8004586:	f7ff ff6d 	bl	8004464 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	3301      	adds	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0cd      	beq.n	8004532 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	7a1b      	ldrb	r3, [r3, #8]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02c      	beq.n	8004600 <ADC_MEASUREMENT_Init+0x11c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d028      	beq.n	8004600 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b2dc      	uxtb	r4, r3
 80045b6:	f7ff febd 	bl	8004334 <__NVIC_GetPriorityGrouping>
 80045ba:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80045c0:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	f7ff ff05 	bl	80043dc <NVIC_EncodePriority>
 80045d2:	4602      	mov	r2, r0
 80045d4:	b263      	sxtb	r3, r4
 80045d6:	4618      	mov	r0, r3
 80045d8:	4611      	mov	r1, r2
 80045da:	f7ff fed5 	bl	8004388 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7e5b      	ldrb	r3, [r3, #25]
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	f7fd fbf4 	bl	8001dd8 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	b25b      	sxtb	r3, r3
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fea8 	bl	8004350 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <ADC_MEASUREMENT_Init+0x12a>
    {
      (handle_ptr->mux_config)();
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	7e9b      	ldrb	r3, [r3, #26]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff0f 	bl	8004440 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7bba      	ldrb	r2, [r7, #14]
 8004626:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7e1b      	ldrb	r3, [r3, #24]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	bd90      	pop	{r4, r7, pc}

08004634 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	789b      	ldrb	r3, [r3, #2]
 8004646:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f7ff ff36 	bl	80044c0 <XMC_VADC_GROUP_GetResult>
 8004654:	4603      	mov	r3, r0
 8004656:	81fb      	strh	r3, [r7, #14]

  return (result);
 8004658:	89fb      	ldrh	r3, [r7, #14]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop

08004664 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800466a:	2300      	movs	r3, #0
 800466c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800466e:	483d      	ldr	r0, [pc, #244]	; (8004764 <DAVE_Init+0x100>)
 8004670:	f7ff fb62 	bl	8003d38 <CLOCK_XMC4_Init>
 8004674:	4603      	mov	r3, r0
 8004676:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance UART_PROTOKOLL */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_PROTOKOLL); 
 800467e:	483a      	ldr	r0, [pc, #232]	; (8004768 <DAVE_Init+0x104>)
 8004680:	f7fd fe3a 	bl	80022f8 <UART_Init>
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_TEST */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_TEST); 
 800468e:	4837      	ldr	r0, [pc, #220]	; (800476c <DAVE_Init+0x108>)
 8004690:	f7ff fabe 	bl	8003c10 <DIGITAL_IO_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <DAVE_Init+0x44>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance LICHTSCHRANKE_INPUT_PIN */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&LICHTSCHRANKE_INPUT_PIN); 
 800469e:	4834      	ldr	r0, [pc, #208]	; (8004770 <DAVE_Init+0x10c>)
 80046a0:	f7ff f8e2 	bl	8003868 <PIN_INTERRUPT_Init>
 80046a4:	4603      	mov	r3, r0
 80046a6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <DAVE_Init+0x54>
  {
	 /**  Initialization of TIMER APP instance TIMER_GESCHWINDIGKEIT_BERECHNUNG */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_GESCHWINDIGKEIT_BERECHNUNG); 
 80046ae:	4831      	ldr	r0, [pc, #196]	; (8004774 <DAVE_Init+0x110>)
 80046b0:	f7fe f8d8 	bl	8002864 <TIMER_Init>
 80046b4:	4603      	mov	r3, r0
 80046b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <DAVE_Init+0x64>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_GESCHWINDIGKEIT */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_GESCHWINDIGKEIT); 
 80046be:	482e      	ldr	r0, [pc, #184]	; (8004778 <DAVE_Init+0x114>)
 80046c0:	f7ff f9b6 	bl	8003a30 <INTERRUPT_Init>
 80046c4:	4603      	mov	r3, r0
 80046c6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_LENKUNG */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_LENKUNG); 
 80046ce:	482b      	ldr	r0, [pc, #172]	; (800477c <DAVE_Init+0x118>)
 80046d0:	f7fe ffcc 	bl	800366c <PWM_Init>
 80046d4:	4603      	mov	r3, r0
 80046d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM APP instance PWM_MOTOR */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MOTOR); 
 80046de:	4828      	ldr	r0, [pc, #160]	; (8004780 <DAVE_Init+0x11c>)
 80046e0:	f7fe ffc4 	bl	800366c <PWM_Init>
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <DAVE_Init+0x94>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_WD */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_WD); 
 80046ee:	4825      	ldr	r0, [pc, #148]	; (8004784 <DAVE_Init+0x120>)
 80046f0:	f7fe fb98 	bl	8002e24 <SYSTIMER_Init>
 80046f4:	4603      	mov	r3, r0
 80046f6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <DAVE_Init+0xa4>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_ULTRA */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_ULTRA); 
 80046fe:	4822      	ldr	r0, [pc, #136]	; (8004788 <DAVE_Init+0x124>)
 8004700:	f7ff fbb2 	bl	8003e68 <CAPTURE_Init>
 8004704:	4603      	mov	r3, r0
 8004706:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <DAVE_Init+0xb4>
  {
	 /**  Initialization of PWM APP instance PWM_ULTRA */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_ULTRA); 
 800470e:	481f      	ldr	r0, [pc, #124]	; (800478c <DAVE_Init+0x128>)
 8004710:	f7fe ffac 	bl	800366c <PWM_Init>
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <DAVE_Init+0xc4>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_IR */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_IR); 
 800471e:	481c      	ldr	r0, [pc, #112]	; (8004790 <DAVE_Init+0x12c>)
 8004720:	f7ff fee0 	bl	80044e4 <ADC_MEASUREMENT_Init>
 8004724:	4603      	mov	r3, r0
 8004726:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <DAVE_Init+0xd4>
  {
	 /**  Initialization of PWM APP instance PWM_BUZZER */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_BUZZER); 
 800472e:	4819      	ldr	r0, [pc, #100]	; (8004794 <DAVE_Init+0x130>)
 8004730:	f7fe ff9c 	bl	800366c <PWM_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance BUTTON_TEST */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BUTTON_TEST); 
 800473e:	4816      	ldr	r0, [pc, #88]	; (8004798 <DAVE_Init+0x134>)
 8004740:	f7ff fa66 	bl	8003c10 <DIGITAL_IO_Init>
 8004744:	4603      	mov	r3, r0
 8004746:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <DAVE_Init+0xf4>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 800474e:	4813      	ldr	r0, [pc, #76]	; (800479c <DAVE_Init+0x138>)
 8004750:	f7fe f888 	bl	8002864 <TIMER_Init>
 8004754:	4603      	mov	r3, r0
 8004756:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8004758:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	1ffe8b04 	.word	0x1ffe8b04
 8004768:	1ffe8800 	.word	0x1ffe8800
 800476c:	08007884 	.word	0x08007884
 8004770:	080077f4 	.word	0x080077f4
 8004774:	1ffe8814 	.word	0x1ffe8814
 8004778:	08007818 	.word	0x08007818
 800477c:	1ffe8864 	.word	0x1ffe8864
 8004780:	1ffe8898 	.word	0x1ffe8898
 8004784:	1ffe8b00 	.word	0x1ffe8b00
 8004788:	1ffe89b0 	.word	0x1ffe89b0
 800478c:	1ffe88cc 	.word	0x1ffe88cc
 8004790:	1ffe8a08 	.word	0x1ffe8a08
 8004794:	1ffe8900 	.word	0x1ffe8900
 8004798:	08007898 	.word	0x08007898
 800479c:	1ffe883c 	.word	0x1ffe883c

080047a0 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80047b2:	409a      	lsls	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	605a      	str	r2, [r3, #4]
}
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop

080047c4 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7c1b      	ldrb	r3, [r3, #16]
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f7ff ffe2 	bl	80047a0 <XMC_GPIO_ToggleOutput>
}
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop

080047e4 <IR_ADC_Wert_1ms>:
float parkluecke = 0;

XMC_VADC_RESULT_SIZE_t IR_ADC_Wert;

void IR_ADC_Wert_1ms (void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
	IR_ADC_Wert = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 80047e8:	4830      	ldr	r0, [pc, #192]	; (80048ac <IR_ADC_Wert_1ms+0xc8>)
 80047ea:	f7ff ff23 	bl	8004634 <ADC_MEASUREMENT_GetResult>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <IR_ADC_Wert_1ms+0xcc>)
 80047f4:	801a      	strh	r2, [r3, #0]


	if (previous_ADC >= 1000 && IR_ADC_Wert <= 1000)
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <IR_ADC_Wert_1ms+0xd0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047fe:	d310      	bcc.n	8004822 <IR_ADC_Wert_1ms+0x3e>
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <IR_ADC_Wert_1ms+0xcc>)
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004808:	d80b      	bhi.n	8004822 <IR_ADC_Wert_1ms+0x3e>
		  {
			  check_start++;
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <IR_ADC_Wert_1ms+0xd4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <IR_ADC_Wert_1ms+0xd4>)
 8004812:	6013      	str	r3, [r2, #0]
			  DIGITAL_IO_ToggleOutput(&LED_TEST);
 8004814:	4829      	ldr	r0, [pc, #164]	; (80048bc <IR_ADC_Wert_1ms+0xd8>)
 8004816:	f7ff ffd5 	bl	80047c4 <DIGITAL_IO_ToggleOutput>
			  parkluecke = strecke_cm;
 800481a:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <IR_ADC_Wert_1ms+0xdc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <IR_ADC_Wert_1ms+0xe0>)
 8004820:	6013      	str	r3, [r2, #0]
		  }
		  if (previous_ADC <= 1000 && IR_ADC_Wert >= 1000 && check_start == 1)
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <IR_ADC_Wert_1ms+0xd0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800482a:	d839      	bhi.n	80048a0 <IR_ADC_Wert_1ms+0xbc>
 800482c:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <IR_ADC_Wert_1ms+0xcc>)
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004834:	d334      	bcc.n	80048a0 <IR_ADC_Wert_1ms+0xbc>
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <IR_ADC_Wert_1ms+0xd4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d130      	bne.n	80048a0 <IR_ADC_Wert_1ms+0xbc>
		  {
			  check_start = 0;
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <IR_ADC_Wert_1ms+0xd4>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]



			  if (turn % 2 == 0)
 8004844:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <IR_ADC_Wert_1ms+0xe4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11b      	bne.n	8004888 <IR_ADC_Wert_1ms+0xa4>
			  {

				  parkluecke = strecke_cm - parkluecke;
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <IR_ADC_Wert_1ms+0xdc>)
 8004852:	ed93 7a00 	vldr	s14, [r3]
 8004856:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <IR_ADC_Wert_1ms+0xe0>)
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004860:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <IR_ADC_Wert_1ms+0xe0>)
 8004862:	edc3 7a00 	vstr	s15, [r3]
				  if(parkluecke >= min_parkluecke_laenge_cm){
 8004866:	4b19      	ldr	r3, [pc, #100]	; (80048cc <IR_ADC_Wert_1ms+0xe8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <IR_ADC_Wert_1ms+0xe0>)
 8004874:	edd3 7a00 	vldr	s15, [r3]
 8004878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004880:	d802      	bhi.n	8004888 <IR_ADC_Wert_1ms+0xa4>
					  park_luecke_genug = 1;
 8004882:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <IR_ADC_Wert_1ms+0xec>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
//				  UART_Transmit(&UART_PROTOKOLL, Luecke, sizeof(Luecke));


			  }

			  turn++;
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <IR_ADC_Wert_1ms+0xe4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <IR_ADC_Wert_1ms+0xe4>)
 8004890:	6013      	str	r3, [r2, #0]

			  if (turn >= 10) {
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <IR_ADC_Wert_1ms+0xe4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b09      	cmp	r3, #9
 8004898:	dd02      	ble.n	80048a0 <IR_ADC_Wert_1ms+0xbc>
		       turn = 0;
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <IR_ADC_Wert_1ms+0xe4>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]



		   }

		  previous_ADC=IR_ADC_Wert;
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <IR_ADC_Wert_1ms+0xcc>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <IR_ADC_Wert_1ms+0xd0>)
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	1ffe89f4 	.word	0x1ffe89f4
 80048b0:	1ffe8d3c 	.word	0x1ffe8d3c
 80048b4:	1ffe8b0c 	.word	0x1ffe8b0c
 80048b8:	1ffe8b10 	.word	0x1ffe8b10
 80048bc:	08007884 	.word	0x08007884
 80048c0:	1ffe8b34 	.word	0x1ffe8b34
 80048c4:	1ffe8b1c 	.word	0x1ffe8b1c
 80048c8:	1ffe8b14 	.word	0x1ffe8b14
 80048cc:	1ffe8a24 	.word	0x1ffe8a24
 80048d0:	1ffe8b18 	.word	0x1ffe8b18

080048d4 <Infrarot_Init>:

void Infrarot_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
	Timer_IR = SYSTIMER_CreateTimer(PERIODIC_READ,SYSTIMER_MODE_PERIODIC,(void*)IR_ADC_Wert_1ms,NULL);
 80048d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80048dc:	2101      	movs	r1, #1
 80048de:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <Infrarot_Init+0x24>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	f7fe fad9 	bl	8002e98 <SYSTIMER_CreateTimer>
 80048e6:	4602      	mov	r2, r0
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <Infrarot_Init+0x28>)
 80048ea:	601a      	str	r2, [r3, #0]
	SYSTIMER_StartTimer(Timer_IR);
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <Infrarot_Init+0x28>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe fb6f 	bl	8002fd4 <SYSTIMER_StartTimer>
}
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	080047e5 	.word	0x080047e5
 80048fc:	1ffe8c6c 	.word	0x1ffe8c6c

08004900 <watch_dog>:
uint8_t fahr_infos[1] = {0};						//Fahrinfos für den Raspi




void watch_dog(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
	//Falls nach 1s kein Inputbefehl gibt, wird alles in Leerlauf gesetzt
	PWM_SetDutyCycle(&PWM_LENKUNG, pwm_lenkung_leerlauf);
 8004904:	4b07      	ldr	r3, [pc, #28]	; (8004924 <watch_dog+0x24>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4807      	ldr	r0, [pc, #28]	; (8004928 <watch_dog+0x28>)
 800490a:	4619      	mov	r1, r3
 800490c:	f7fe fee6 	bl	80036dc <PWM_SetDutyCycle>
	soll_fahr_geschwindigkeit = 0;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <watch_dog+0x2c>)
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
	SYSTIMER_StopTimer(Timer_WD);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <watch_dog+0x30>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fb99 	bl	8003054 <SYSTIMER_StopTimer>
}
 8004922:	bd80      	pop	{r7, pc}
 8004924:	1ffe8a28 	.word	0x1ffe8a28
 8004928:	1ffe8864 	.word	0x1ffe8864
 800492c:	1ffe8b30 	.word	0x1ffe8b30
 8004930:	1ffe8d44 	.word	0x1ffe8d44
 8004934:	00000000 	.word	0x00000000

08004938 <regelung>:

int regelung(){
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
	//DIGITAL_IO_ToggleOutput(&LED_TEST);
	abweichung = soll_fahr_geschwindigkeit - speed_in_cms;		// e
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <regelung+0x90>)
 800493e:	ed93 7a00 	vldr	s14, [r3]
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <regelung+0x94>)
 8004944:	edd3 7a00 	vldr	s15, [r3]
 8004948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494c:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <regelung+0x98>)
 800494e:	edc3 7a00 	vstr	s15, [r3]
	speed_nach_regler = abweichung * 0.5;  						// e * Kp (geregelte Geschwindigkeit)
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <regelung+0x98>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 800495c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <regelung+0x9c>)
 8004962:	edc3 7a00 	vstr	s15, [r3]
	pwm = (speed_nach_regler*0.24)+895.4;						// pwm wird neu gesetzt
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <regelung+0x9c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fb3a 	bl	8004fe4 <__aeabi_f2d>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	a30f      	add	r3, pc, #60	; (adr r3, 80049b8 <regelung+0x80>)
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f000 fb85 	bl	800508c <__aeabi_dmul>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	a30d      	add	r3, pc, #52	; (adr r3, 80049c0 <regelung+0x88>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f000 f9ca 	bl	8004d28 <__adddf3>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	f000 fd88 	bl	80054b0 <__aeabi_d2iz>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <regelung+0xa0>)
 80049a4:	601a      	str	r2, [r3, #0]
	PWM_SetDutyCycle(&PWM_MOTOR, pwm);
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <regelung+0xa0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	480c      	ldr	r0, [pc, #48]	; (80049dc <regelung+0xa4>)
 80049ac:	4619      	mov	r1, r3
 80049ae:	f7fe fe95 	bl	80036dc <PWM_SetDutyCycle>
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	eb851eb8 	.word	0xeb851eb8
 80049bc:	3fceb851 	.word	0x3fceb851
 80049c0:	33333333 	.word	0x33333333
 80049c4:	408bfb33 	.word	0x408bfb33
 80049c8:	1ffe8b30 	.word	0x1ffe8b30
 80049cc:	1ffe8b24 	.word	0x1ffe8b24
 80049d0:	1ffe8b38 	.word	0x1ffe8b38
 80049d4:	1ffe8b3c 	.word	0x1ffe8b3c
 80049d8:	1ffe8d4c 	.word	0x1ffe8d4c
 80049dc:	1ffe8898 	.word	0x1ffe8898

080049e0 <set_speed>:

void set_speed(int speed_char){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	//die Umrechung von speed_char in cm/s
	if(speed_char<155){
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b9a      	cmp	r3, #154	; 0x9a
 80049ec:	dc04      	bgt.n	80049f8 <set_speed+0x18>
		soll_fahr_geschwindigkeit = 0;							//Schwellwert
 80049ee:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <set_speed+0x68>)
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e01d      	b.n	8004a34 <set_speed+0x54>
	}else{
		soll_fahr_geschwindigkeit = (6.92*speed_char)-982;		//Rechnung fuer die Soll Geschwindigkeit
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fae1 	bl	8004fc0 <__aeabi_i2d>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	a30e      	add	r3, pc, #56	; (adr r3, 8004a40 <set_speed+0x60>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f000 fb3e 	bl	800508c <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <set_speed+0x6c>)
 8004a1e:	f000 f981 	bl	8004d24 <__aeabi_dsub>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f000 fd69 	bl	8005500 <__aeabi_d2f>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <set_speed+0x68>)
 8004a32:	601a      	str	r2, [r3, #0]
	}

}
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	f3af 8000 	nop.w
 8004a40:	7ae147ae 	.word	0x7ae147ae
 8004a44:	401bae14 	.word	0x401bae14
 8004a48:	1ffe8b30 	.word	0x1ffe8b30
 8004a4c:	408eb000 	.word	0x408eb000

08004a50 <pwm_set_lenkung>:

void pwm_set_lenkung(int winkel){
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

	int pwm = (winkel*1.3)+700;									//Pwm der Lenkung gesetzt
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fab1 	bl	8004fc0 <__aeabi_i2d>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	a312      	add	r3, pc, #72	; (adr r3, 8004ab0 <pwm_set_lenkung+0x60>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f000 fb0e 	bl	800508c <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <pwm_set_lenkung+0x58>)
 8004a7e:	f000 f953 	bl	8004d28 <__adddf3>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f000 fd11 	bl	80054b0 <__aeabi_d2iz>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	60fb      	str	r3, [r7, #12]
	PWM_SetDutyCycle(&PWM_LENKUNG, pwm);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4805      	ldr	r0, [pc, #20]	; (8004aac <pwm_set_lenkung+0x5c>)
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7fe fe20 	bl	80036dc <PWM_SetDutyCycle>

}
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	4085e000 	.word	0x4085e000
 8004aac:	1ffe8864 	.word	0x1ffe8864
 8004ab0:	cccccccd 	.word	0xcccccccd
 8004ab4:	3ff4cccc 	.word	0x3ff4cccc

08004ab8 <ERU0_3_IRQHandler>:

void impulse_lichtschranke(void){
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
	zaehlimpulse++;												//Impulse hochzaehlen
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <ERU0_3_IRQHandler+0x18>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	4a03      	ldr	r2, [pc, #12]	; (8004ad0 <ERU0_3_IRQHandler+0x18>)
 8004ac4:	6013      	str	r3, [r2, #0]

}
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	1ffe8b20 	.word	0x1ffe8b20

08004ad4 <CCU42_1_IRQHandler>:


void Geschwindigkeit(void){
 8004ad4:	b5b0      	push	{r4, r5, r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	speed_in_cms = (float)zaehlimpulse*faktor*2; 				//passiert jede 500ms
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <CCU42_1_IRQHandler+0x74>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004b4c <CCU42_1_IRQHandler+0x78>
 8004ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <CCU42_1_IRQHandler+0x7c>)
 8004af2:	edc3 7a00 	vstr	s15, [r3]
																//Multiplikation mit 2 ist gleich Division durch 0.5s
																//Zaehlimpulse* Faktor ist gleich die zuruckgelegte Strecke in der Zeit
	strecke_cm = strecke_cm + (speed_in_cms*0.5);				//Zurückgelegte Strecke
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <CCU42_1_IRQHandler+0x80>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa72 	bl	8004fe4 <__aeabi_f2d>
 8004b00:	4604      	mov	r4, r0
 8004b02:	460d      	mov	r5, r1
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <CCU42_1_IRQHandler+0x7c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fa6b 	bl	8004fe4 <__aeabi_f2d>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <CCU42_1_IRQHandler+0x84>)
 8004b1c:	f000 fab6 	bl	800508c <__aeabi_dmul>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f000 f8fe 	bl	8004d28 <__adddf3>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	f000 fce4 	bl	8005500 <__aeabi_d2f>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <CCU42_1_IRQHandler+0x80>)
 8004b3c:	601a      	str	r2, [r3, #0]
	zaehlimpulse = 0;
 8004b3e:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <CCU42_1_IRQHandler+0x74>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

}
 8004b44:	bdb0      	pop	{r4, r5, r7, pc}
 8004b46:	bf00      	nop
 8004b48:	1ffe8b20 	.word	0x1ffe8b20
 8004b4c:	3eae402c 	.word	0x3eae402c
 8004b50:	1ffe8b24 	.word	0x1ffe8b24
 8004b54:	1ffe8b34 	.word	0x1ffe8b34
 8004b58:	3fe00000 	.word	0x3fe00000

08004b5c <main>:


int main(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8004b62:	f7ff fd7f 	bl	8004664 <DAVE_Init>
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
  Ultraschall_Init();
 8004b6a:	f000 f8c1 	bl	8004cf0 <Ultraschall_Init>
  Infrarot_Init();
 8004b6e:	f7ff feb1 	bl	80048d4 <Infrarot_Init>
  if (status != DAVE_STATUS_SUCCESS)
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d000      	beq.n	8004b7a <main+0x1e>
    XMC_DEBUG("DAVE APPs initialization failed\n");
    while(1U)
    {


    }
 8004b78:	e7fe      	b.n	8004b78 <main+0x1c>
  }

  Timer_WD = (uint32_t)SYSTIMER_CreateTimer(ONESEC,SYSTIMER_MODE_PERIODIC,(void*)watch_dog,NULL);			//Watchdog timer
 8004b7a:	4838      	ldr	r0, [pc, #224]	; (8004c5c <main+0x100>)
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4a38      	ldr	r2, [pc, #224]	; (8004c60 <main+0x104>)
 8004b80:	2300      	movs	r3, #0
 8004b82:	f7fe f989 	bl	8002e98 <SYSTIMER_CreateTimer>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <main+0x108>)
 8004b8a:	601a      	str	r2, [r3, #0]
  Timer_Regelung = (uint32_t)SYSTIMER_CreateTimer(TENMILSEC,SYSTIMER_MODE_PERIODIC,(void*)regelung,NULL);	//Regelung timer
 8004b8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8004b90:	2101      	movs	r1, #1
 8004b92:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <main+0x10c>)
 8004b94:	2300      	movs	r3, #0
 8004b96:	f7fe f97f 	bl	8002e98 <SYSTIMER_CreateTimer>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <main+0x110>)
 8004b9e:	601a      	str	r2, [r3, #0]
  SYSTIMER_StartTimer(Timer_Regelung);
 8004ba0:	4b32      	ldr	r3, [pc, #200]	; (8004c6c <main+0x110>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fe fa15 	bl	8002fd4 <SYSTIMER_StartTimer>


  while(1U)
  {

	  if(UART_Receive(&UART_PROTOKOLL,&recieved, 4) == UART_STATUS_SUCCESS)
 8004baa:	4831      	ldr	r0, [pc, #196]	; (8004c70 <main+0x114>)
 8004bac:	4931      	ldr	r1, [pc, #196]	; (8004c74 <main+0x118>)
 8004bae:	2204      	movs	r2, #4
 8004bb0:	f7fd fbb4 	bl	800231c <UART_Receive>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d14f      	bne.n	8004c5a <main+0xfe>
	         {

		  	  	  startbit = recieved[0];							//0. Byte enthält den Startbit
 8004bba:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <main+0x118>)
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <main+0x11c>)
 8004bc0:	701a      	strb	r2, [r3, #0]
		  	  	  if(startbit == 0x01){
 8004bc2:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <main+0x11c>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d147      	bne.n	8004c5a <main+0xfe>
		  	  		fahr_geschwindigkeit_char = recieved[1]; 		//1.Byte beinhaltet Fahrgeschwindigkeit
 8004bca:	4b2a      	ldr	r3, [pc, #168]	; (8004c74 <main+0x118>)
 8004bcc:	785a      	ldrb	r2, [r3, #1]
 8004bce:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <main+0x120>)
 8004bd0:	701a      	strb	r2, [r3, #0]
		  	  		lenk_winkel = recieved[2];						//2.Byte beinhaltet Lenkwinkel
 8004bd2:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <main+0x118>)
 8004bd4:	789a      	ldrb	r2, [r3, #2]
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <main+0x124>)
 8004bd8:	701a      	strb	r2, [r3, #0]
		  	  		checksumme = recieved[3];						//Checksumme (1. XOR 2.)
 8004bda:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <main+0x118>)
 8004bdc:	78da      	ldrb	r2, [r3, #3]
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <main+0x128>)
 8004be0:	701a      	strb	r2, [r3, #0]
		  	  		if(checksumme == (fahr_geschwindigkeit_char ^ lenk_winkel)){
 8004be2:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <main+0x120>)
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <main+0x124>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	4053      	eors	r3, r2
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <main+0x128>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d125      	bne.n	8004c42 <main+0xe6>
		  	  			//Aktoren gesetzt
		  	  			if(distance>=20){							//Falls kein Hindernis sich 20m vor dem Auto befindet:
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <main+0x12c>)
 8004bf8:	edd3 7a00 	vldr	s15, [r3]
 8004bfc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x34
 8004c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c08:	db0a      	blt.n	8004c20 <main+0xc4>
		  	  				set_speed(fahr_geschwindigkeit_char);	//Soll geschwindigkeit gesetzt
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <main+0x120>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fee6 	bl	80049e0 <set_speed>
		  	  				pwm_set_lenkung(lenk_winkel);			//PWM Dutycycle für den Lenkwinkel wird gesetzt
 8004c14:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <main+0x124>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff19 	bl	8004a50 <pwm_set_lenkung>
 8004c1e:	e009      	b.n	8004c34 <main+0xd8>
		  	  			}else{
		  	  				set_speed(pwm_motor_leerlauf);			//Falls es nicht stimmt dann sollte das Auto stehenbleiben
 8004c20:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <main+0x130>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fedb 	bl	80049e0 <set_speed>
		  	  				pwm_set_lenkung(lenk_winkel);
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <main+0x124>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff ff0e 	bl	8004a50 <pwm_set_lenkung>
		  	  			}

		  	  			SYSTIMER_RestartTimer(Timer_WD,ONESEC);		//watchdog timer neugestartet
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <main+0x108>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	4908      	ldr	r1, [pc, #32]	; (8004c5c <main+0x100>)
 8004c3c:	f7fe fa42 	bl	80030c4 <SYSTIMER_RestartTimer>
 8004c40:	e00b      	b.n	8004c5a <main+0xfe>

		  	  		}else{
		  	  				  	  			recieved[0] = 0;		//Falls die Übertragung fehlerhaft ist, wird die Nachricht gelöscht
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <main+0x118>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
		  	  				  	  			recieved[1] = 0;		//und der Wachhund greift an
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <main+0x118>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	705a      	strb	r2, [r3, #1]
		  	  				  	  			recieved[2] = 0;
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <main+0x118>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	709a      	strb	r2, [r3, #2]
		  	  				  	  			recieved[3] = 0;
 8004c54:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <main+0x118>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	70da      	strb	r2, [r3, #3]
		  	  		}
		  	  	  }

	         }

  }
 8004c5a:	e7a6      	b.n	8004baa <main+0x4e>
 8004c5c:	000f4240 	.word	0x000f4240
 8004c60:	08004901 	.word	0x08004901
 8004c64:	1ffe8d44 	.word	0x1ffe8d44
 8004c68:	08004939 	.word	0x08004939
 8004c6c:	1ffe8d40 	.word	0x1ffe8d40
 8004c70:	1ffe8800 	.word	0x1ffe8800
 8004c74:	1ffe8b28 	.word	0x1ffe8b28
 8004c78:	1ffe8b2c 	.word	0x1ffe8b2c
 8004c7c:	1ffe8b2d 	.word	0x1ffe8b2d
 8004c80:	1ffe8d50 	.word	0x1ffe8d50
 8004c84:	1ffe8b2e 	.word	0x1ffe8b2e
 8004c88:	1ffe8d60 	.word	0x1ffe8d60
 8004c8c:	1ffe8a2c 	.word	0x1ffe8a2c

08004c90 <Get_Captured_Time_60ms>:

float captured_time_us;
float distance;

void Get_Captured_Time_60ms(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
	PWM_Start(&PWM_ULTRA);
 8004c94:	480f      	ldr	r0, [pc, #60]	; (8004cd4 <Get_Captured_Time_60ms+0x44>)
 8004c96:	f7fe fd09 	bl	80036ac <PWM_Start>
	CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_ULTRA, &Capture_t);
 8004c9a:	480f      	ldr	r0, [pc, #60]	; (8004cd8 <Get_Captured_Time_60ms+0x48>)
 8004c9c:	490f      	ldr	r1, [pc, #60]	; (8004cdc <Get_Captured_Time_60ms+0x4c>)
 8004c9e:	f7ff f957 	bl	8003f50 <CAPTURE_GetCapturedTimeInNanoSec>
	captured_time_us = ((float)Capture_t)/1000;
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <Get_Captured_Time_60ms+0x4c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ce0 <Get_Captured_Time_60ms+0x50>
 8004cb2:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <Get_Captured_Time_60ms+0x54>)
 8004cb8:	edc3 7a00 	vstr	s15, [r3]
	distance = captured_time_us /58;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <Get_Captured_Time_60ms+0x54>)
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004ce8 <Get_Captured_Time_60ms+0x58>
 8004cc6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <Get_Captured_Time_60ms+0x5c>)
 8004ccc:	edc3 7a00 	vstr	s15, [r3]
	//sprintf((char*)Abstand,"%.2fcm\n\r", distance);
	//UART_Transmit(&UART_PROTOKOLL, Abstand, sizeof(Abstand));
}
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	1ffe88cc 	.word	0x1ffe88cc
 8004cd8:	1ffe89b0 	.word	0x1ffe89b0
 8004cdc:	1ffe8d68 	.word	0x1ffe8d68
 8004ce0:	447a0000 	.word	0x447a0000
 8004ce4:	1ffe8d64 	.word	0x1ffe8d64
 8004ce8:	42680000 	.word	0x42680000
 8004cec:	1ffe8d60 	.word	0x1ffe8d60

08004cf0 <Ultraschall_Init>:

void Ultraschall_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
	Timer_60ms = SYSTIMER_CreateTimer(Durchlauf,SYSTIMER_MODE_PERIODIC,(void*)Get_Captured_Time_60ms,NULL);
 8004cf4:	f64e 2060 	movw	r0, #60000	; 0xea60
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4a06      	ldr	r2, [pc, #24]	; (8004d14 <Ultraschall_Init+0x24>)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f7fe f8cb 	bl	8002e98 <SYSTIMER_CreateTimer>
 8004d02:	4602      	mov	r2, r0
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <Ultraschall_Init+0x28>)
 8004d06:	601a      	str	r2, [r3, #0]
	SYSTIMER_StartTimer(Timer_60ms);
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <Ultraschall_Init+0x28>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f961 	bl	8002fd4 <SYSTIMER_StartTimer>
}
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08004c91 	.word	0x08004c91
 8004d18:	1ffe8d6c 	.word	0x1ffe8d6c

08004d1c <__aeabi_drsub>:
 8004d1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004d20:	e002      	b.n	8004d28 <__adddf3>
 8004d22:	bf00      	nop

08004d24 <__aeabi_dsub>:
 8004d24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004d28 <__adddf3>:
 8004d28:	b530      	push	{r4, r5, lr}
 8004d2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004d2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004d32:	ea94 0f05 	teq	r4, r5
 8004d36:	bf08      	it	eq
 8004d38:	ea90 0f02 	teqeq	r0, r2
 8004d3c:	bf1f      	itttt	ne
 8004d3e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004d42:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004d46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004d4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004d4e:	f000 80e2 	beq.w	8004f16 <__adddf3+0x1ee>
 8004d52:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004d56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004d5a:	bfb8      	it	lt
 8004d5c:	426d      	neglt	r5, r5
 8004d5e:	dd0c      	ble.n	8004d7a <__adddf3+0x52>
 8004d60:	442c      	add	r4, r5
 8004d62:	ea80 0202 	eor.w	r2, r0, r2
 8004d66:	ea81 0303 	eor.w	r3, r1, r3
 8004d6a:	ea82 0000 	eor.w	r0, r2, r0
 8004d6e:	ea83 0101 	eor.w	r1, r3, r1
 8004d72:	ea80 0202 	eor.w	r2, r0, r2
 8004d76:	ea81 0303 	eor.w	r3, r1, r3
 8004d7a:	2d36      	cmp	r5, #54	; 0x36
 8004d7c:	bf88      	it	hi
 8004d7e:	bd30      	pophi	{r4, r5, pc}
 8004d80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004d84:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004d88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004d8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004d90:	d002      	beq.n	8004d98 <__adddf3+0x70>
 8004d92:	4240      	negs	r0, r0
 8004d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004d98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004d9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004da0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004da4:	d002      	beq.n	8004dac <__adddf3+0x84>
 8004da6:	4252      	negs	r2, r2
 8004da8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004dac:	ea94 0f05 	teq	r4, r5
 8004db0:	f000 80a7 	beq.w	8004f02 <__adddf3+0x1da>
 8004db4:	f1a4 0401 	sub.w	r4, r4, #1
 8004db8:	f1d5 0e20 	rsbs	lr, r5, #32
 8004dbc:	db0d      	blt.n	8004dda <__adddf3+0xb2>
 8004dbe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004dc2:	fa22 f205 	lsr.w	r2, r2, r5
 8004dc6:	1880      	adds	r0, r0, r2
 8004dc8:	f141 0100 	adc.w	r1, r1, #0
 8004dcc:	fa03 f20e 	lsl.w	r2, r3, lr
 8004dd0:	1880      	adds	r0, r0, r2
 8004dd2:	fa43 f305 	asr.w	r3, r3, r5
 8004dd6:	4159      	adcs	r1, r3
 8004dd8:	e00e      	b.n	8004df8 <__adddf3+0xd0>
 8004dda:	f1a5 0520 	sub.w	r5, r5, #32
 8004dde:	f10e 0e20 	add.w	lr, lr, #32
 8004de2:	2a01      	cmp	r2, #1
 8004de4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004de8:	bf28      	it	cs
 8004dea:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004dee:	fa43 f305 	asr.w	r3, r3, r5
 8004df2:	18c0      	adds	r0, r0, r3
 8004df4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004df8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004dfc:	d507      	bpl.n	8004e0e <__adddf3+0xe6>
 8004dfe:	f04f 0e00 	mov.w	lr, #0
 8004e02:	f1dc 0c00 	rsbs	ip, ip, #0
 8004e06:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004e0a:	eb6e 0101 	sbc.w	r1, lr, r1
 8004e0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e12:	d31b      	bcc.n	8004e4c <__adddf3+0x124>
 8004e14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004e18:	d30c      	bcc.n	8004e34 <__adddf3+0x10c>
 8004e1a:	0849      	lsrs	r1, r1, #1
 8004e1c:	ea5f 0030 	movs.w	r0, r0, rrx
 8004e20:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004e24:	f104 0401 	add.w	r4, r4, #1
 8004e28:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004e2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004e30:	f080 809a 	bcs.w	8004f68 <__adddf3+0x240>
 8004e34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004e38:	bf08      	it	eq
 8004e3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004e3e:	f150 0000 	adcs.w	r0, r0, #0
 8004e42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004e46:	ea41 0105 	orr.w	r1, r1, r5
 8004e4a:	bd30      	pop	{r4, r5, pc}
 8004e4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004e50:	4140      	adcs	r0, r0
 8004e52:	eb41 0101 	adc.w	r1, r1, r1
 8004e56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004e5a:	f1a4 0401 	sub.w	r4, r4, #1
 8004e5e:	d1e9      	bne.n	8004e34 <__adddf3+0x10c>
 8004e60:	f091 0f00 	teq	r1, #0
 8004e64:	bf04      	itt	eq
 8004e66:	4601      	moveq	r1, r0
 8004e68:	2000      	moveq	r0, #0
 8004e6a:	fab1 f381 	clz	r3, r1
 8004e6e:	bf08      	it	eq
 8004e70:	3320      	addeq	r3, #32
 8004e72:	f1a3 030b 	sub.w	r3, r3, #11
 8004e76:	f1b3 0220 	subs.w	r2, r3, #32
 8004e7a:	da0c      	bge.n	8004e96 <__adddf3+0x16e>
 8004e7c:	320c      	adds	r2, #12
 8004e7e:	dd08      	ble.n	8004e92 <__adddf3+0x16a>
 8004e80:	f102 0c14 	add.w	ip, r2, #20
 8004e84:	f1c2 020c 	rsb	r2, r2, #12
 8004e88:	fa01 f00c 	lsl.w	r0, r1, ip
 8004e8c:	fa21 f102 	lsr.w	r1, r1, r2
 8004e90:	e00c      	b.n	8004eac <__adddf3+0x184>
 8004e92:	f102 0214 	add.w	r2, r2, #20
 8004e96:	bfd8      	it	le
 8004e98:	f1c2 0c20 	rsble	ip, r2, #32
 8004e9c:	fa01 f102 	lsl.w	r1, r1, r2
 8004ea0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004ea4:	bfdc      	itt	le
 8004ea6:	ea41 010c 	orrle.w	r1, r1, ip
 8004eaa:	4090      	lslle	r0, r2
 8004eac:	1ae4      	subs	r4, r4, r3
 8004eae:	bfa2      	ittt	ge
 8004eb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004eb4:	4329      	orrge	r1, r5
 8004eb6:	bd30      	popge	{r4, r5, pc}
 8004eb8:	ea6f 0404 	mvn.w	r4, r4
 8004ebc:	3c1f      	subs	r4, #31
 8004ebe:	da1c      	bge.n	8004efa <__adddf3+0x1d2>
 8004ec0:	340c      	adds	r4, #12
 8004ec2:	dc0e      	bgt.n	8004ee2 <__adddf3+0x1ba>
 8004ec4:	f104 0414 	add.w	r4, r4, #20
 8004ec8:	f1c4 0220 	rsb	r2, r4, #32
 8004ecc:	fa20 f004 	lsr.w	r0, r0, r4
 8004ed0:	fa01 f302 	lsl.w	r3, r1, r2
 8004ed4:	ea40 0003 	orr.w	r0, r0, r3
 8004ed8:	fa21 f304 	lsr.w	r3, r1, r4
 8004edc:	ea45 0103 	orr.w	r1, r5, r3
 8004ee0:	bd30      	pop	{r4, r5, pc}
 8004ee2:	f1c4 040c 	rsb	r4, r4, #12
 8004ee6:	f1c4 0220 	rsb	r2, r4, #32
 8004eea:	fa20 f002 	lsr.w	r0, r0, r2
 8004eee:	fa01 f304 	lsl.w	r3, r1, r4
 8004ef2:	ea40 0003 	orr.w	r0, r0, r3
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	bd30      	pop	{r4, r5, pc}
 8004efa:	fa21 f004 	lsr.w	r0, r1, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	bd30      	pop	{r4, r5, pc}
 8004f02:	f094 0f00 	teq	r4, #0
 8004f06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004f0a:	bf06      	itte	eq
 8004f0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004f10:	3401      	addeq	r4, #1
 8004f12:	3d01      	subne	r5, #1
 8004f14:	e74e      	b.n	8004db4 <__adddf3+0x8c>
 8004f16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004f1a:	bf18      	it	ne
 8004f1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004f20:	d029      	beq.n	8004f76 <__adddf3+0x24e>
 8004f22:	ea94 0f05 	teq	r4, r5
 8004f26:	bf08      	it	eq
 8004f28:	ea90 0f02 	teqeq	r0, r2
 8004f2c:	d005      	beq.n	8004f3a <__adddf3+0x212>
 8004f2e:	ea54 0c00 	orrs.w	ip, r4, r0
 8004f32:	bf04      	itt	eq
 8004f34:	4619      	moveq	r1, r3
 8004f36:	4610      	moveq	r0, r2
 8004f38:	bd30      	pop	{r4, r5, pc}
 8004f3a:	ea91 0f03 	teq	r1, r3
 8004f3e:	bf1e      	ittt	ne
 8004f40:	2100      	movne	r1, #0
 8004f42:	2000      	movne	r0, #0
 8004f44:	bd30      	popne	{r4, r5, pc}
 8004f46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004f4a:	d105      	bne.n	8004f58 <__adddf3+0x230>
 8004f4c:	0040      	lsls	r0, r0, #1
 8004f4e:	4149      	adcs	r1, r1
 8004f50:	bf28      	it	cs
 8004f52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004f56:	bd30      	pop	{r4, r5, pc}
 8004f58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004f5c:	bf3c      	itt	cc
 8004f5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004f62:	bd30      	popcc	{r4, r5, pc}
 8004f64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004f68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004f6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f70:	f04f 0000 	mov.w	r0, #0
 8004f74:	bd30      	pop	{r4, r5, pc}
 8004f76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004f7a:	bf1a      	itte	ne
 8004f7c:	4619      	movne	r1, r3
 8004f7e:	4610      	movne	r0, r2
 8004f80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004f84:	bf1c      	itt	ne
 8004f86:	460b      	movne	r3, r1
 8004f88:	4602      	movne	r2, r0
 8004f8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004f8e:	bf06      	itte	eq
 8004f90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004f94:	ea91 0f03 	teqeq	r1, r3
 8004f98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004f9c:	bd30      	pop	{r4, r5, pc}
 8004f9e:	bf00      	nop

08004fa0 <__aeabi_ui2d>:
 8004fa0:	f090 0f00 	teq	r0, #0
 8004fa4:	bf04      	itt	eq
 8004fa6:	2100      	moveq	r1, #0
 8004fa8:	4770      	bxeq	lr
 8004faa:	b530      	push	{r4, r5, lr}
 8004fac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004fb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004fb4:	f04f 0500 	mov.w	r5, #0
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	e750      	b.n	8004e60 <__adddf3+0x138>
 8004fbe:	bf00      	nop

08004fc0 <__aeabi_i2d>:
 8004fc0:	f090 0f00 	teq	r0, #0
 8004fc4:	bf04      	itt	eq
 8004fc6:	2100      	moveq	r1, #0
 8004fc8:	4770      	bxeq	lr
 8004fca:	b530      	push	{r4, r5, lr}
 8004fcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004fd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004fd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004fd8:	bf48      	it	mi
 8004fda:	4240      	negmi	r0, r0
 8004fdc:	f04f 0100 	mov.w	r1, #0
 8004fe0:	e73e      	b.n	8004e60 <__adddf3+0x138>
 8004fe2:	bf00      	nop

08004fe4 <__aeabi_f2d>:
 8004fe4:	0042      	lsls	r2, r0, #1
 8004fe6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004fea:	ea4f 0131 	mov.w	r1, r1, rrx
 8004fee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004ff2:	bf1f      	itttt	ne
 8004ff4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004ff8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004ffc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005000:	4770      	bxne	lr
 8005002:	f092 0f00 	teq	r2, #0
 8005006:	bf14      	ite	ne
 8005008:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800500c:	4770      	bxeq	lr
 800500e:	b530      	push	{r4, r5, lr}
 8005010:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005014:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800501c:	e720      	b.n	8004e60 <__adddf3+0x138>
 800501e:	bf00      	nop

08005020 <__aeabi_ul2d>:
 8005020:	ea50 0201 	orrs.w	r2, r0, r1
 8005024:	bf08      	it	eq
 8005026:	4770      	bxeq	lr
 8005028:	b530      	push	{r4, r5, lr}
 800502a:	f04f 0500 	mov.w	r5, #0
 800502e:	e00a      	b.n	8005046 <__aeabi_l2d+0x16>

08005030 <__aeabi_l2d>:
 8005030:	ea50 0201 	orrs.w	r2, r0, r1
 8005034:	bf08      	it	eq
 8005036:	4770      	bxeq	lr
 8005038:	b530      	push	{r4, r5, lr}
 800503a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800503e:	d502      	bpl.n	8005046 <__aeabi_l2d+0x16>
 8005040:	4240      	negs	r0, r0
 8005042:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005046:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800504a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800504e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005052:	f43f aedc 	beq.w	8004e0e <__adddf3+0xe6>
 8005056:	f04f 0203 	mov.w	r2, #3
 800505a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800505e:	bf18      	it	ne
 8005060:	3203      	addne	r2, #3
 8005062:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005066:	bf18      	it	ne
 8005068:	3203      	addne	r2, #3
 800506a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800506e:	f1c2 0320 	rsb	r3, r2, #32
 8005072:	fa00 fc03 	lsl.w	ip, r0, r3
 8005076:	fa20 f002 	lsr.w	r0, r0, r2
 800507a:	fa01 fe03 	lsl.w	lr, r1, r3
 800507e:	ea40 000e 	orr.w	r0, r0, lr
 8005082:	fa21 f102 	lsr.w	r1, r1, r2
 8005086:	4414      	add	r4, r2
 8005088:	e6c1      	b.n	8004e0e <__adddf3+0xe6>
 800508a:	bf00      	nop

0800508c <__aeabi_dmul>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005092:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005096:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800509a:	bf1d      	ittte	ne
 800509c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80050a0:	ea94 0f0c 	teqne	r4, ip
 80050a4:	ea95 0f0c 	teqne	r5, ip
 80050a8:	f000 f8de 	bleq	8005268 <__aeabi_dmul+0x1dc>
 80050ac:	442c      	add	r4, r5
 80050ae:	ea81 0603 	eor.w	r6, r1, r3
 80050b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80050b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80050ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80050be:	bf18      	it	ne
 80050c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80050c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80050c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050cc:	d038      	beq.n	8005140 <__aeabi_dmul+0xb4>
 80050ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80050d2:	f04f 0500 	mov.w	r5, #0
 80050d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80050da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80050de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80050e2:	f04f 0600 	mov.w	r6, #0
 80050e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80050ea:	f09c 0f00 	teq	ip, #0
 80050ee:	bf18      	it	ne
 80050f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80050f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80050f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80050fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005100:	d204      	bcs.n	800510c <__aeabi_dmul+0x80>
 8005102:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005106:	416d      	adcs	r5, r5
 8005108:	eb46 0606 	adc.w	r6, r6, r6
 800510c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005110:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005114:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005118:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800511c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005120:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005124:	bf88      	it	hi
 8005126:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800512a:	d81e      	bhi.n	800516a <__aeabi_dmul+0xde>
 800512c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005130:	bf08      	it	eq
 8005132:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005136:	f150 0000 	adcs.w	r0, r0, #0
 800513a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005144:	ea46 0101 	orr.w	r1, r6, r1
 8005148:	ea40 0002 	orr.w	r0, r0, r2
 800514c:	ea81 0103 	eor.w	r1, r1, r3
 8005150:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005154:	bfc2      	ittt	gt
 8005156:	ebd4 050c 	rsbsgt	r5, r4, ip
 800515a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800515e:	bd70      	popgt	{r4, r5, r6, pc}
 8005160:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005164:	f04f 0e00 	mov.w	lr, #0
 8005168:	3c01      	subs	r4, #1
 800516a:	f300 80ab 	bgt.w	80052c4 <__aeabi_dmul+0x238>
 800516e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005172:	bfde      	ittt	le
 8005174:	2000      	movle	r0, #0
 8005176:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800517a:	bd70      	pople	{r4, r5, r6, pc}
 800517c:	f1c4 0400 	rsb	r4, r4, #0
 8005180:	3c20      	subs	r4, #32
 8005182:	da35      	bge.n	80051f0 <__aeabi_dmul+0x164>
 8005184:	340c      	adds	r4, #12
 8005186:	dc1b      	bgt.n	80051c0 <__aeabi_dmul+0x134>
 8005188:	f104 0414 	add.w	r4, r4, #20
 800518c:	f1c4 0520 	rsb	r5, r4, #32
 8005190:	fa00 f305 	lsl.w	r3, r0, r5
 8005194:	fa20 f004 	lsr.w	r0, r0, r4
 8005198:	fa01 f205 	lsl.w	r2, r1, r5
 800519c:	ea40 0002 	orr.w	r0, r0, r2
 80051a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80051a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80051a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80051ac:	fa21 f604 	lsr.w	r6, r1, r4
 80051b0:	eb42 0106 	adc.w	r1, r2, r6
 80051b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80051b8:	bf08      	it	eq
 80051ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f1c4 040c 	rsb	r4, r4, #12
 80051c4:	f1c4 0520 	rsb	r5, r4, #32
 80051c8:	fa00 f304 	lsl.w	r3, r0, r4
 80051cc:	fa20 f005 	lsr.w	r0, r0, r5
 80051d0:	fa01 f204 	lsl.w	r2, r1, r4
 80051d4:	ea40 0002 	orr.w	r0, r0, r2
 80051d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80051dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80051e0:	f141 0100 	adc.w	r1, r1, #0
 80051e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80051e8:	bf08      	it	eq
 80051ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	f1c4 0520 	rsb	r5, r4, #32
 80051f4:	fa00 f205 	lsl.w	r2, r0, r5
 80051f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80051fc:	fa20 f304 	lsr.w	r3, r0, r4
 8005200:	fa01 f205 	lsl.w	r2, r1, r5
 8005204:	ea43 0302 	orr.w	r3, r3, r2
 8005208:	fa21 f004 	lsr.w	r0, r1, r4
 800520c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005210:	fa21 f204 	lsr.w	r2, r1, r4
 8005214:	ea20 0002 	bic.w	r0, r0, r2
 8005218:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800521c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005220:	bf08      	it	eq
 8005222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	f094 0f00 	teq	r4, #0
 800522c:	d10f      	bne.n	800524e <__aeabi_dmul+0x1c2>
 800522e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005232:	0040      	lsls	r0, r0, #1
 8005234:	eb41 0101 	adc.w	r1, r1, r1
 8005238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800523c:	bf08      	it	eq
 800523e:	3c01      	subeq	r4, #1
 8005240:	d0f7      	beq.n	8005232 <__aeabi_dmul+0x1a6>
 8005242:	ea41 0106 	orr.w	r1, r1, r6
 8005246:	f095 0f00 	teq	r5, #0
 800524a:	bf18      	it	ne
 800524c:	4770      	bxne	lr
 800524e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005252:	0052      	lsls	r2, r2, #1
 8005254:	eb43 0303 	adc.w	r3, r3, r3
 8005258:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800525c:	bf08      	it	eq
 800525e:	3d01      	subeq	r5, #1
 8005260:	d0f7      	beq.n	8005252 <__aeabi_dmul+0x1c6>
 8005262:	ea43 0306 	orr.w	r3, r3, r6
 8005266:	4770      	bx	lr
 8005268:	ea94 0f0c 	teq	r4, ip
 800526c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005270:	bf18      	it	ne
 8005272:	ea95 0f0c 	teqne	r5, ip
 8005276:	d00c      	beq.n	8005292 <__aeabi_dmul+0x206>
 8005278:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800527c:	bf18      	it	ne
 800527e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005282:	d1d1      	bne.n	8005228 <__aeabi_dmul+0x19c>
 8005284:	ea81 0103 	eor.w	r1, r1, r3
 8005288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800528c:	f04f 0000 	mov.w	r0, #0
 8005290:	bd70      	pop	{r4, r5, r6, pc}
 8005292:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005296:	bf06      	itte	eq
 8005298:	4610      	moveq	r0, r2
 800529a:	4619      	moveq	r1, r3
 800529c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80052a0:	d019      	beq.n	80052d6 <__aeabi_dmul+0x24a>
 80052a2:	ea94 0f0c 	teq	r4, ip
 80052a6:	d102      	bne.n	80052ae <__aeabi_dmul+0x222>
 80052a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80052ac:	d113      	bne.n	80052d6 <__aeabi_dmul+0x24a>
 80052ae:	ea95 0f0c 	teq	r5, ip
 80052b2:	d105      	bne.n	80052c0 <__aeabi_dmul+0x234>
 80052b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80052b8:	bf1c      	itt	ne
 80052ba:	4610      	movne	r0, r2
 80052bc:	4619      	movne	r1, r3
 80052be:	d10a      	bne.n	80052d6 <__aeabi_dmul+0x24a>
 80052c0:	ea81 0103 	eor.w	r1, r1, r3
 80052c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80052c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80052cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052d0:	f04f 0000 	mov.w	r0, #0
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
 80052d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80052da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80052de:	bd70      	pop	{r4, r5, r6, pc}

080052e0 <__aeabi_ddiv>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80052e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80052ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80052ee:	bf1d      	ittte	ne
 80052f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80052f4:	ea94 0f0c 	teqne	r4, ip
 80052f8:	ea95 0f0c 	teqne	r5, ip
 80052fc:	f000 f8a7 	bleq	800544e <__aeabi_ddiv+0x16e>
 8005300:	eba4 0405 	sub.w	r4, r4, r5
 8005304:	ea81 0e03 	eor.w	lr, r1, r3
 8005308:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800530c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005310:	f000 8088 	beq.w	8005424 <__aeabi_ddiv+0x144>
 8005314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005318:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800531c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005320:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005324:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005328:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800532c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005330:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005334:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005338:	429d      	cmp	r5, r3
 800533a:	bf08      	it	eq
 800533c:	4296      	cmpeq	r6, r2
 800533e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005342:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005346:	d202      	bcs.n	800534e <__aeabi_ddiv+0x6e>
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	ea4f 0232 	mov.w	r2, r2, rrx
 800534e:	1ab6      	subs	r6, r6, r2
 8005350:	eb65 0503 	sbc.w	r5, r5, r3
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	ea4f 0232 	mov.w	r2, r2, rrx
 800535a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800535e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005362:	ebb6 0e02 	subs.w	lr, r6, r2
 8005366:	eb75 0e03 	sbcs.w	lr, r5, r3
 800536a:	bf22      	ittt	cs
 800536c:	1ab6      	subcs	r6, r6, r2
 800536e:	4675      	movcs	r5, lr
 8005370:	ea40 000c 	orrcs.w	r0, r0, ip
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	ea4f 0232 	mov.w	r2, r2, rrx
 800537a:	ebb6 0e02 	subs.w	lr, r6, r2
 800537e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005382:	bf22      	ittt	cs
 8005384:	1ab6      	subcs	r6, r6, r2
 8005386:	4675      	movcs	r5, lr
 8005388:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005392:	ebb6 0e02 	subs.w	lr, r6, r2
 8005396:	eb75 0e03 	sbcs.w	lr, r5, r3
 800539a:	bf22      	ittt	cs
 800539c:	1ab6      	subcs	r6, r6, r2
 800539e:	4675      	movcs	r5, lr
 80053a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80053aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80053ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80053b2:	bf22      	ittt	cs
 80053b4:	1ab6      	subcs	r6, r6, r2
 80053b6:	4675      	movcs	r5, lr
 80053b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80053bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80053c0:	d018      	beq.n	80053f4 <__aeabi_ddiv+0x114>
 80053c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80053c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80053ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80053ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80053d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80053d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80053da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80053de:	d1c0      	bne.n	8005362 <__aeabi_ddiv+0x82>
 80053e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80053e4:	d10b      	bne.n	80053fe <__aeabi_ddiv+0x11e>
 80053e6:	ea41 0100 	orr.w	r1, r1, r0
 80053ea:	f04f 0000 	mov.w	r0, #0
 80053ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80053f2:	e7b6      	b.n	8005362 <__aeabi_ddiv+0x82>
 80053f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80053f8:	bf04      	itt	eq
 80053fa:	4301      	orreq	r1, r0
 80053fc:	2000      	moveq	r0, #0
 80053fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005402:	bf88      	it	hi
 8005404:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005408:	f63f aeaf 	bhi.w	800516a <__aeabi_dmul+0xde>
 800540c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005410:	bf04      	itt	eq
 8005412:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800541a:	f150 0000 	adcs.w	r0, r0, #0
 800541e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005428:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800542c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005430:	bfc2      	ittt	gt
 8005432:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005436:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800543a:	bd70      	popgt	{r4, r5, r6, pc}
 800543c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005440:	f04f 0e00 	mov.w	lr, #0
 8005444:	3c01      	subs	r4, #1
 8005446:	e690      	b.n	800516a <__aeabi_dmul+0xde>
 8005448:	ea45 0e06 	orr.w	lr, r5, r6
 800544c:	e68d      	b.n	800516a <__aeabi_dmul+0xde>
 800544e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005452:	ea94 0f0c 	teq	r4, ip
 8005456:	bf08      	it	eq
 8005458:	ea95 0f0c 	teqeq	r5, ip
 800545c:	f43f af3b 	beq.w	80052d6 <__aeabi_dmul+0x24a>
 8005460:	ea94 0f0c 	teq	r4, ip
 8005464:	d10a      	bne.n	800547c <__aeabi_ddiv+0x19c>
 8005466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800546a:	f47f af34 	bne.w	80052d6 <__aeabi_dmul+0x24a>
 800546e:	ea95 0f0c 	teq	r5, ip
 8005472:	f47f af25 	bne.w	80052c0 <__aeabi_dmul+0x234>
 8005476:	4610      	mov	r0, r2
 8005478:	4619      	mov	r1, r3
 800547a:	e72c      	b.n	80052d6 <__aeabi_dmul+0x24a>
 800547c:	ea95 0f0c 	teq	r5, ip
 8005480:	d106      	bne.n	8005490 <__aeabi_ddiv+0x1b0>
 8005482:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005486:	f43f aefd 	beq.w	8005284 <__aeabi_dmul+0x1f8>
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	e722      	b.n	80052d6 <__aeabi_dmul+0x24a>
 8005490:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005494:	bf18      	it	ne
 8005496:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800549a:	f47f aec5 	bne.w	8005228 <__aeabi_dmul+0x19c>
 800549e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80054a2:	f47f af0d 	bne.w	80052c0 <__aeabi_dmul+0x234>
 80054a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80054aa:	f47f aeeb 	bne.w	8005284 <__aeabi_dmul+0x1f8>
 80054ae:	e712      	b.n	80052d6 <__aeabi_dmul+0x24a>

080054b0 <__aeabi_d2iz>:
 80054b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80054b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80054b8:	d215      	bcs.n	80054e6 <__aeabi_d2iz+0x36>
 80054ba:	d511      	bpl.n	80054e0 <__aeabi_d2iz+0x30>
 80054bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80054c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80054c4:	d912      	bls.n	80054ec <__aeabi_d2iz+0x3c>
 80054c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80054ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80054d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80054d6:	fa23 f002 	lsr.w	r0, r3, r2
 80054da:	bf18      	it	ne
 80054dc:	4240      	negne	r0, r0
 80054de:	4770      	bx	lr
 80054e0:	f04f 0000 	mov.w	r0, #0
 80054e4:	4770      	bx	lr
 80054e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80054ea:	d105      	bne.n	80054f8 <__aeabi_d2iz+0x48>
 80054ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80054f0:	bf08      	it	eq
 80054f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80054f6:	4770      	bx	lr
 80054f8:	f04f 0000 	mov.w	r0, #0
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <__aeabi_d2f>:
 8005500:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005504:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005508:	bf24      	itt	cs
 800550a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800550e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005512:	d90d      	bls.n	8005530 <__aeabi_d2f+0x30>
 8005514:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005518:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800551c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005520:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005524:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005528:	bf08      	it	eq
 800552a:	f020 0001 	biceq.w	r0, r0, #1
 800552e:	4770      	bx	lr
 8005530:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005534:	d121      	bne.n	800557a <__aeabi_d2f+0x7a>
 8005536:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800553a:	bfbc      	itt	lt
 800553c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005540:	4770      	bxlt	lr
 8005542:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005546:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800554a:	f1c2 0218 	rsb	r2, r2, #24
 800554e:	f1c2 0c20 	rsb	ip, r2, #32
 8005552:	fa10 f30c 	lsls.w	r3, r0, ip
 8005556:	fa20 f002 	lsr.w	r0, r0, r2
 800555a:	bf18      	it	ne
 800555c:	f040 0001 	orrne.w	r0, r0, #1
 8005560:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005564:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005568:	fa03 fc0c 	lsl.w	ip, r3, ip
 800556c:	ea40 000c 	orr.w	r0, r0, ip
 8005570:	fa23 f302 	lsr.w	r3, r3, r2
 8005574:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005578:	e7cc      	b.n	8005514 <__aeabi_d2f+0x14>
 800557a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800557e:	d107      	bne.n	8005590 <__aeabi_d2f+0x90>
 8005580:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005584:	bf1e      	ittt	ne
 8005586:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800558a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800558e:	4770      	bxne	lr
 8005590:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <__aeabi_uldivmod>:
 80055a0:	b94b      	cbnz	r3, 80055b6 <__aeabi_uldivmod+0x16>
 80055a2:	b942      	cbnz	r2, 80055b6 <__aeabi_uldivmod+0x16>
 80055a4:	2900      	cmp	r1, #0
 80055a6:	bf08      	it	eq
 80055a8:	2800      	cmpeq	r0, #0
 80055aa:	d002      	beq.n	80055b2 <__aeabi_uldivmod+0x12>
 80055ac:	f04f 31ff 	mov.w	r1, #4294967295
 80055b0:	4608      	mov	r0, r1
 80055b2:	f000 b83b 	b.w	800562c <__aeabi_idiv0>
 80055b6:	b082      	sub	sp, #8
 80055b8:	46ec      	mov	ip, sp
 80055ba:	e92d 5000 	stmdb	sp!, {ip, lr}
 80055be:	f000 f81d 	bl	80055fc <__gnu_uldivmod_helper>
 80055c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80055c6:	b002      	add	sp, #8
 80055c8:	bc0c      	pop	{r2, r3}
 80055ca:	4770      	bx	lr

080055cc <__gnu_ldivmod_helper>:
 80055cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d0:	9c06      	ldr	r4, [sp, #24]
 80055d2:	4615      	mov	r5, r2
 80055d4:	4606      	mov	r6, r0
 80055d6:	460f      	mov	r7, r1
 80055d8:	4698      	mov	r8, r3
 80055da:	f000 f829 	bl	8005630 <__divdi3>
 80055de:	fb05 f301 	mul.w	r3, r5, r1
 80055e2:	fb00 3808 	mla	r8, r0, r8, r3
 80055e6:	fba5 2300 	umull	r2, r3, r5, r0
 80055ea:	1ab2      	subs	r2, r6, r2
 80055ec:	4443      	add	r3, r8
 80055ee:	eb67 0303 	sbc.w	r3, r7, r3
 80055f2:	e9c4 2300 	strd	r2, r3, [r4]
 80055f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fa:	bf00      	nop

080055fc <__gnu_uldivmod_helper>:
 80055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005600:	9c06      	ldr	r4, [sp, #24]
 8005602:	4690      	mov	r8, r2
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	461d      	mov	r5, r3
 800560a:	f000 f95f 	bl	80058cc <__udivdi3>
 800560e:	fb00 f505 	mul.w	r5, r0, r5
 8005612:	fba0 2308 	umull	r2, r3, r0, r8
 8005616:	fb08 5501 	mla	r5, r8, r1, r5
 800561a:	1ab2      	subs	r2, r6, r2
 800561c:	442b      	add	r3, r5
 800561e:	eb67 0303 	sbc.w	r3, r7, r3
 8005622:	e9c4 2300 	strd	r2, r3, [r4]
 8005626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562a:	bf00      	nop

0800562c <__aeabi_idiv0>:
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop

08005630 <__divdi3>:
 8005630:	2900      	cmp	r1, #0
 8005632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005636:	f2c0 80a6 	blt.w	8005786 <__divdi3+0x156>
 800563a:	2600      	movs	r6, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	f2c0 809c 	blt.w	800577a <__divdi3+0x14a>
 8005642:	4688      	mov	r8, r1
 8005644:	4694      	mov	ip, r2
 8005646:	469e      	mov	lr, r3
 8005648:	4615      	mov	r5, r2
 800564a:	4604      	mov	r4, r0
 800564c:	460f      	mov	r7, r1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d13d      	bne.n	80056ce <__divdi3+0x9e>
 8005652:	428a      	cmp	r2, r1
 8005654:	d959      	bls.n	800570a <__divdi3+0xda>
 8005656:	fab2 f382 	clz	r3, r2
 800565a:	b13b      	cbz	r3, 800566c <__divdi3+0x3c>
 800565c:	f1c3 0220 	rsb	r2, r3, #32
 8005660:	409f      	lsls	r7, r3
 8005662:	fa20 f202 	lsr.w	r2, r0, r2
 8005666:	409d      	lsls	r5, r3
 8005668:	4317      	orrs	r7, r2
 800566a:	409c      	lsls	r4, r3
 800566c:	0c29      	lsrs	r1, r5, #16
 800566e:	0c22      	lsrs	r2, r4, #16
 8005670:	fbb7 fef1 	udiv	lr, r7, r1
 8005674:	b2a8      	uxth	r0, r5
 8005676:	fb01 771e 	mls	r7, r1, lr, r7
 800567a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800567e:	fb00 f30e 	mul.w	r3, r0, lr
 8005682:	42bb      	cmp	r3, r7
 8005684:	d90a      	bls.n	800569c <__divdi3+0x6c>
 8005686:	197f      	adds	r7, r7, r5
 8005688:	f10e 32ff 	add.w	r2, lr, #4294967295
 800568c:	f080 8105 	bcs.w	800589a <__divdi3+0x26a>
 8005690:	42bb      	cmp	r3, r7
 8005692:	f240 8102 	bls.w	800589a <__divdi3+0x26a>
 8005696:	f1ae 0e02 	sub.w	lr, lr, #2
 800569a:	442f      	add	r7, r5
 800569c:	1aff      	subs	r7, r7, r3
 800569e:	b2a4      	uxth	r4, r4
 80056a0:	fbb7 f3f1 	udiv	r3, r7, r1
 80056a4:	fb01 7713 	mls	r7, r1, r3, r7
 80056a8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80056ac:	fb00 f003 	mul.w	r0, r0, r3
 80056b0:	42b8      	cmp	r0, r7
 80056b2:	d908      	bls.n	80056c6 <__divdi3+0x96>
 80056b4:	197f      	adds	r7, r7, r5
 80056b6:	f103 32ff 	add.w	r2, r3, #4294967295
 80056ba:	f080 80f0 	bcs.w	800589e <__divdi3+0x26e>
 80056be:	42b8      	cmp	r0, r7
 80056c0:	f240 80ed 	bls.w	800589e <__divdi3+0x26e>
 80056c4:	3b02      	subs	r3, #2
 80056c6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80056ca:	2200      	movs	r2, #0
 80056cc:	e003      	b.n	80056d6 <__divdi3+0xa6>
 80056ce:	428b      	cmp	r3, r1
 80056d0:	d90f      	bls.n	80056f2 <__divdi3+0xc2>
 80056d2:	2200      	movs	r2, #0
 80056d4:	4613      	mov	r3, r2
 80056d6:	1c34      	adds	r4, r6, #0
 80056d8:	bf18      	it	ne
 80056da:	2401      	movne	r4, #1
 80056dc:	4260      	negs	r0, r4
 80056de:	f04f 0500 	mov.w	r5, #0
 80056e2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80056e6:	4058      	eors	r0, r3
 80056e8:	4051      	eors	r1, r2
 80056ea:	1900      	adds	r0, r0, r4
 80056ec:	4169      	adcs	r1, r5
 80056ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056f2:	fab3 f283 	clz	r2, r3
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	f040 8086 	bne.w	8005808 <__divdi3+0x1d8>
 80056fc:	428b      	cmp	r3, r1
 80056fe:	d302      	bcc.n	8005706 <__divdi3+0xd6>
 8005700:	4584      	cmp	ip, r0
 8005702:	f200 80db 	bhi.w	80058bc <__divdi3+0x28c>
 8005706:	2301      	movs	r3, #1
 8005708:	e7e5      	b.n	80056d6 <__divdi3+0xa6>
 800570a:	b912      	cbnz	r2, 8005712 <__divdi3+0xe2>
 800570c:	2301      	movs	r3, #1
 800570e:	fbb3 f5f2 	udiv	r5, r3, r2
 8005712:	fab5 f085 	clz	r0, r5
 8005716:	2800      	cmp	r0, #0
 8005718:	d13b      	bne.n	8005792 <__divdi3+0x162>
 800571a:	1b78      	subs	r0, r7, r5
 800571c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005720:	fa1f fc85 	uxth.w	ip, r5
 8005724:	2201      	movs	r2, #1
 8005726:	fbb0 f8fe 	udiv	r8, r0, lr
 800572a:	0c21      	lsrs	r1, r4, #16
 800572c:	fb0e 0718 	mls	r7, lr, r8, r0
 8005730:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8005734:	fb0c f308 	mul.w	r3, ip, r8
 8005738:	42bb      	cmp	r3, r7
 800573a:	d907      	bls.n	800574c <__divdi3+0x11c>
 800573c:	197f      	adds	r7, r7, r5
 800573e:	f108 31ff 	add.w	r1, r8, #4294967295
 8005742:	d202      	bcs.n	800574a <__divdi3+0x11a>
 8005744:	42bb      	cmp	r3, r7
 8005746:	f200 80bd 	bhi.w	80058c4 <__divdi3+0x294>
 800574a:	4688      	mov	r8, r1
 800574c:	1aff      	subs	r7, r7, r3
 800574e:	b2a4      	uxth	r4, r4
 8005750:	fbb7 f3fe 	udiv	r3, r7, lr
 8005754:	fb0e 7713 	mls	r7, lr, r3, r7
 8005758:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800575c:	fb0c fc03 	mul.w	ip, ip, r3
 8005760:	45bc      	cmp	ip, r7
 8005762:	d907      	bls.n	8005774 <__divdi3+0x144>
 8005764:	197f      	adds	r7, r7, r5
 8005766:	f103 31ff 	add.w	r1, r3, #4294967295
 800576a:	d202      	bcs.n	8005772 <__divdi3+0x142>
 800576c:	45bc      	cmp	ip, r7
 800576e:	f200 80a7 	bhi.w	80058c0 <__divdi3+0x290>
 8005772:	460b      	mov	r3, r1
 8005774:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005778:	e7ad      	b.n	80056d6 <__divdi3+0xa6>
 800577a:	4252      	negs	r2, r2
 800577c:	ea6f 0606 	mvn.w	r6, r6
 8005780:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005784:	e75d      	b.n	8005642 <__divdi3+0x12>
 8005786:	4240      	negs	r0, r0
 8005788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800578c:	f04f 36ff 	mov.w	r6, #4294967295
 8005790:	e754      	b.n	800563c <__divdi3+0xc>
 8005792:	f1c0 0220 	rsb	r2, r0, #32
 8005796:	fa24 f102 	lsr.w	r1, r4, r2
 800579a:	fa07 f300 	lsl.w	r3, r7, r0
 800579e:	4085      	lsls	r5, r0
 80057a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80057a4:	40d7      	lsrs	r7, r2
 80057a6:	4319      	orrs	r1, r3
 80057a8:	fbb7 f2fe 	udiv	r2, r7, lr
 80057ac:	0c0b      	lsrs	r3, r1, #16
 80057ae:	fb0e 7712 	mls	r7, lr, r2, r7
 80057b2:	fa1f fc85 	uxth.w	ip, r5
 80057b6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057ba:	fb0c f702 	mul.w	r7, ip, r2
 80057be:	429f      	cmp	r7, r3
 80057c0:	fa04 f400 	lsl.w	r4, r4, r0
 80057c4:	d907      	bls.n	80057d6 <__divdi3+0x1a6>
 80057c6:	195b      	adds	r3, r3, r5
 80057c8:	f102 30ff 	add.w	r0, r2, #4294967295
 80057cc:	d274      	bcs.n	80058b8 <__divdi3+0x288>
 80057ce:	429f      	cmp	r7, r3
 80057d0:	d972      	bls.n	80058b8 <__divdi3+0x288>
 80057d2:	3a02      	subs	r2, #2
 80057d4:	442b      	add	r3, r5
 80057d6:	1bdf      	subs	r7, r3, r7
 80057d8:	b289      	uxth	r1, r1
 80057da:	fbb7 f8fe 	udiv	r8, r7, lr
 80057de:	fb0e 7318 	mls	r3, lr, r8, r7
 80057e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80057e6:	fb0c f708 	mul.w	r7, ip, r8
 80057ea:	429f      	cmp	r7, r3
 80057ec:	d908      	bls.n	8005800 <__divdi3+0x1d0>
 80057ee:	195b      	adds	r3, r3, r5
 80057f0:	f108 31ff 	add.w	r1, r8, #4294967295
 80057f4:	d25c      	bcs.n	80058b0 <__divdi3+0x280>
 80057f6:	429f      	cmp	r7, r3
 80057f8:	d95a      	bls.n	80058b0 <__divdi3+0x280>
 80057fa:	f1a8 0802 	sub.w	r8, r8, #2
 80057fe:	442b      	add	r3, r5
 8005800:	1bd8      	subs	r0, r3, r7
 8005802:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8005806:	e78e      	b.n	8005726 <__divdi3+0xf6>
 8005808:	f1c2 0320 	rsb	r3, r2, #32
 800580c:	fa2c f103 	lsr.w	r1, ip, r3
 8005810:	fa0e fe02 	lsl.w	lr, lr, r2
 8005814:	fa20 f703 	lsr.w	r7, r0, r3
 8005818:	ea41 0e0e 	orr.w	lr, r1, lr
 800581c:	fa08 f002 	lsl.w	r0, r8, r2
 8005820:	fa28 f103 	lsr.w	r1, r8, r3
 8005824:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8005828:	4338      	orrs	r0, r7
 800582a:	fbb1 f8f5 	udiv	r8, r1, r5
 800582e:	0c03      	lsrs	r3, r0, #16
 8005830:	fb05 1118 	mls	r1, r5, r8, r1
 8005834:	fa1f f78e 	uxth.w	r7, lr
 8005838:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800583c:	fb07 f308 	mul.w	r3, r7, r8
 8005840:	428b      	cmp	r3, r1
 8005842:	fa0c fc02 	lsl.w	ip, ip, r2
 8005846:	d909      	bls.n	800585c <__divdi3+0x22c>
 8005848:	eb11 010e 	adds.w	r1, r1, lr
 800584c:	f108 39ff 	add.w	r9, r8, #4294967295
 8005850:	d230      	bcs.n	80058b4 <__divdi3+0x284>
 8005852:	428b      	cmp	r3, r1
 8005854:	d92e      	bls.n	80058b4 <__divdi3+0x284>
 8005856:	f1a8 0802 	sub.w	r8, r8, #2
 800585a:	4471      	add	r1, lr
 800585c:	1ac9      	subs	r1, r1, r3
 800585e:	b280      	uxth	r0, r0
 8005860:	fbb1 f3f5 	udiv	r3, r1, r5
 8005864:	fb05 1113 	mls	r1, r5, r3, r1
 8005868:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800586c:	fb07 f703 	mul.w	r7, r7, r3
 8005870:	428f      	cmp	r7, r1
 8005872:	d908      	bls.n	8005886 <__divdi3+0x256>
 8005874:	eb11 010e 	adds.w	r1, r1, lr
 8005878:	f103 30ff 	add.w	r0, r3, #4294967295
 800587c:	d216      	bcs.n	80058ac <__divdi3+0x27c>
 800587e:	428f      	cmp	r7, r1
 8005880:	d914      	bls.n	80058ac <__divdi3+0x27c>
 8005882:	3b02      	subs	r3, #2
 8005884:	4471      	add	r1, lr
 8005886:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800588a:	1bc9      	subs	r1, r1, r7
 800588c:	fba3 890c 	umull	r8, r9, r3, ip
 8005890:	4549      	cmp	r1, r9
 8005892:	d309      	bcc.n	80058a8 <__divdi3+0x278>
 8005894:	d005      	beq.n	80058a2 <__divdi3+0x272>
 8005896:	2200      	movs	r2, #0
 8005898:	e71d      	b.n	80056d6 <__divdi3+0xa6>
 800589a:	4696      	mov	lr, r2
 800589c:	e6fe      	b.n	800569c <__divdi3+0x6c>
 800589e:	4613      	mov	r3, r2
 80058a0:	e711      	b.n	80056c6 <__divdi3+0x96>
 80058a2:	4094      	lsls	r4, r2
 80058a4:	4544      	cmp	r4, r8
 80058a6:	d2f6      	bcs.n	8005896 <__divdi3+0x266>
 80058a8:	3b01      	subs	r3, #1
 80058aa:	e7f4      	b.n	8005896 <__divdi3+0x266>
 80058ac:	4603      	mov	r3, r0
 80058ae:	e7ea      	b.n	8005886 <__divdi3+0x256>
 80058b0:	4688      	mov	r8, r1
 80058b2:	e7a5      	b.n	8005800 <__divdi3+0x1d0>
 80058b4:	46c8      	mov	r8, r9
 80058b6:	e7d1      	b.n	800585c <__divdi3+0x22c>
 80058b8:	4602      	mov	r2, r0
 80058ba:	e78c      	b.n	80057d6 <__divdi3+0x1a6>
 80058bc:	4613      	mov	r3, r2
 80058be:	e70a      	b.n	80056d6 <__divdi3+0xa6>
 80058c0:	3b02      	subs	r3, #2
 80058c2:	e757      	b.n	8005774 <__divdi3+0x144>
 80058c4:	f1a8 0802 	sub.w	r8, r8, #2
 80058c8:	442f      	add	r7, r5
 80058ca:	e73f      	b.n	800574c <__divdi3+0x11c>

080058cc <__udivdi3>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d144      	bne.n	800595e <__udivdi3+0x92>
 80058d4:	428a      	cmp	r2, r1
 80058d6:	4615      	mov	r5, r2
 80058d8:	4604      	mov	r4, r0
 80058da:	d94f      	bls.n	800597c <__udivdi3+0xb0>
 80058dc:	fab2 f782 	clz	r7, r2
 80058e0:	460e      	mov	r6, r1
 80058e2:	b14f      	cbz	r7, 80058f8 <__udivdi3+0x2c>
 80058e4:	f1c7 0320 	rsb	r3, r7, #32
 80058e8:	40b9      	lsls	r1, r7
 80058ea:	fa20 f603 	lsr.w	r6, r0, r3
 80058ee:	fa02 f507 	lsl.w	r5, r2, r7
 80058f2:	430e      	orrs	r6, r1
 80058f4:	fa00 f407 	lsl.w	r4, r0, r7
 80058f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80058fc:	0c23      	lsrs	r3, r4, #16
 80058fe:	fbb6 f0fe 	udiv	r0, r6, lr
 8005902:	b2af      	uxth	r7, r5
 8005904:	fb0e 6110 	mls	r1, lr, r0, r6
 8005908:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800590c:	fb07 f100 	mul.w	r1, r7, r0
 8005910:	4299      	cmp	r1, r3
 8005912:	d909      	bls.n	8005928 <__udivdi3+0x5c>
 8005914:	195b      	adds	r3, r3, r5
 8005916:	f100 32ff 	add.w	r2, r0, #4294967295
 800591a:	f080 80ec 	bcs.w	8005af6 <__udivdi3+0x22a>
 800591e:	4299      	cmp	r1, r3
 8005920:	f240 80e9 	bls.w	8005af6 <__udivdi3+0x22a>
 8005924:	3802      	subs	r0, #2
 8005926:	442b      	add	r3, r5
 8005928:	1a5a      	subs	r2, r3, r1
 800592a:	b2a4      	uxth	r4, r4
 800592c:	fbb2 f3fe 	udiv	r3, r2, lr
 8005930:	fb0e 2213 	mls	r2, lr, r3, r2
 8005934:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8005938:	fb07 f703 	mul.w	r7, r7, r3
 800593c:	4297      	cmp	r7, r2
 800593e:	d908      	bls.n	8005952 <__udivdi3+0x86>
 8005940:	1952      	adds	r2, r2, r5
 8005942:	f103 31ff 	add.w	r1, r3, #4294967295
 8005946:	f080 80d8 	bcs.w	8005afa <__udivdi3+0x22e>
 800594a:	4297      	cmp	r7, r2
 800594c:	f240 80d5 	bls.w	8005afa <__udivdi3+0x22e>
 8005950:	3b02      	subs	r3, #2
 8005952:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005956:	2600      	movs	r6, #0
 8005958:	4631      	mov	r1, r6
 800595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800595e:	428b      	cmp	r3, r1
 8005960:	d847      	bhi.n	80059f2 <__udivdi3+0x126>
 8005962:	fab3 f683 	clz	r6, r3
 8005966:	2e00      	cmp	r6, #0
 8005968:	d148      	bne.n	80059fc <__udivdi3+0x130>
 800596a:	428b      	cmp	r3, r1
 800596c:	d302      	bcc.n	8005974 <__udivdi3+0xa8>
 800596e:	4282      	cmp	r2, r0
 8005970:	f200 80cd 	bhi.w	8005b0e <__udivdi3+0x242>
 8005974:	2001      	movs	r0, #1
 8005976:	4631      	mov	r1, r6
 8005978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800597c:	b912      	cbnz	r2, 8005984 <__udivdi3+0xb8>
 800597e:	2501      	movs	r5, #1
 8005980:	fbb5 f5f2 	udiv	r5, r5, r2
 8005984:	fab5 f885 	clz	r8, r5
 8005988:	f1b8 0f00 	cmp.w	r8, #0
 800598c:	d177      	bne.n	8005a7e <__udivdi3+0x1b2>
 800598e:	1b4a      	subs	r2, r1, r5
 8005990:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005994:	b2af      	uxth	r7, r5
 8005996:	2601      	movs	r6, #1
 8005998:	fbb2 f0fe 	udiv	r0, r2, lr
 800599c:	0c23      	lsrs	r3, r4, #16
 800599e:	fb0e 2110 	mls	r1, lr, r0, r2
 80059a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80059a6:	fb07 f300 	mul.w	r3, r7, r0
 80059aa:	428b      	cmp	r3, r1
 80059ac:	d907      	bls.n	80059be <__udivdi3+0xf2>
 80059ae:	1949      	adds	r1, r1, r5
 80059b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80059b4:	d202      	bcs.n	80059bc <__udivdi3+0xf0>
 80059b6:	428b      	cmp	r3, r1
 80059b8:	f200 80ba 	bhi.w	8005b30 <__udivdi3+0x264>
 80059bc:	4610      	mov	r0, r2
 80059be:	1ac9      	subs	r1, r1, r3
 80059c0:	b2a4      	uxth	r4, r4
 80059c2:	fbb1 f3fe 	udiv	r3, r1, lr
 80059c6:	fb0e 1113 	mls	r1, lr, r3, r1
 80059ca:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80059ce:	fb07 f703 	mul.w	r7, r7, r3
 80059d2:	42a7      	cmp	r7, r4
 80059d4:	d908      	bls.n	80059e8 <__udivdi3+0x11c>
 80059d6:	1964      	adds	r4, r4, r5
 80059d8:	f103 32ff 	add.w	r2, r3, #4294967295
 80059dc:	f080 808f 	bcs.w	8005afe <__udivdi3+0x232>
 80059e0:	42a7      	cmp	r7, r4
 80059e2:	f240 808c 	bls.w	8005afe <__udivdi3+0x232>
 80059e6:	3b02      	subs	r3, #2
 80059e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80059ec:	4631      	mov	r1, r6
 80059ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f2:	2600      	movs	r6, #0
 80059f4:	4630      	mov	r0, r6
 80059f6:	4631      	mov	r1, r6
 80059f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059fc:	f1c6 0420 	rsb	r4, r6, #32
 8005a00:	fa22 f504 	lsr.w	r5, r2, r4
 8005a04:	40b3      	lsls	r3, r6
 8005a06:	432b      	orrs	r3, r5
 8005a08:	fa20 fc04 	lsr.w	ip, r0, r4
 8005a0c:	fa01 f706 	lsl.w	r7, r1, r6
 8005a10:	fa21 f504 	lsr.w	r5, r1, r4
 8005a14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a18:	ea4c 0707 	orr.w	r7, ip, r7
 8005a1c:	fbb5 f8fe 	udiv	r8, r5, lr
 8005a20:	0c39      	lsrs	r1, r7, #16
 8005a22:	fb0e 5518 	mls	r5, lr, r8, r5
 8005a26:	fa1f fc83 	uxth.w	ip, r3
 8005a2a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8005a2e:	fb0c f108 	mul.w	r1, ip, r8
 8005a32:	42a9      	cmp	r1, r5
 8005a34:	fa02 f206 	lsl.w	r2, r2, r6
 8005a38:	d904      	bls.n	8005a44 <__udivdi3+0x178>
 8005a3a:	18ed      	adds	r5, r5, r3
 8005a3c:	f108 34ff 	add.w	r4, r8, #4294967295
 8005a40:	d367      	bcc.n	8005b12 <__udivdi3+0x246>
 8005a42:	46a0      	mov	r8, r4
 8005a44:	1a6d      	subs	r5, r5, r1
 8005a46:	b2bf      	uxth	r7, r7
 8005a48:	fbb5 f4fe 	udiv	r4, r5, lr
 8005a4c:	fb0e 5514 	mls	r5, lr, r4, r5
 8005a50:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8005a54:	fb0c fc04 	mul.w	ip, ip, r4
 8005a58:	458c      	cmp	ip, r1
 8005a5a:	d904      	bls.n	8005a66 <__udivdi3+0x19a>
 8005a5c:	18c9      	adds	r1, r1, r3
 8005a5e:	f104 35ff 	add.w	r5, r4, #4294967295
 8005a62:	d35c      	bcc.n	8005b1e <__udivdi3+0x252>
 8005a64:	462c      	mov	r4, r5
 8005a66:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8005a6a:	ebcc 0101 	rsb	r1, ip, r1
 8005a6e:	fba4 2302 	umull	r2, r3, r4, r2
 8005a72:	4299      	cmp	r1, r3
 8005a74:	d348      	bcc.n	8005b08 <__udivdi3+0x23c>
 8005a76:	d044      	beq.n	8005b02 <__udivdi3+0x236>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	e76c      	b.n	8005958 <__udivdi3+0x8c>
 8005a7e:	f1c8 0420 	rsb	r4, r8, #32
 8005a82:	fa01 f308 	lsl.w	r3, r1, r8
 8005a86:	fa05 f508 	lsl.w	r5, r5, r8
 8005a8a:	fa20 f704 	lsr.w	r7, r0, r4
 8005a8e:	40e1      	lsrs	r1, r4
 8005a90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005a94:	431f      	orrs	r7, r3
 8005a96:	fbb1 f6fe 	udiv	r6, r1, lr
 8005a9a:	0c3a      	lsrs	r2, r7, #16
 8005a9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8005aa0:	fa1f fc85 	uxth.w	ip, r5
 8005aa4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8005aa8:	fb0c f206 	mul.w	r2, ip, r6
 8005aac:	429a      	cmp	r2, r3
 8005aae:	fa00 f408 	lsl.w	r4, r0, r8
 8005ab2:	d907      	bls.n	8005ac4 <__udivdi3+0x1f8>
 8005ab4:	195b      	adds	r3, r3, r5
 8005ab6:	f106 31ff 	add.w	r1, r6, #4294967295
 8005aba:	d237      	bcs.n	8005b2c <__udivdi3+0x260>
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d935      	bls.n	8005b2c <__udivdi3+0x260>
 8005ac0:	3e02      	subs	r6, #2
 8005ac2:	442b      	add	r3, r5
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	b2bf      	uxth	r7, r7
 8005ac8:	fbb3 f0fe 	udiv	r0, r3, lr
 8005acc:	fb0e 3310 	mls	r3, lr, r0, r3
 8005ad0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005ad4:	fb0c f100 	mul.w	r1, ip, r0
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d907      	bls.n	8005aec <__udivdi3+0x220>
 8005adc:	195b      	adds	r3, r3, r5
 8005ade:	f100 32ff 	add.w	r2, r0, #4294967295
 8005ae2:	d221      	bcs.n	8005b28 <__udivdi3+0x25c>
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	d91f      	bls.n	8005b28 <__udivdi3+0x25c>
 8005ae8:	3802      	subs	r0, #2
 8005aea:	442b      	add	r3, r5
 8005aec:	1a5a      	subs	r2, r3, r1
 8005aee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8005af2:	4667      	mov	r7, ip
 8005af4:	e750      	b.n	8005998 <__udivdi3+0xcc>
 8005af6:	4610      	mov	r0, r2
 8005af8:	e716      	b.n	8005928 <__udivdi3+0x5c>
 8005afa:	460b      	mov	r3, r1
 8005afc:	e729      	b.n	8005952 <__udivdi3+0x86>
 8005afe:	4613      	mov	r3, r2
 8005b00:	e772      	b.n	80059e8 <__udivdi3+0x11c>
 8005b02:	40b0      	lsls	r0, r6
 8005b04:	4290      	cmp	r0, r2
 8005b06:	d2b7      	bcs.n	8005a78 <__udivdi3+0x1ac>
 8005b08:	1e60      	subs	r0, r4, #1
 8005b0a:	2600      	movs	r6, #0
 8005b0c:	e724      	b.n	8005958 <__udivdi3+0x8c>
 8005b0e:	4630      	mov	r0, r6
 8005b10:	e722      	b.n	8005958 <__udivdi3+0x8c>
 8005b12:	42a9      	cmp	r1, r5
 8005b14:	d995      	bls.n	8005a42 <__udivdi3+0x176>
 8005b16:	f1a8 0802 	sub.w	r8, r8, #2
 8005b1a:	441d      	add	r5, r3
 8005b1c:	e792      	b.n	8005a44 <__udivdi3+0x178>
 8005b1e:	458c      	cmp	ip, r1
 8005b20:	d9a0      	bls.n	8005a64 <__udivdi3+0x198>
 8005b22:	3c02      	subs	r4, #2
 8005b24:	4419      	add	r1, r3
 8005b26:	e79e      	b.n	8005a66 <__udivdi3+0x19a>
 8005b28:	4610      	mov	r0, r2
 8005b2a:	e7df      	b.n	8005aec <__udivdi3+0x220>
 8005b2c:	460e      	mov	r6, r1
 8005b2e:	e7c9      	b.n	8005ac4 <__udivdi3+0x1f8>
 8005b30:	3802      	subs	r0, #2
 8005b32:	4429      	add	r1, r5
 8005b34:	e743      	b.n	80059be <__udivdi3+0xf2>
 8005b36:	bf00      	nop

08005b38 <__errno>:
 8005b38:	4b01      	ldr	r3, [pc, #4]	; (8005b40 <__errno+0x8>)
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	1ffe8a90 	.word	0x1ffe8a90

08005b44 <__libc_init_array>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <__libc_init_array+0x3c>)
 8005b48:	4c0e      	ldr	r4, [pc, #56]	; (8005b84 <__libc_init_array+0x40>)
 8005b4a:	1ae4      	subs	r4, r4, r3
 8005b4c:	10a4      	asrs	r4, r4, #2
 8005b4e:	2500      	movs	r5, #0
 8005b50:	461e      	mov	r6, r3
 8005b52:	42a5      	cmp	r5, r4
 8005b54:	d004      	beq.n	8005b60 <__libc_init_array+0x1c>
 8005b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b5a:	4798      	blx	r3
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7f8      	b.n	8005b52 <__libc_init_array+0xe>
 8005b60:	f7fc fb2a 	bl	80021b8 <_init>
 8005b64:	4c08      	ldr	r4, [pc, #32]	; (8005b88 <__libc_init_array+0x44>)
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <__libc_init_array+0x48>)
 8005b68:	1ae4      	subs	r4, r4, r3
 8005b6a:	10a4      	asrs	r4, r4, #2
 8005b6c:	2500      	movs	r5, #0
 8005b6e:	461e      	mov	r6, r3
 8005b70:	42a5      	cmp	r5, r4
 8005b72:	d004      	beq.n	8005b7e <__libc_init_array+0x3a>
 8005b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b78:	4798      	blx	r3
 8005b7a:	3501      	adds	r5, #1
 8005b7c:	e7f8      	b.n	8005b70 <__libc_init_array+0x2c>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	1ffe8acc 	.word	0x1ffe8acc
 8005b84:	1ffe8acc 	.word	0x1ffe8acc
 8005b88:	1ffe8acc 	.word	0x1ffe8acc
 8005b8c:	1ffe8acc 	.word	0x1ffe8acc

08005b90 <memcpy>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	1e43      	subs	r3, r0, #1
 8005b94:	440a      	add	r2, r1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	d004      	beq.n	8005ba4 <memcpy+0x14>
 8005b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ba2:	e7f8      	b.n	8005b96 <memcpy+0x6>
 8005ba4:	bd10      	pop	{r4, pc}

08005ba6 <memset>:
 8005ba6:	4402      	add	r2, r0
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d002      	beq.n	8005bb4 <memset+0xe>
 8005bae:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb2:	e7fa      	b.n	8005baa <memset+0x4>
 8005bb4:	4770      	bx	lr

08005bb6 <__cvt>:
 8005bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005bc0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005bc2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005bc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005bc8:	461d      	mov	r5, r3
 8005bca:	bfb8      	it	lt
 8005bcc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bd0:	f027 0720 	bic.w	r7, r7, #32
 8005bd4:	bfb6      	itet	lt
 8005bd6:	461d      	movlt	r5, r3
 8005bd8:	2300      	movge	r3, #0
 8005bda:	232d      	movlt	r3, #45	; 0x2d
 8005bdc:	4614      	mov	r4, r2
 8005bde:	bfb8      	it	lt
 8005be0:	4614      	movlt	r4, r2
 8005be2:	2f46      	cmp	r7, #70	; 0x46
 8005be4:	700b      	strb	r3, [r1, #0]
 8005be6:	d003      	beq.n	8005bf0 <__cvt+0x3a>
 8005be8:	2f45      	cmp	r7, #69	; 0x45
 8005bea:	d103      	bne.n	8005bf4 <__cvt+0x3e>
 8005bec:	3601      	adds	r6, #1
 8005bee:	e001      	b.n	8005bf4 <__cvt+0x3e>
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e000      	b.n	8005bf6 <__cvt+0x40>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 8005bfa:	ab06      	add	r3, sp, #24
 8005bfc:	9303      	str	r3, [sp, #12]
 8005bfe:	ab07      	add	r3, sp, #28
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	f000 fbe3 	bl	80063d0 <_dtoa_r>
 8005c0a:	2f47      	cmp	r7, #71	; 0x47
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	d102      	bne.n	8005c16 <__cvt+0x60>
 8005c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c12:	07db      	lsls	r3, r3, #31
 8005c14:	d526      	bpl.n	8005c64 <__cvt+0xae>
 8005c16:	2f46      	cmp	r7, #70	; 0x46
 8005c18:	eb08 0906 	add.w	r9, r8, r6
 8005c1c:	d111      	bne.n	8005c42 <__cvt+0x8c>
 8005c1e:	f898 3000 	ldrb.w	r3, [r8]
 8005c22:	2b30      	cmp	r3, #48	; 0x30
 8005c24:	d10a      	bne.n	8005c3c <__cvt+0x86>
 8005c26:	4620      	mov	r0, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f001 fd49 	bl	80076c4 <__aeabi_dcmpeq>
 8005c32:	b918      	cbnz	r0, 8005c3c <__cvt+0x86>
 8005c34:	f1c6 0601 	rsb	r6, r6, #1
 8005c38:	f8ca 6000 	str.w	r6, [sl]
 8005c3c:	f8da 3000 	ldr.w	r3, [sl]
 8005c40:	4499      	add	r9, r3
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f001 fd3b 	bl	80076c4 <__aeabi_dcmpeq>
 8005c4e:	b108      	cbz	r0, 8005c54 <__cvt+0x9e>
 8005c50:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c54:	9b07      	ldr	r3, [sp, #28]
 8005c56:	454b      	cmp	r3, r9
 8005c58:	d204      	bcs.n	8005c64 <__cvt+0xae>
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	9207      	str	r2, [sp, #28]
 8005c5e:	2230      	movs	r2, #48	; 0x30
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e7f7      	b.n	8005c54 <__cvt+0x9e>
 8005c64:	9b07      	ldr	r3, [sp, #28]
 8005c66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c68:	ebc8 0303 	rsb	r3, r8, r3
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	b008      	add	sp, #32
 8005c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c76 <__exponent>:
 8005c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2900      	cmp	r1, #0
 8005c7c:	bfb8      	it	lt
 8005c7e:	4249      	neglt	r1, r1
 8005c80:	f803 2b02 	strb.w	r2, [r3], #2
 8005c84:	bfb4      	ite	lt
 8005c86:	222d      	movlt	r2, #45	; 0x2d
 8005c88:	222b      	movge	r2, #43	; 0x2b
 8005c8a:	2909      	cmp	r1, #9
 8005c8c:	7042      	strb	r2, [r0, #1]
 8005c8e:	dd19      	ble.n	8005cc4 <__exponent+0x4e>
 8005c90:	f10d 0407 	add.w	r4, sp, #7
 8005c94:	4626      	mov	r6, r4
 8005c96:	220a      	movs	r2, #10
 8005c98:	fb91 f5f2 	sdiv	r5, r1, r2
 8005c9c:	fb02 1115 	mls	r1, r2, r5, r1
 8005ca0:	3130      	adds	r1, #48	; 0x30
 8005ca2:	2d09      	cmp	r5, #9
 8005ca4:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005ca8:	4629      	mov	r1, r5
 8005caa:	dcf4      	bgt.n	8005c96 <__exponent+0x20>
 8005cac:	3130      	adds	r1, #48	; 0x30
 8005cae:	1e65      	subs	r5, r4, #1
 8005cb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cb4:	42b5      	cmp	r5, r6
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	d20a      	bcs.n	8005cd0 <__exponent+0x5a>
 8005cba:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005cbe:	f803 2b01 	strb.w	r2, [r3], #1
 8005cc2:	e7f7      	b.n	8005cb4 <__exponent+0x3e>
 8005cc4:	2430      	movs	r4, #48	; 0x30
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4421      	add	r1, r4
 8005cca:	f802 4b02 	strb.w	r4, [r2], #2
 8005cce:	7059      	strb	r1, [r3, #1]
 8005cd0:	1a10      	subs	r0, r2, r0
 8005cd2:	b002      	add	sp, #8
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cd8 <_printf_float>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	b091      	sub	sp, #68	; 0x44
 8005cde:	468b      	mov	fp, r1
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	461e      	mov	r6, r3
 8005ce4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	f001 f936 	bl	8006f58 <_localeconv_r>
 8005cec:	f8d0 a000 	ldr.w	sl, [r0]
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	f000 fad5 	bl	80062a0 <strlen>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	9009      	str	r0, [sp, #36]	; 0x24
 8005cfe:	3307      	adds	r3, #7
 8005d00:	f023 0307 	bic.w	r3, r3, #7
 8005d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d08:	f103 0208 	add.w	r2, r3, #8
 8005d0c:	f89b 8018 	ldrb.w	r8, [fp, #24]
 8005d10:	603a      	str	r2, [r7, #0]
 8005d12:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8005d16:	f000 fa99 	bl	800624c <__fpclassifyd>
 8005d1a:	2801      	cmp	r0, #1
 8005d1c:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005d20:	d119      	bne.n	8005d56 <_printf_float+0x7e>
 8005d22:	2200      	movs	r2, #0
 8005d24:	2300      	movs	r3, #0
 8005d26:	f001 fcd7 	bl	80076d8 <__aeabi_dcmplt>
 8005d2a:	b110      	cbz	r0, 8005d32 <_printf_float+0x5a>
 8005d2c:	232d      	movs	r3, #45	; 0x2d
 8005d2e:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8005d32:	4ba0      	ldr	r3, [pc, #640]	; (8005fb4 <_printf_float+0x2dc>)
 8005d34:	4fa0      	ldr	r7, [pc, #640]	; (8005fb8 <_printf_float+0x2e0>)
 8005d36:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d3a:	bf88      	it	hi
 8005d3c:	461f      	movhi	r7, r3
 8005d3e:	2303      	movs	r3, #3
 8005d40:	f8cb 3010 	str.w	r3, [fp, #16]
 8005d44:	f8db 3000 	ldr.w	r3, [fp]
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	f8cb 3000 	str.w	r3, [fp]
 8005d50:	f04f 0900 	mov.w	r9, #0
 8005d54:	e0a1      	b.n	8005e9a <_printf_float+0x1c2>
 8005d56:	f000 fa79 	bl	800624c <__fpclassifyd>
 8005d5a:	f8db 3000 	ldr.w	r3, [fp]
 8005d5e:	b948      	cbnz	r0, 8005d74 <_printf_float+0x9c>
 8005d60:	4a96      	ldr	r2, [pc, #600]	; (8005fbc <_printf_float+0x2e4>)
 8005d62:	4f97      	ldr	r7, [pc, #604]	; (8005fc0 <_printf_float+0x2e8>)
 8005d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d68:	bf88      	it	hi
 8005d6a:	4617      	movhi	r7, r2
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	f8cb 2010 	str.w	r2, [fp, #16]
 8005d72:	e7e9      	b.n	8005d48 <_printf_float+0x70>
 8005d74:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005d78:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 8005d7c:	1c57      	adds	r7, r2, #1
 8005d7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005d82:	d101      	bne.n	8005d88 <_printf_float+0xb0>
 8005d84:	2206      	movs	r2, #6
 8005d86:	e009      	b.n	8005d9c <_printf_float+0xc4>
 8005d88:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005d8c:	d002      	beq.n	8005d94 <_printf_float+0xbc>
 8005d8e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d92:	d105      	bne.n	8005da0 <_printf_float+0xc8>
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	f040 81c7 	bne.w	8006128 <_printf_float+0x450>
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f8cb 2004 	str.w	r2, [fp, #4]
 8005da0:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005da4:	f8cd 8010 	str.w	r8, [sp, #16]
 8005da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dac:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005db0:	f8cb 3000 	str.w	r3, [fp]
 8005db4:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	ab0d      	add	r3, sp, #52	; 0x34
 8005dbc:	9303      	str	r3, [sp, #12]
 8005dbe:	ab0e      	add	r3, sp, #56	; 0x38
 8005dc0:	9305      	str	r3, [sp, #20]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	9306      	str	r3, [sp, #24]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005dcc:	f7ff fef3 	bl	8005bb6 <__cvt>
 8005dd0:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005dd4:	2b47      	cmp	r3, #71	; 0x47
 8005dd6:	4607      	mov	r7, r0
 8005dd8:	d10a      	bne.n	8005df0 <_printf_float+0x118>
 8005dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ddc:	1cd8      	adds	r0, r3, #3
 8005dde:	db03      	blt.n	8005de8 <_printf_float+0x110>
 8005de0:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005de4:	4293      	cmp	r3, r2
 8005de6:	dd37      	ble.n	8005e58 <_printf_float+0x180>
 8005de8:	f1a8 0802 	sub.w	r8, r8, #2
 8005dec:	fa5f f888 	uxtb.w	r8, r8
 8005df0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005df4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005df6:	d815      	bhi.n	8005e24 <_printf_float+0x14c>
 8005df8:	3901      	subs	r1, #1
 8005dfa:	4642      	mov	r2, r8
 8005dfc:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8005e00:	910d      	str	r1, [sp, #52]	; 0x34
 8005e02:	f7ff ff38 	bl	8005c76 <__exponent>
 8005e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e08:	1883      	adds	r3, r0, r2
 8005e0a:	2a01      	cmp	r2, #1
 8005e0c:	4681      	mov	r9, r0
 8005e0e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005e12:	dc03      	bgt.n	8005e1c <_printf_float+0x144>
 8005e14:	f8db 2000 	ldr.w	r2, [fp]
 8005e18:	07d1      	lsls	r1, r2, #31
 8005e1a:	d538      	bpl.n	8005e8e <_printf_float+0x1b6>
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005e22:	e034      	b.n	8005e8e <_printf_float+0x1b6>
 8005e24:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005e28:	d118      	bne.n	8005e5c <_printf_float+0x184>
 8005e2a:	2900      	cmp	r1, #0
 8005e2c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005e30:	dd09      	ble.n	8005e46 <_printf_float+0x16e>
 8005e32:	f8cb 1010 	str.w	r1, [fp, #16]
 8005e36:	b91b      	cbnz	r3, 8005e40 <_printf_float+0x168>
 8005e38:	f8db 2000 	ldr.w	r2, [fp]
 8005e3c:	07d2      	lsls	r2, r2, #31
 8005e3e:	d521      	bpl.n	8005e84 <_printf_float+0x1ac>
 8005e40:	3301      	adds	r3, #1
 8005e42:	440b      	add	r3, r1
 8005e44:	e01c      	b.n	8005e80 <_printf_float+0x1a8>
 8005e46:	b91b      	cbnz	r3, 8005e50 <_printf_float+0x178>
 8005e48:	f8db 2000 	ldr.w	r2, [fp]
 8005e4c:	07d0      	lsls	r0, r2, #31
 8005e4e:	d501      	bpl.n	8005e54 <_printf_float+0x17c>
 8005e50:	3302      	adds	r3, #2
 8005e52:	e015      	b.n	8005e80 <_printf_float+0x1a8>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e013      	b.n	8005e80 <_printf_float+0x1a8>
 8005e58:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e60:	4293      	cmp	r3, r2
 8005e62:	db07      	blt.n	8005e74 <_printf_float+0x19c>
 8005e64:	f8db 2000 	ldr.w	r2, [fp]
 8005e68:	f8cb 3010 	str.w	r3, [fp, #16]
 8005e6c:	07d1      	lsls	r1, r2, #31
 8005e6e:	d509      	bpl.n	8005e84 <_printf_float+0x1ac>
 8005e70:	3301      	adds	r3, #1
 8005e72:	e005      	b.n	8005e80 <_printf_float+0x1a8>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bfd4      	ite	le
 8005e78:	f1c3 0302 	rsble	r3, r3, #2
 8005e7c:	2301      	movgt	r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	f8cb 3010 	str.w	r3, [fp, #16]
 8005e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e86:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8005e8a:	f04f 0900 	mov.w	r9, #0
 8005e8e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e92:	b113      	cbz	r3, 8005e9a <_printf_float+0x1c2>
 8005e94:	232d      	movs	r3, #45	; 0x2d
 8005e96:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8005e9a:	9600      	str	r6, [sp, #0]
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4659      	mov	r1, fp
 8005ea0:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f000 f95c 	bl	8006160 <_printf_common>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_printf_float+0x1da>
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	e152      	b.n	8006158 <_printf_float+0x480>
 8005eb2:	f8db 3000 	ldr.w	r3, [fp]
 8005eb6:	055a      	lsls	r2, r3, #21
 8005eb8:	d405      	bmi.n	8005ec6 <_printf_float+0x1ee>
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	463a      	mov	r2, r7
 8005ec0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005ec4:	e108      	b.n	80060d8 <_printf_float+0x400>
 8005ec6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005eca:	f240 80d0 	bls.w	800606e <_printf_float+0x396>
 8005ece:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f001 fbf5 	bl	80076c4 <__aeabi_dcmpeq>
 8005eda:	b350      	cbz	r0, 8005f32 <_printf_float+0x25a>
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4a38      	ldr	r2, [pc, #224]	; (8005fc4 <_printf_float+0x2ec>)
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	47b0      	blx	r6
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0e0      	beq.n	8005eac <_printf_float+0x1d4>
 8005eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	db09      	blt.n	8005f06 <_printf_float+0x22e>
 8005ef2:	f8db 3000 	ldr.w	r3, [fp]
 8005ef6:	07d8      	lsls	r0, r3, #31
 8005ef8:	d405      	bmi.n	8005f06 <_printf_float+0x22e>
 8005efa:	f8db 3000 	ldr.w	r3, [fp]
 8005efe:	079f      	lsls	r7, r3, #30
 8005f00:	f100 8110 	bmi.w	8006124 <_printf_float+0x44c>
 8005f04:	e107      	b.n	8006116 <_printf_float+0x43e>
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0e:	47b0      	blx	r6
 8005f10:	3001      	adds	r0, #1
 8005f12:	d0cb      	beq.n	8005eac <_printf_float+0x1d4>
 8005f14:	2700      	movs	r7, #0
 8005f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	429f      	cmp	r7, r3
 8005f1c:	daed      	bge.n	8005efa <_printf_float+0x222>
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f10b 021a 	add.w	r2, fp, #26
 8005f26:	2301      	movs	r3, #1
 8005f28:	47b0      	blx	r6
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d0be      	beq.n	8005eac <_printf_float+0x1d4>
 8005f2e:	3701      	adds	r7, #1
 8005f30:	e7f1      	b.n	8005f16 <_printf_float+0x23e>
 8005f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dc29      	bgt.n	8005f8c <_printf_float+0x2b4>
 8005f38:	4620      	mov	r0, r4
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4a21      	ldr	r2, [pc, #132]	; (8005fc4 <_printf_float+0x2ec>)
 8005f3e:	2301      	movs	r3, #1
 8005f40:	47b0      	blx	r6
 8005f42:	3001      	adds	r0, #1
 8005f44:	d0b2      	beq.n	8005eac <_printf_float+0x1d4>
 8005f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f48:	b92b      	cbnz	r3, 8005f56 <_printf_float+0x27e>
 8005f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f4c:	b91b      	cbnz	r3, 8005f56 <_printf_float+0x27e>
 8005f4e:	f8db 3000 	ldr.w	r3, [fp]
 8005f52:	07d9      	lsls	r1, r3, #31
 8005f54:	d5d1      	bpl.n	8005efa <_printf_float+0x222>
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	47b0      	blx	r6
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0a3      	beq.n	8005eac <_printf_float+0x1d4>
 8005f64:	f04f 0800 	mov.w	r8, #0
 8005f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	4598      	cmp	r8, r3
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	da08      	bge.n	8005f86 <_printf_float+0x2ae>
 8005f74:	f10b 021a 	add.w	r2, fp, #26
 8005f78:	2301      	movs	r3, #1
 8005f7a:	47b0      	blx	r6
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d095      	beq.n	8005eac <_printf_float+0x1d4>
 8005f80:	f108 0801 	add.w	r8, r8, #1
 8005f84:	e7f0      	b.n	8005f68 <_printf_float+0x290>
 8005f86:	463a      	mov	r2, r7
 8005f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f8a:	e0a5      	b.n	80060d8 <_printf_float+0x400>
 8005f8c:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8005f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f92:	429a      	cmp	r2, r3
 8005f94:	bfa8      	it	ge
 8005f96:	461a      	movge	r2, r3
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	4691      	mov	r9, r2
 8005f9c:	dc02      	bgt.n	8005fa4 <_printf_float+0x2cc>
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	e01c      	b.n	8005fde <_printf_float+0x306>
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	463a      	mov	r2, r7
 8005faa:	464b      	mov	r3, r9
 8005fac:	47b0      	blx	r6
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d1f5      	bne.n	8005f9e <_printf_float+0x2c6>
 8005fb2:	e77b      	b.n	8005eac <_printf_float+0x1d4>
 8005fb4:	080078fa 	.word	0x080078fa
 8005fb8:	080078f6 	.word	0x080078f6
 8005fbc:	08007902 	.word	0x08007902
 8005fc0:	080078fe 	.word	0x080078fe
 8005fc4:	08007906 	.word	0x08007906
 8005fc8:	4620      	mov	r0, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f10b 021a 	add.w	r2, fp, #26
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	47b0      	blx	r6
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f43f af69 	beq.w	8005eac <_printf_float+0x1d4>
 8005fda:	f108 0801 	add.w	r8, r8, #1
 8005fde:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8005fe2:	f1b9 0f00 	cmp.w	r9, #0
 8005fe6:	bfac      	ite	ge
 8005fe8:	ebc9 0203 	rsbge	r2, r9, r3
 8005fec:	461a      	movlt	r2, r3
 8005fee:	4590      	cmp	r8, r2
 8005ff0:	dbea      	blt.n	8005fc8 <_printf_float+0x2f0>
 8005ff2:	eb07 0803 	add.w	r8, r7, r3
 8005ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	db10      	blt.n	8006020 <_printf_float+0x348>
 8005ffe:	f8db 3000 	ldr.w	r3, [fp]
 8006002:	07da      	lsls	r2, r3, #31
 8006004:	d40c      	bmi.n	8006020 <_printf_float+0x348>
 8006006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006008:	4417      	add	r7, r2
 800600a:	ebc8 0307 	rsb	r3, r8, r7
 800600e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006010:	1bd2      	subs	r2, r2, r7
 8006012:	4293      	cmp	r3, r2
 8006014:	bfa8      	it	ge
 8006016:	4613      	movge	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	461f      	mov	r7, r3
 800601c:	dc08      	bgt.n	8006030 <_printf_float+0x358>
 800601e:	e00e      	b.n	800603e <_printf_float+0x366>
 8006020:	4620      	mov	r0, r4
 8006022:	4629      	mov	r1, r5
 8006024:	4652      	mov	r2, sl
 8006026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006028:	47b0      	blx	r6
 800602a:	3001      	adds	r0, #1
 800602c:	d1eb      	bne.n	8006006 <_printf_float+0x32e>
 800602e:	e73d      	b.n	8005eac <_printf_float+0x1d4>
 8006030:	4620      	mov	r0, r4
 8006032:	4629      	mov	r1, r5
 8006034:	4642      	mov	r2, r8
 8006036:	47b0      	blx	r6
 8006038:	3001      	adds	r0, #1
 800603a:	f43f af37 	beq.w	8005eac <_printf_float+0x1d4>
 800603e:	f04f 0800 	mov.w	r8, #0
 8006042:	e00a      	b.n	800605a <_printf_float+0x382>
 8006044:	4620      	mov	r0, r4
 8006046:	4629      	mov	r1, r5
 8006048:	f10b 021a 	add.w	r2, fp, #26
 800604c:	2301      	movs	r3, #1
 800604e:	47b0      	blx	r6
 8006050:	3001      	adds	r0, #1
 8006052:	f43f af2b 	beq.w	8005eac <_printf_float+0x1d4>
 8006056:	f108 0801 	add.w	r8, r8, #1
 800605a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800605c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800605e:	2f00      	cmp	r7, #0
 8006060:	eba3 0302 	sub.w	r3, r3, r2
 8006064:	bfa8      	it	ge
 8006066:	1bdb      	subge	r3, r3, r7
 8006068:	4598      	cmp	r8, r3
 800606a:	dbeb      	blt.n	8006044 <_printf_float+0x36c>
 800606c:	e745      	b.n	8005efa <_printf_float+0x222>
 800606e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006070:	2a01      	cmp	r2, #1
 8006072:	dc01      	bgt.n	8006078 <_printf_float+0x3a0>
 8006074:	07db      	lsls	r3, r3, #31
 8006076:	d536      	bpl.n	80060e6 <_printf_float+0x40e>
 8006078:	4620      	mov	r0, r4
 800607a:	4629      	mov	r1, r5
 800607c:	463a      	mov	r2, r7
 800607e:	2301      	movs	r3, #1
 8006080:	47b0      	blx	r6
 8006082:	3001      	adds	r0, #1
 8006084:	f43f af12 	beq.w	8005eac <_printf_float+0x1d4>
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	4652      	mov	r2, sl
 800608e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006090:	47b0      	blx	r6
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af0a 	beq.w	8005eac <_printf_float+0x1d4>
 8006098:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	f001 fb10 	bl	80076c4 <__aeabi_dcmpeq>
 80060a4:	b9e8      	cbnz	r0, 80060e2 <_printf_float+0x40a>
 80060a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a8:	4620      	mov	r0, r4
 80060aa:	4629      	mov	r1, r5
 80060ac:	1c7a      	adds	r2, r7, #1
 80060ae:	3b01      	subs	r3, #1
 80060b0:	e01d      	b.n	80060ee <_printf_float+0x416>
 80060b2:	4620      	mov	r0, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	f10b 021a 	add.w	r2, fp, #26
 80060ba:	2301      	movs	r3, #1
 80060bc:	47b0      	blx	r6
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f aef4 	beq.w	8005eac <_printf_float+0x1d4>
 80060c4:	3701      	adds	r7, #1
 80060c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c8:	3b01      	subs	r3, #1
 80060ca:	429f      	cmp	r7, r3
 80060cc:	dbf1      	blt.n	80060b2 <_printf_float+0x3da>
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 80060d6:	464b      	mov	r3, r9
 80060d8:	47b0      	blx	r6
 80060da:	3001      	adds	r0, #1
 80060dc:	f47f af0d 	bne.w	8005efa <_printf_float+0x222>
 80060e0:	e6e4      	b.n	8005eac <_printf_float+0x1d4>
 80060e2:	2700      	movs	r7, #0
 80060e4:	e7ef      	b.n	80060c6 <_printf_float+0x3ee>
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	463a      	mov	r2, r7
 80060ec:	2301      	movs	r3, #1
 80060ee:	47b0      	blx	r6
 80060f0:	3001      	adds	r0, #1
 80060f2:	d1ec      	bne.n	80060ce <_printf_float+0x3f6>
 80060f4:	e6da      	b.n	8005eac <_printf_float+0x1d4>
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f10b 0219 	add.w	r2, fp, #25
 80060fe:	2301      	movs	r3, #1
 8006100:	47b0      	blx	r6
 8006102:	3001      	adds	r0, #1
 8006104:	f43f aed2 	beq.w	8005eac <_printf_float+0x1d4>
 8006108:	3701      	adds	r7, #1
 800610a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800610e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	429f      	cmp	r7, r3
 8006114:	dbef      	blt.n	80060f6 <_printf_float+0x41e>
 8006116:	f8db 000c 	ldr.w	r0, [fp, #12]
 800611a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800611c:	4298      	cmp	r0, r3
 800611e:	bfb8      	it	lt
 8006120:	4618      	movlt	r0, r3
 8006122:	e019      	b.n	8006158 <_printf_float+0x480>
 8006124:	2700      	movs	r7, #0
 8006126:	e7f0      	b.n	800610a <_printf_float+0x432>
 8006128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800612c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006130:	f8cb 3000 	str.w	r3, [fp]
 8006134:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006138:	9302      	str	r3, [sp, #8]
 800613a:	ab0d      	add	r3, sp, #52	; 0x34
 800613c:	9303      	str	r3, [sp, #12]
 800613e:	ab0e      	add	r3, sp, #56	; 0x38
 8006140:	9305      	str	r3, [sp, #20]
 8006142:	2300      	movs	r3, #0
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	f8cd 8010 	str.w	r8, [sp, #16]
 800614a:	4620      	mov	r0, r4
 800614c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006150:	f7ff fd31 	bl	8005bb6 <__cvt>
 8006154:	4607      	mov	r7, r0
 8006156:	e640      	b.n	8005dda <_printf_float+0x102>
 8006158:	b011      	add	sp, #68	; 0x44
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	bf00      	nop

08006160 <_printf_common>:
 8006160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006164:	4691      	mov	r9, r2
 8006166:	461f      	mov	r7, r3
 8006168:	688a      	ldr	r2, [r1, #8]
 800616a:	690b      	ldr	r3, [r1, #16]
 800616c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006170:	4293      	cmp	r3, r2
 8006172:	bfb8      	it	lt
 8006174:	4613      	movlt	r3, r2
 8006176:	f8c9 3000 	str.w	r3, [r9]
 800617a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800617e:	4606      	mov	r6, r0
 8006180:	460c      	mov	r4, r1
 8006182:	b112      	cbz	r2, 800618a <_printf_common+0x2a>
 8006184:	3301      	adds	r3, #1
 8006186:	f8c9 3000 	str.w	r3, [r9]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	0699      	lsls	r1, r3, #26
 800618e:	bf42      	ittt	mi
 8006190:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006194:	3302      	addmi	r3, #2
 8006196:	f8c9 3000 	strmi.w	r3, [r9]
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	f015 0506 	ands.w	r5, r5, #6
 80061a0:	d01c      	beq.n	80061dc <_printf_common+0x7c>
 80061a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	3300      	adds	r3, #0
 80061aa:	bf18      	it	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	0692      	lsls	r2, r2, #26
 80061b0:	d51f      	bpl.n	80061f2 <_printf_common+0x92>
 80061b2:	18e1      	adds	r1, r4, r3
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	2030      	movs	r0, #48	; 0x30
 80061b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061bc:	4422      	add	r2, r4
 80061be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c6:	3302      	adds	r3, #2
 80061c8:	e013      	b.n	80061f2 <_printf_common+0x92>
 80061ca:	4630      	mov	r0, r6
 80061cc:	4639      	mov	r1, r7
 80061ce:	f104 0219 	add.w	r2, r4, #25
 80061d2:	2301      	movs	r3, #1
 80061d4:	47c0      	blx	r8
 80061d6:	3001      	adds	r0, #1
 80061d8:	d007      	beq.n	80061ea <_printf_common+0x8a>
 80061da:	3501      	adds	r5, #1
 80061dc:	68e3      	ldr	r3, [r4, #12]
 80061de:	f8d9 2000 	ldr.w	r2, [r9]
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	429d      	cmp	r5, r3
 80061e6:	dbf0      	blt.n	80061ca <_printf_common+0x6a>
 80061e8:	e7db      	b.n	80061a2 <_printf_common+0x42>
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	4630      	mov	r0, r6
 80061f4:	4639      	mov	r1, r7
 80061f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061fa:	47c0      	blx	r8
 80061fc:	3001      	adds	r0, #1
 80061fe:	d0f4      	beq.n	80061ea <_printf_common+0x8a>
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	f8d9 5000 	ldr.w	r5, [r9]
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	f002 0206 	and.w	r2, r2, #6
 800620c:	2a04      	cmp	r2, #4
 800620e:	bf08      	it	eq
 8006210:	1b5d      	subeq	r5, r3, r5
 8006212:	6922      	ldr	r2, [r4, #16]
 8006214:	68a3      	ldr	r3, [r4, #8]
 8006216:	bf0c      	ite	eq
 8006218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800621c:	2500      	movne	r5, #0
 800621e:	4293      	cmp	r3, r2
 8006220:	bfc4      	itt	gt
 8006222:	1a9b      	subgt	r3, r3, r2
 8006224:	18ed      	addgt	r5, r5, r3
 8006226:	f04f 0900 	mov.w	r9, #0
 800622a:	45a9      	cmp	r9, r5
 800622c:	da0a      	bge.n	8006244 <_printf_common+0xe4>
 800622e:	4630      	mov	r0, r6
 8006230:	4639      	mov	r1, r7
 8006232:	f104 021a 	add.w	r2, r4, #26
 8006236:	2301      	movs	r3, #1
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d0d5      	beq.n	80061ea <_printf_common+0x8a>
 800623e:	f109 0901 	add.w	r9, r9, #1
 8006242:	e7f2      	b.n	800622a <_printf_common+0xca>
 8006244:	2000      	movs	r0, #0
 8006246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800624c <__fpclassifyd>:
 800624c:	460a      	mov	r2, r1
 800624e:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8006252:	b510      	push	{r4, lr}
 8006254:	4603      	mov	r3, r0
 8006256:	d01b      	beq.n	8006290 <__fpclassifyd+0x44>
 8006258:	480f      	ldr	r0, [pc, #60]	; (8006298 <__fpclassifyd+0x4c>)
 800625a:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 800625e:	4284      	cmp	r4, r0
 8006260:	d910      	bls.n	8006284 <__fpclassifyd+0x38>
 8006262:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8006266:	480c      	ldr	r0, [pc, #48]	; (8006298 <__fpclassifyd+0x4c>)
 8006268:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800626c:	4282      	cmp	r2, r0
 800626e:	d909      	bls.n	8006284 <__fpclassifyd+0x38>
 8006270:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006274:	d308      	bcc.n	8006288 <__fpclassifyd+0x3c>
 8006276:	4a09      	ldr	r2, [pc, #36]	; (800629c <__fpclassifyd+0x50>)
 8006278:	4291      	cmp	r1, r2
 800627a:	d107      	bne.n	800628c <__fpclassifyd+0x40>
 800627c:	fab3 f083 	clz	r0, r3
 8006280:	0940      	lsrs	r0, r0, #5
 8006282:	bd10      	pop	{r4, pc}
 8006284:	2004      	movs	r0, #4
 8006286:	bd10      	pop	{r4, pc}
 8006288:	2003      	movs	r0, #3
 800628a:	bd10      	pop	{r4, pc}
 800628c:	2000      	movs	r0, #0
 800628e:	bd10      	pop	{r4, pc}
 8006290:	2800      	cmp	r0, #0
 8006292:	d1e6      	bne.n	8006262 <__fpclassifyd+0x16>
 8006294:	2002      	movs	r0, #2
 8006296:	bd10      	pop	{r4, pc}
 8006298:	7fdfffff 	.word	0x7fdfffff
 800629c:	7ff00000 	.word	0x7ff00000

080062a0 <strlen>:
 80062a0:	4603      	mov	r3, r0
 80062a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	d1fb      	bne.n	80062a2 <strlen+0x2>
 80062aa:	1a18      	subs	r0, r3, r0
 80062ac:	3801      	subs	r0, #1
 80062ae:	4770      	bx	lr

080062b0 <quorem>:
 80062b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	6903      	ldr	r3, [r0, #16]
 80062b6:	690c      	ldr	r4, [r1, #16]
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	4680      	mov	r8, r0
 80062bc:	f2c0 8081 	blt.w	80063c2 <quorem+0x112>
 80062c0:	3c01      	subs	r4, #1
 80062c2:	f101 0714 	add.w	r7, r1, #20
 80062c6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80062ca:	f100 0614 	add.w	r6, r0, #20
 80062ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80062d2:	eb06 030e 	add.w	r3, r6, lr
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	3501      	adds	r5, #1
 80062da:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80062de:	fbb3 f5f5 	udiv	r5, r3, r5
 80062e2:	eb07 090e 	add.w	r9, r7, lr
 80062e6:	b3c5      	cbz	r5, 800635a <quorem+0xaa>
 80062e8:	f04f 0a00 	mov.w	sl, #0
 80062ec:	4638      	mov	r0, r7
 80062ee:	46b4      	mov	ip, r6
 80062f0:	46d3      	mov	fp, sl
 80062f2:	f850 3b04 	ldr.w	r3, [r0], #4
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	fb02 a205 	mla	r2, r2, r5, sl
 80062fe:	436b      	muls	r3, r5
 8006300:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006304:	b292      	uxth	r2, r2
 8006306:	ebc2 020b 	rsb	r2, r2, fp
 800630a:	f8bc b000 	ldrh.w	fp, [ip]
 800630e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006312:	fa12 f28b 	uxtah	r2, r2, fp
 8006316:	fa1f fb83 	uxth.w	fp, r3
 800631a:	f8dc 3000 	ldr.w	r3, [ip]
 800631e:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8006322:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8006326:	b292      	uxth	r2, r2
 8006328:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800632c:	4548      	cmp	r0, r9
 800632e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006332:	f84c 2b04 	str.w	r2, [ip], #4
 8006336:	d9dc      	bls.n	80062f2 <quorem+0x42>
 8006338:	f856 300e 	ldr.w	r3, [r6, lr]
 800633c:	b96b      	cbnz	r3, 800635a <quorem+0xaa>
 800633e:	9b01      	ldr	r3, [sp, #4]
 8006340:	3b04      	subs	r3, #4
 8006342:	42b3      	cmp	r3, r6
 8006344:	461a      	mov	r2, r3
 8006346:	d802      	bhi.n	800634e <quorem+0x9e>
 8006348:	f8c8 4010 	str.w	r4, [r8, #16]
 800634c:	e005      	b.n	800635a <quorem+0xaa>
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	3b04      	subs	r3, #4
 8006352:	2a00      	cmp	r2, #0
 8006354:	d1f8      	bne.n	8006348 <quorem+0x98>
 8006356:	3c01      	subs	r4, #1
 8006358:	e7f3      	b.n	8006342 <quorem+0x92>
 800635a:	4640      	mov	r0, r8
 800635c:	f001 f81b 	bl	8007396 <__mcmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	db2c      	blt.n	80063be <quorem+0x10e>
 8006364:	3501      	adds	r5, #1
 8006366:	4630      	mov	r0, r6
 8006368:	f04f 0e00 	mov.w	lr, #0
 800636c:	f857 1b04 	ldr.w	r1, [r7], #4
 8006370:	f8d0 c000 	ldr.w	ip, [r0]
 8006374:	b28a      	uxth	r2, r1
 8006376:	ebc2 030e 	rsb	r3, r2, lr
 800637a:	0c09      	lsrs	r1, r1, #16
 800637c:	fa13 f38c 	uxtah	r3, r3, ip
 8006380:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8006384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006388:	b29b      	uxth	r3, r3
 800638a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800638e:	454f      	cmp	r7, r9
 8006390:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006394:	f840 3b04 	str.w	r3, [r0], #4
 8006398:	d9e8      	bls.n	800636c <quorem+0xbc>
 800639a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800639e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80063a2:	b962      	cbnz	r2, 80063be <quorem+0x10e>
 80063a4:	3b04      	subs	r3, #4
 80063a6:	42b3      	cmp	r3, r6
 80063a8:	461a      	mov	r2, r3
 80063aa:	d802      	bhi.n	80063b2 <quorem+0x102>
 80063ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80063b0:	e005      	b.n	80063be <quorem+0x10e>
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	3b04      	subs	r3, #4
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	d1f8      	bne.n	80063ac <quorem+0xfc>
 80063ba:	3c01      	subs	r4, #1
 80063bc:	e7f3      	b.n	80063a6 <quorem+0xf6>
 80063be:	4628      	mov	r0, r5
 80063c0:	e000      	b.n	80063c4 <quorem+0x114>
 80063c2:	2000      	movs	r0, #0
 80063c4:	b003      	add	sp, #12
 80063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ca:	0000      	movs	r0, r0
 80063cc:	0000      	movs	r0, r0
	...

080063d0 <_dtoa_r>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063d6:	b097      	sub	sp, #92	; 0x5c
 80063d8:	4682      	mov	sl, r0
 80063da:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80063dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063e0:	b945      	cbnz	r5, 80063f4 <_dtoa_r+0x24>
 80063e2:	2010      	movs	r0, #16
 80063e4:	f000 fdbc 	bl	8006f60 <malloc>
 80063e8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80063ec:	6045      	str	r5, [r0, #4]
 80063ee:	6085      	str	r5, [r0, #8]
 80063f0:	6005      	str	r5, [r0, #0]
 80063f2:	60c5      	str	r5, [r0, #12]
 80063f4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	b159      	cbz	r1, 8006414 <_dtoa_r+0x44>
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	604a      	str	r2, [r1, #4]
 8006400:	2301      	movs	r3, #1
 8006402:	4093      	lsls	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
 8006406:	4650      	mov	r0, sl
 8006408:	f000 fde7 	bl	8006fda <_Bfree>
 800640c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	4aa2      	ldr	r2, [pc, #648]	; (80066a0 <_dtoa_r+0x2d0>)
 8006418:	2b00      	cmp	r3, #0
 800641a:	bfbf      	itttt	lt
 800641c:	2301      	movlt	r3, #1
 800641e:	6023      	strlt	r3, [r4, #0]
 8006420:	9b03      	ldrlt	r3, [sp, #12]
 8006422:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006426:	bfb8      	it	lt
 8006428:	9303      	strlt	r3, [sp, #12]
 800642a:	9f03      	ldr	r7, [sp, #12]
 800642c:	bfa4      	itt	ge
 800642e:	2300      	movge	r3, #0
 8006430:	6023      	strge	r3, [r4, #0]
 8006432:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8006436:	0d1b      	lsrs	r3, r3, #20
 8006438:	051b      	lsls	r3, r3, #20
 800643a:	4293      	cmp	r3, r2
 800643c:	d11d      	bne.n	800647a <_dtoa_r+0xaa>
 800643e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006440:	f242 730f 	movw	r3, #9999	; 0x270f
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	9b02      	ldr	r3, [sp, #8]
 8006448:	b943      	cbnz	r3, 800645c <_dtoa_r+0x8c>
 800644a:	4a96      	ldr	r2, [pc, #600]	; (80066a4 <_dtoa_r+0x2d4>)
 800644c:	4b96      	ldr	r3, [pc, #600]	; (80066a8 <_dtoa_r+0x2d8>)
 800644e:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8006452:	2800      	cmp	r0, #0
 8006454:	bf14      	ite	ne
 8006456:	4618      	movne	r0, r3
 8006458:	4610      	moveq	r0, r2
 800645a:	e000      	b.n	800645e <_dtoa_r+0x8e>
 800645c:	4892      	ldr	r0, [pc, #584]	; (80066a8 <_dtoa_r+0x2d8>)
 800645e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8573 	beq.w	8006f4c <_dtoa_r+0xb7c>
 8006466:	78c3      	ldrb	r3, [r0, #3]
 8006468:	b113      	cbz	r3, 8006470 <_dtoa_r+0xa0>
 800646a:	f100 0308 	add.w	r3, r0, #8
 800646e:	e000      	b.n	8006472 <_dtoa_r+0xa2>
 8006470:	1cc3      	adds	r3, r0, #3
 8006472:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	f000 bd69 	b.w	8006f4c <_dtoa_r+0xb7c>
 800647a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	2300      	movs	r3, #0
 8006486:	f001 f91d 	bl	80076c4 <__aeabi_dcmpeq>
 800648a:	4680      	mov	r8, r0
 800648c:	b158      	cbz	r0, 80064a6 <_dtoa_r+0xd6>
 800648e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006490:	2301      	movs	r3, #1
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8546 	beq.w	8006f28 <_dtoa_r+0xb58>
 800649c:	4883      	ldr	r0, [pc, #524]	; (80066ac <_dtoa_r+0x2dc>)
 800649e:	6018      	str	r0, [r3, #0]
 80064a0:	3801      	subs	r0, #1
 80064a2:	f000 bd53 	b.w	8006f4c <_dtoa_r+0xb7c>
 80064a6:	ab15      	add	r3, sp, #84	; 0x54
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	ab14      	add	r3, sp, #80	; 0x50
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	4650      	mov	r0, sl
 80064b0:	4622      	mov	r2, r4
 80064b2:	462b      	mov	r3, r5
 80064b4:	f000 ffea 	bl	800748c <__d2b>
 80064b8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80064bc:	9007      	str	r0, [sp, #28]
 80064be:	b15e      	cbz	r6, 80064d8 <_dtoa_r+0x108>
 80064c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064c4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80064c8:	4620      	mov	r0, r4
 80064ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80064ce:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80064d2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80064d6:	e01d      	b.n	8006514 <_dtoa_r+0x144>
 80064d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064da:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80064dc:	441e      	add	r6, r3
 80064de:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80064e2:	429e      	cmp	r6, r3
 80064e4:	bfad      	iteet	ge
 80064e6:	9a02      	ldrge	r2, [sp, #8]
 80064e8:	4b71      	ldrlt	r3, [pc, #452]	; (80066b0 <_dtoa_r+0x2e0>)
 80064ea:	9a02      	ldrlt	r2, [sp, #8]
 80064ec:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 80064f0:	bfa3      	ittte	ge
 80064f2:	fa22 f003 	lsrge.w	r0, r2, r3
 80064f6:	4b6f      	ldrge	r3, [pc, #444]	; (80066b4 <_dtoa_r+0x2e4>)
 80064f8:	1b9b      	subge	r3, r3, r6
 80064fa:	1b9b      	sublt	r3, r3, r6
 80064fc:	bfaa      	itet	ge
 80064fe:	409f      	lslge	r7, r3
 8006500:	fa02 f003 	lsllt.w	r0, r2, r3
 8006504:	4338      	orrge	r0, r7
 8006506:	f7fe fd4b 	bl	8004fa0 <__aeabi_ui2d>
 800650a:	2301      	movs	r3, #1
 800650c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006510:	3e01      	subs	r6, #1
 8006512:	9313      	str	r3, [sp, #76]	; 0x4c
 8006514:	2200      	movs	r2, #0
 8006516:	4b68      	ldr	r3, [pc, #416]	; (80066b8 <_dtoa_r+0x2e8>)
 8006518:	f7fe fc04 	bl	8004d24 <__aeabi_dsub>
 800651c:	a35a      	add	r3, pc, #360	; (adr r3, 8006688 <_dtoa_r+0x2b8>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7fe fdb3 	bl	800508c <__aeabi_dmul>
 8006526:	a35a      	add	r3, pc, #360	; (adr r3, 8006690 <_dtoa_r+0x2c0>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f7fe fbfc 	bl	8004d28 <__adddf3>
 8006530:	4604      	mov	r4, r0
 8006532:	4630      	mov	r0, r6
 8006534:	460d      	mov	r5, r1
 8006536:	f7fe fd43 	bl	8004fc0 <__aeabi_i2d>
 800653a:	a357      	add	r3, pc, #348	; (adr r3, 8006698 <_dtoa_r+0x2c8>)
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f7fe fda4 	bl	800508c <__aeabi_dmul>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7fe fbec 	bl	8004d28 <__adddf3>
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	f7fe ffac 	bl	80054b0 <__aeabi_d2iz>
 8006558:	4629      	mov	r1, r5
 800655a:	4683      	mov	fp, r0
 800655c:	2200      	movs	r2, #0
 800655e:	4620      	mov	r0, r4
 8006560:	2300      	movs	r3, #0
 8006562:	f001 f8b9 	bl	80076d8 <__aeabi_dcmplt>
 8006566:	b158      	cbz	r0, 8006580 <_dtoa_r+0x1b0>
 8006568:	4658      	mov	r0, fp
 800656a:	f7fe fd29 	bl	8004fc0 <__aeabi_i2d>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f001 f8a5 	bl	80076c4 <__aeabi_dcmpeq>
 800657a:	b908      	cbnz	r0, 8006580 <_dtoa_r+0x1b0>
 800657c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006580:	f1bb 0f16 	cmp.w	fp, #22
 8006584:	d80d      	bhi.n	80065a2 <_dtoa_r+0x1d2>
 8006586:	4b4d      	ldr	r3, [pc, #308]	; (80066bc <_dtoa_r+0x2ec>)
 8006588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800658c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006594:	f001 f8be 	bl	8007714 <__aeabi_dcmpgt>
 8006598:	b130      	cbz	r0, 80065a8 <_dtoa_r+0x1d8>
 800659a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <_dtoa_r+0x1d4>
 80065a2:	2301      	movs	r3, #1
 80065a4:	9312      	str	r3, [sp, #72]	; 0x48
 80065a6:	e000      	b.n	80065aa <_dtoa_r+0x1da>
 80065a8:	9012      	str	r0, [sp, #72]	; 0x48
 80065aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065ac:	1b9e      	subs	r6, r3, r6
 80065ae:	1e73      	subs	r3, r6, #1
 80065b0:	930a      	str	r3, [sp, #40]	; 0x28
 80065b2:	bf45      	ittet	mi
 80065b4:	425b      	negmi	r3, r3
 80065b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80065b8:	2300      	movpl	r3, #0
 80065ba:	2300      	movmi	r3, #0
 80065bc:	bf4c      	ite	mi
 80065be:	930a      	strmi	r3, [sp, #40]	; 0x28
 80065c0:	9309      	strpl	r3, [sp, #36]	; 0x24
 80065c2:	f1bb 0f00 	cmp.w	fp, #0
 80065c6:	db07      	blt.n	80065d8 <_dtoa_r+0x208>
 80065c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ca:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80065ce:	445b      	add	r3, fp
 80065d0:	930a      	str	r3, [sp, #40]	; 0x28
 80065d2:	2300      	movs	r3, #0
 80065d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d6:	e008      	b.n	80065ea <_dtoa_r+0x21a>
 80065d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065da:	ebcb 0303 	rsb	r3, fp, r3
 80065de:	9309      	str	r3, [sp, #36]	; 0x24
 80065e0:	f1cb 0300 	rsb	r3, fp, #0
 80065e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e6:	2300      	movs	r3, #0
 80065e8:	930d      	str	r3, [sp, #52]	; 0x34
 80065ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d828      	bhi.n	8006642 <_dtoa_r+0x272>
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	bfc4      	itt	gt
 80065f4:	3b04      	subgt	r3, #4
 80065f6:	9320      	strgt	r3, [sp, #128]	; 0x80
 80065f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065fa:	f1a3 0302 	sub.w	r3, r3, #2
 80065fe:	bfcc      	ite	gt
 8006600:	2500      	movgt	r5, #0
 8006602:	2501      	movle	r5, #1
 8006604:	2b03      	cmp	r3, #3
 8006606:	d821      	bhi.n	800664c <_dtoa_r+0x27c>
 8006608:	e8df f003 	tbb	[pc, r3]
 800660c:	10040e02 	.word	0x10040e02
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <_dtoa_r+0x246>
 8006614:	2301      	movs	r3, #1
 8006616:	930c      	str	r3, [sp, #48]	; 0x30
 8006618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800661a:	2b00      	cmp	r3, #0
 800661c:	dc20      	bgt.n	8006660 <_dtoa_r+0x290>
 800661e:	2301      	movs	r3, #1
 8006620:	9306      	str	r3, [sp, #24]
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	461a      	mov	r2, r3
 8006626:	e019      	b.n	800665c <_dtoa_r+0x28c>
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <_dtoa_r+0x25e>
 800662c:	2301      	movs	r3, #1
 800662e:	930c      	str	r3, [sp, #48]	; 0x30
 8006630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006632:	445b      	add	r3, fp
 8006634:	9306      	str	r3, [sp, #24]
 8006636:	3301      	adds	r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	bfb8      	it	lt
 800663e:	2301      	movlt	r3, #1
 8006640:	e011      	b.n	8006666 <_dtoa_r+0x296>
 8006642:	2501      	movs	r5, #1
 8006644:	2300      	movs	r3, #0
 8006646:	9320      	str	r3, [sp, #128]	; 0x80
 8006648:	950c      	str	r5, [sp, #48]	; 0x30
 800664a:	e001      	b.n	8006650 <_dtoa_r+0x280>
 800664c:	2301      	movs	r3, #1
 800664e:	930c      	str	r3, [sp, #48]	; 0x30
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	2312      	movs	r3, #18
 800665c:	9221      	str	r2, [sp, #132]	; 0x84
 800665e:	e002      	b.n	8006666 <_dtoa_r+0x296>
 8006660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006662:	9306      	str	r3, [sp, #24]
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800666a:	2200      	movs	r2, #0
 800666c:	6062      	str	r2, [r4, #4]
 800666e:	2104      	movs	r1, #4
 8006670:	f101 0214 	add.w	r2, r1, #20
 8006674:	429a      	cmp	r2, r3
 8006676:	d823      	bhi.n	80066c0 <_dtoa_r+0x2f0>
 8006678:	6862      	ldr	r2, [r4, #4]
 800667a:	3201      	adds	r2, #1
 800667c:	6062      	str	r2, [r4, #4]
 800667e:	0049      	lsls	r1, r1, #1
 8006680:	e7f6      	b.n	8006670 <_dtoa_r+0x2a0>
 8006682:	bf00      	nop
 8006684:	f3af 8000 	nop.w
 8006688:	636f4361 	.word	0x636f4361
 800668c:	3fd287a7 	.word	0x3fd287a7
 8006690:	8b60c8b3 	.word	0x8b60c8b3
 8006694:	3fc68a28 	.word	0x3fc68a28
 8006698:	509f79fb 	.word	0x509f79fb
 800669c:	3fd34413 	.word	0x3fd34413
 80066a0:	7ff00000 	.word	0x7ff00000
 80066a4:	08007908 	.word	0x08007908
 80066a8:	08007911 	.word	0x08007911
 80066ac:	08007907 	.word	0x08007907
 80066b0:	fffffbee 	.word	0xfffffbee
 80066b4:	fffffc0e 	.word	0xfffffc0e
 80066b8:	3ff80000 	.word	0x3ff80000
 80066bc:	08007920 	.word	0x08007920
 80066c0:	4650      	mov	r0, sl
 80066c2:	6861      	ldr	r1, [r4, #4]
 80066c4:	f000 fc54 	bl	8006f70 <_Balloc>
 80066c8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80066cc:	6020      	str	r0, [r4, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	9308      	str	r3, [sp, #32]
 80066d2:	9b05      	ldr	r3, [sp, #20]
 80066d4:	2b0e      	cmp	r3, #14
 80066d6:	f200 814b 	bhi.w	8006970 <_dtoa_r+0x5a0>
 80066da:	2d00      	cmp	r5, #0
 80066dc:	f000 8148 	beq.w	8006970 <_dtoa_r+0x5a0>
 80066e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066e4:	f1bb 0f00 	cmp.w	fp, #0
 80066e8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80066ec:	dd31      	ble.n	8006752 <_dtoa_r+0x382>
 80066ee:	4ab3      	ldr	r2, [pc, #716]	; (80069bc <_dtoa_r+0x5ec>)
 80066f0:	f00b 030f 	and.w	r3, fp, #15
 80066f4:	ea4f 172b 	mov.w	r7, fp, asr #4
 80066f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066fc:	06f8      	lsls	r0, r7, #27
 80066fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006702:	d50c      	bpl.n	800671e <_dtoa_r+0x34e>
 8006704:	4bae      	ldr	r3, [pc, #696]	; (80069c0 <_dtoa_r+0x5f0>)
 8006706:	ec51 0b17 	vmov	r0, r1, d7
 800670a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800670e:	f7fe fde7 	bl	80052e0 <__aeabi_ddiv>
 8006712:	f007 070f 	and.w	r7, r7, #15
 8006716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800671a:	2603      	movs	r6, #3
 800671c:	e000      	b.n	8006720 <_dtoa_r+0x350>
 800671e:	2602      	movs	r6, #2
 8006720:	f8df 829c 	ldr.w	r8, [pc, #668]	; 80069c0 <_dtoa_r+0x5f0>
 8006724:	b177      	cbz	r7, 8006744 <_dtoa_r+0x374>
 8006726:	07f9      	lsls	r1, r7, #31
 8006728:	d508      	bpl.n	800673c <_dtoa_r+0x36c>
 800672a:	4620      	mov	r0, r4
 800672c:	4629      	mov	r1, r5
 800672e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006732:	f7fe fcab 	bl	800508c <__aeabi_dmul>
 8006736:	3601      	adds	r6, #1
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	107f      	asrs	r7, r7, #1
 800673e:	f108 0808 	add.w	r8, r8, #8
 8006742:	e7ef      	b.n	8006724 <_dtoa_r+0x354>
 8006744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006748:	4622      	mov	r2, r4
 800674a:	462b      	mov	r3, r5
 800674c:	f7fe fdc8 	bl	80052e0 <__aeabi_ddiv>
 8006750:	e01b      	b.n	800678a <_dtoa_r+0x3ba>
 8006752:	f1cb 0400 	rsb	r4, fp, #0
 8006756:	b1dc      	cbz	r4, 8006790 <_dtoa_r+0x3c0>
 8006758:	4b98      	ldr	r3, [pc, #608]	; (80069bc <_dtoa_r+0x5ec>)
 800675a:	4d99      	ldr	r5, [pc, #612]	; (80069c0 <_dtoa_r+0x5f0>)
 800675c:	f004 020f 	and.w	r2, r4, #15
 8006760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006764:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7fe fc8e 	bl	800508c <__aeabi_dmul>
 8006770:	1124      	asrs	r4, r4, #4
 8006772:	2602      	movs	r6, #2
 8006774:	b14c      	cbz	r4, 800678a <_dtoa_r+0x3ba>
 8006776:	07e2      	lsls	r2, r4, #31
 8006778:	d504      	bpl.n	8006784 <_dtoa_r+0x3b4>
 800677a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800677e:	3601      	adds	r6, #1
 8006780:	f7fe fc84 	bl	800508c <__aeabi_dmul>
 8006784:	1064      	asrs	r4, r4, #1
 8006786:	3508      	adds	r5, #8
 8006788:	e7f4      	b.n	8006774 <_dtoa_r+0x3a4>
 800678a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800678e:	e000      	b.n	8006792 <_dtoa_r+0x3c2>
 8006790:	2602      	movs	r6, #2
 8006792:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006794:	b1db      	cbz	r3, 80067ce <_dtoa_r+0x3fe>
 8006796:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	4620      	mov	r0, r4
 800679e:	4629      	mov	r1, r5
 80067a0:	4b88      	ldr	r3, [pc, #544]	; (80069c4 <_dtoa_r+0x5f4>)
 80067a2:	f000 ff99 	bl	80076d8 <__aeabi_dcmplt>
 80067a6:	b190      	cbz	r0, 80067ce <_dtoa_r+0x3fe>
 80067a8:	9b05      	ldr	r3, [sp, #20]
 80067aa:	b183      	cbz	r3, 80067ce <_dtoa_r+0x3fe>
 80067ac:	9b06      	ldr	r3, [sp, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f340 80da 	ble.w	8006968 <_dtoa_r+0x598>
 80067b4:	4629      	mov	r1, r5
 80067b6:	4620      	mov	r0, r4
 80067b8:	2200      	movs	r2, #0
 80067ba:	4b83      	ldr	r3, [pc, #524]	; (80069c8 <_dtoa_r+0x5f8>)
 80067bc:	f7fe fc66 	bl	800508c <__aeabi_dmul>
 80067c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80067c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c8:	3601      	adds	r6, #1
 80067ca:	9d06      	ldr	r5, [sp, #24]
 80067cc:	e001      	b.n	80067d2 <_dtoa_r+0x402>
 80067ce:	9d05      	ldr	r5, [sp, #20]
 80067d0:	465f      	mov	r7, fp
 80067d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067d6:	4630      	mov	r0, r6
 80067d8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80067dc:	f7fe fbf0 	bl	8004fc0 <__aeabi_i2d>
 80067e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80067e4:	f7fe fc52 	bl	800508c <__aeabi_dmul>
 80067e8:	2200      	movs	r2, #0
 80067ea:	4b78      	ldr	r3, [pc, #480]	; (80069cc <_dtoa_r+0x5fc>)
 80067ec:	f7fe fa9c 	bl	8004d28 <__adddf3>
 80067f0:	4680      	mov	r8, r0
 80067f2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80067f6:	b9cd      	cbnz	r5, 800682c <_dtoa_r+0x45c>
 80067f8:	2200      	movs	r2, #0
 80067fa:	4b75      	ldr	r3, [pc, #468]	; (80069d0 <_dtoa_r+0x600>)
 80067fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006800:	f7fe fa90 	bl	8004d24 <__aeabi_dsub>
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800680c:	f000 ff82 	bl	8007714 <__aeabi_dcmpgt>
 8006810:	2800      	cmp	r0, #0
 8006812:	f040 8246 	bne.w	8006ca2 <_dtoa_r+0x8d2>
 8006816:	4642      	mov	r2, r8
 8006818:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800681c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006820:	f000 ff5a 	bl	80076d8 <__aeabi_dcmplt>
 8006824:	2800      	cmp	r0, #0
 8006826:	f040 8236 	bne.w	8006c96 <_dtoa_r+0x8c6>
 800682a:	e09d      	b.n	8006968 <_dtoa_r+0x598>
 800682c:	4b63      	ldr	r3, [pc, #396]	; (80069bc <_dtoa_r+0x5ec>)
 800682e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006830:	1e6a      	subs	r2, r5, #1
 8006832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006836:	2900      	cmp	r1, #0
 8006838:	d049      	beq.n	80068ce <_dtoa_r+0x4fe>
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	2000      	movs	r0, #0
 8006840:	4964      	ldr	r1, [pc, #400]	; (80069d4 <_dtoa_r+0x604>)
 8006842:	f7fe fd4d 	bl	80052e0 <__aeabi_ddiv>
 8006846:	4642      	mov	r2, r8
 8006848:	464b      	mov	r3, r9
 800684a:	f7fe fa6b 	bl	8004d24 <__aeabi_dsub>
 800684e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8006852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006856:	9c08      	ldr	r4, [sp, #32]
 8006858:	4649      	mov	r1, r9
 800685a:	4640      	mov	r0, r8
 800685c:	f7fe fe28 	bl	80054b0 <__aeabi_d2iz>
 8006860:	4606      	mov	r6, r0
 8006862:	f7fe fbad 	bl	8004fc0 <__aeabi_i2d>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7fe fa59 	bl	8004d24 <__aeabi_dsub>
 8006872:	3630      	adds	r6, #48	; 0x30
 8006874:	f804 6b01 	strb.w	r6, [r4], #1
 8006878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800687c:	4680      	mov	r8, r0
 800687e:	4689      	mov	r9, r1
 8006880:	f000 ff2a 	bl	80076d8 <__aeabi_dcmplt>
 8006884:	2800      	cmp	r0, #0
 8006886:	f040 8340 	bne.w	8006f0a <_dtoa_r+0xb3a>
 800688a:	4642      	mov	r2, r8
 800688c:	464b      	mov	r3, r9
 800688e:	2000      	movs	r0, #0
 8006890:	494c      	ldr	r1, [pc, #304]	; (80069c4 <_dtoa_r+0x5f4>)
 8006892:	f7fe fa47 	bl	8004d24 <__aeabi_dsub>
 8006896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800689a:	f000 ff1d 	bl	80076d8 <__aeabi_dcmplt>
 800689e:	2800      	cmp	r0, #0
 80068a0:	f040 80d3 	bne.w	8006a4a <_dtoa_r+0x67a>
 80068a4:	9b08      	ldr	r3, [sp, #32]
 80068a6:	1ae3      	subs	r3, r4, r3
 80068a8:	42ab      	cmp	r3, r5
 80068aa:	da5d      	bge.n	8006968 <_dtoa_r+0x598>
 80068ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	4b45      	ldr	r3, [pc, #276]	; (80069c8 <_dtoa_r+0x5f8>)
 80068b4:	f7fe fbea 	bl	800508c <__aeabi_dmul>
 80068b8:	2200      	movs	r2, #0
 80068ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068be:	4b42      	ldr	r3, [pc, #264]	; (80069c8 <_dtoa_r+0x5f8>)
 80068c0:	4640      	mov	r0, r8
 80068c2:	4649      	mov	r1, r9
 80068c4:	f7fe fbe2 	bl	800508c <__aeabi_dmul>
 80068c8:	4680      	mov	r8, r0
 80068ca:	4689      	mov	r9, r1
 80068cc:	e7c4      	b.n	8006858 <_dtoa_r+0x488>
 80068ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068d2:	4642      	mov	r2, r8
 80068d4:	464b      	mov	r3, r9
 80068d6:	f7fe fbd9 	bl	800508c <__aeabi_dmul>
 80068da:	9b08      	ldr	r3, [sp, #32]
 80068dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068e0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80068e4:	195c      	adds	r4, r3, r5
 80068e6:	461d      	mov	r5, r3
 80068e8:	4649      	mov	r1, r9
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7fe fde0 	bl	80054b0 <__aeabi_d2iz>
 80068f0:	4606      	mov	r6, r0
 80068f2:	f7fe fb65 	bl	8004fc0 <__aeabi_i2d>
 80068f6:	3630      	adds	r6, #48	; 0x30
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4640      	mov	r0, r8
 80068fe:	4649      	mov	r1, r9
 8006900:	f7fe fa10 	bl	8004d24 <__aeabi_dsub>
 8006904:	f805 6b01 	strb.w	r6, [r5], #1
 8006908:	42a5      	cmp	r5, r4
 800690a:	4680      	mov	r8, r0
 800690c:	4689      	mov	r9, r1
 800690e:	d124      	bne.n	800695a <_dtoa_r+0x58a>
 8006910:	2200      	movs	r2, #0
 8006912:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <_dtoa_r+0x604>)
 8006914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006918:	f7fe fa06 	bl	8004d28 <__adddf3>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	f000 fef6 	bl	8007714 <__aeabi_dcmpgt>
 8006928:	2800      	cmp	r0, #0
 800692a:	f040 808e 	bne.w	8006a4a <_dtoa_r+0x67a>
 800692e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006932:	2000      	movs	r0, #0
 8006934:	4927      	ldr	r1, [pc, #156]	; (80069d4 <_dtoa_r+0x604>)
 8006936:	f7fe f9f5 	bl	8004d24 <__aeabi_dsub>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f000 fec9 	bl	80076d8 <__aeabi_dcmplt>
 8006946:	b178      	cbz	r0, 8006968 <_dtoa_r+0x598>
 8006948:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800694c:	2b30      	cmp	r3, #48	; 0x30
 800694e:	f104 32ff 	add.w	r2, r4, #4294967295
 8006952:	f040 82da 	bne.w	8006f0a <_dtoa_r+0xb3a>
 8006956:	4614      	mov	r4, r2
 8006958:	e7f6      	b.n	8006948 <_dtoa_r+0x578>
 800695a:	2200      	movs	r2, #0
 800695c:	4b1a      	ldr	r3, [pc, #104]	; (80069c8 <_dtoa_r+0x5f8>)
 800695e:	f7fe fb95 	bl	800508c <__aeabi_dmul>
 8006962:	4680      	mov	r8, r0
 8006964:	4689      	mov	r9, r1
 8006966:	e7bf      	b.n	80068e8 <_dtoa_r+0x518>
 8006968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800696c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006972:	2b00      	cmp	r3, #0
 8006974:	f2c0 808b 	blt.w	8006a8e <_dtoa_r+0x6be>
 8006978:	f1bb 0f0e 	cmp.w	fp, #14
 800697c:	f300 8087 	bgt.w	8006a8e <_dtoa_r+0x6be>
 8006980:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <_dtoa_r+0x5ec>)
 8006982:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006986:	e9d3 6700 	ldrd	r6, r7, [r3]
 800698a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800698c:	2b00      	cmp	r3, #0
 800698e:	da23      	bge.n	80069d8 <_dtoa_r+0x608>
 8006990:	9b05      	ldr	r3, [sp, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	dc20      	bgt.n	80069d8 <_dtoa_r+0x608>
 8006996:	f040 817d 	bne.w	8006c94 <_dtoa_r+0x8c4>
 800699a:	4630      	mov	r0, r6
 800699c:	2200      	movs	r2, #0
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <_dtoa_r+0x600>)
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7fe fb73 	bl	800508c <__aeabi_dmul>
 80069a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069aa:	f000 fea9 	bl	8007700 <__aeabi_dcmpge>
 80069ae:	9d05      	ldr	r5, [sp, #20]
 80069b0:	462e      	mov	r6, r5
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f040 8170 	bne.w	8006c98 <_dtoa_r+0x8c8>
 80069b8:	e175      	b.n	8006ca6 <_dtoa_r+0x8d6>
 80069ba:	bf00      	nop
 80069bc:	08007920 	.word	0x08007920
 80069c0:	080079e8 	.word	0x080079e8
 80069c4:	3ff00000 	.word	0x3ff00000
 80069c8:	40240000 	.word	0x40240000
 80069cc:	401c0000 	.word	0x401c0000
 80069d0:	40140000 	.word	0x40140000
 80069d4:	3fe00000 	.word	0x3fe00000
 80069d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069dc:	9c08      	ldr	r4, [sp, #32]
 80069de:	4632      	mov	r2, r6
 80069e0:	463b      	mov	r3, r7
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7fe fc7b 	bl	80052e0 <__aeabi_ddiv>
 80069ea:	f7fe fd61 	bl	80054b0 <__aeabi_d2iz>
 80069ee:	4605      	mov	r5, r0
 80069f0:	f7fe fae6 	bl	8004fc0 <__aeabi_i2d>
 80069f4:	4632      	mov	r2, r6
 80069f6:	463b      	mov	r3, r7
 80069f8:	f7fe fb48 	bl	800508c <__aeabi_dmul>
 80069fc:	460b      	mov	r3, r1
 80069fe:	4602      	mov	r2, r0
 8006a00:	4649      	mov	r1, r9
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7fe f98e 	bl	8004d24 <__aeabi_dsub>
 8006a08:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8006a0c:	9b08      	ldr	r3, [sp, #32]
 8006a0e:	f804 eb01 	strb.w	lr, [r4], #1
 8006a12:	ebc3 0e04 	rsb	lr, r3, r4
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	459e      	cmp	lr, r3
 8006a1a:	d12b      	bne.n	8006a74 <_dtoa_r+0x6a4>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	f7fe f982 	bl	8004d28 <__adddf3>
 8006a24:	4632      	mov	r2, r6
 8006a26:	463b      	mov	r3, r7
 8006a28:	4680      	mov	r8, r0
 8006a2a:	4689      	mov	r9, r1
 8006a2c:	f000 fe72 	bl	8007714 <__aeabi_dcmpgt>
 8006a30:	b970      	cbnz	r0, 8006a50 <_dtoa_r+0x680>
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	4632      	mov	r2, r6
 8006a38:	463b      	mov	r3, r7
 8006a3a:	f000 fe43 	bl	80076c4 <__aeabi_dcmpeq>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f000 8264 	beq.w	8006f0c <_dtoa_r+0xb3c>
 8006a44:	07eb      	lsls	r3, r5, #31
 8006a46:	d403      	bmi.n	8006a50 <_dtoa_r+0x680>
 8006a48:	e260      	b.n	8006f0c <_dtoa_r+0xb3c>
 8006a4a:	46bb      	mov	fp, r7
 8006a4c:	e000      	b.n	8006a50 <_dtoa_r+0x680>
 8006a4e:	461c      	mov	r4, r3
 8006a50:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006a54:	2a39      	cmp	r2, #57	; 0x39
 8006a56:	f104 33ff 	add.w	r3, r4, #4294967295
 8006a5a:	d107      	bne.n	8006a6c <_dtoa_r+0x69c>
 8006a5c:	9a08      	ldr	r2, [sp, #32]
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d1f5      	bne.n	8006a4e <_dtoa_r+0x67e>
 8006a62:	2330      	movs	r3, #48	; 0x30
 8006a64:	7013      	strb	r3, [r2, #0]
 8006a66:	f10b 0b01 	add.w	fp, fp, #1
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	3201      	adds	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e24b      	b.n	8006f0c <_dtoa_r+0xb3c>
 8006a74:	2200      	movs	r2, #0
 8006a76:	4ba4      	ldr	r3, [pc, #656]	; (8006d08 <_dtoa_r+0x938>)
 8006a78:	f7fe fb08 	bl	800508c <__aeabi_dmul>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4680      	mov	r8, r0
 8006a82:	4689      	mov	r9, r1
 8006a84:	f000 fe1e 	bl	80076c4 <__aeabi_dcmpeq>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d0a8      	beq.n	80069de <_dtoa_r+0x60e>
 8006a8c:	e23e      	b.n	8006f0c <_dtoa_r+0xb3c>
 8006a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d032      	beq.n	8006afa <_dtoa_r+0x72a>
 8006a94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a96:	2a01      	cmp	r2, #1
 8006a98:	dc0a      	bgt.n	8006ab0 <_dtoa_r+0x6e0>
 8006a9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a9c:	b112      	cbz	r2, 8006aa4 <_dtoa_r+0x6d4>
 8006a9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006aa2:	e002      	b.n	8006aaa <_dtoa_r+0x6da>
 8006aa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aaa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006aac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006aae:	e018      	b.n	8006ae2 <_dtoa_r+0x712>
 8006ab0:	9b05      	ldr	r3, [sp, #20]
 8006ab2:	1e5d      	subs	r5, r3, #1
 8006ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab6:	42ab      	cmp	r3, r5
 8006ab8:	bfbf      	itttt	lt
 8006aba:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006abc:	950b      	strlt	r5, [sp, #44]	; 0x2c
 8006abe:	1aea      	sublt	r2, r5, r3
 8006ac0:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ac2:	bfb6      	itet	lt
 8006ac4:	189b      	addlt	r3, r3, r2
 8006ac6:	1b5d      	subge	r5, r3, r5
 8006ac8:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006aca:	9b05      	ldr	r3, [sp, #20]
 8006acc:	bfb8      	it	lt
 8006ace:	2500      	movlt	r5, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bfb9      	ittee	lt
 8006ad4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8006ad6:	9a05      	ldrlt	r2, [sp, #20]
 8006ad8:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 8006ada:	9b05      	ldrge	r3, [sp, #20]
 8006adc:	bfbc      	itt	lt
 8006ade:	1a9c      	sublt	r4, r3, r2
 8006ae0:	2300      	movlt	r3, #0
 8006ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ae4:	441a      	add	r2, r3
 8006ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aea:	4650      	mov	r0, sl
 8006aec:	441a      	add	r2, r3
 8006aee:	2101      	movs	r1, #1
 8006af0:	920a      	str	r2, [sp, #40]	; 0x28
 8006af2:	f000 fb14 	bl	800711e <__i2b>
 8006af6:	4606      	mov	r6, r0
 8006af8:	e002      	b.n	8006b00 <_dtoa_r+0x730>
 8006afa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006afc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006afe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b00:	b164      	cbz	r4, 8006b1c <_dtoa_r+0x74c>
 8006b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	dd09      	ble.n	8006b1c <_dtoa_r+0x74c>
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b0c:	bfa8      	it	ge
 8006b0e:	4623      	movge	r3, r4
 8006b10:	1ad2      	subs	r2, r2, r3
 8006b12:	9209      	str	r2, [sp, #36]	; 0x24
 8006b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b16:	1ae4      	subs	r4, r4, r3
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd20      	ble.n	8006b64 <_dtoa_r+0x794>
 8006b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b24:	b1c3      	cbz	r3, 8006b58 <_dtoa_r+0x788>
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	dd10      	ble.n	8006b4c <_dtoa_r+0x77c>
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4650      	mov	r0, sl
 8006b30:	f000 fb90 	bl	8007254 <__pow5mult>
 8006b34:	4606      	mov	r6, r0
 8006b36:	4631      	mov	r1, r6
 8006b38:	9a07      	ldr	r2, [sp, #28]
 8006b3a:	4650      	mov	r0, sl
 8006b3c:	f000 faf8 	bl	8007130 <__multiply>
 8006b40:	9907      	ldr	r1, [sp, #28]
 8006b42:	4607      	mov	r7, r0
 8006b44:	4650      	mov	r0, sl
 8006b46:	f000 fa48 	bl	8006fda <_Bfree>
 8006b4a:	9707      	str	r7, [sp, #28]
 8006b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b4e:	1b5a      	subs	r2, r3, r5
 8006b50:	d008      	beq.n	8006b64 <_dtoa_r+0x794>
 8006b52:	4650      	mov	r0, sl
 8006b54:	9907      	ldr	r1, [sp, #28]
 8006b56:	e002      	b.n	8006b5e <_dtoa_r+0x78e>
 8006b58:	9907      	ldr	r1, [sp, #28]
 8006b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	f000 fb79 	bl	8007254 <__pow5mult>
 8006b62:	9007      	str	r0, [sp, #28]
 8006b64:	4650      	mov	r0, sl
 8006b66:	2101      	movs	r1, #1
 8006b68:	f000 fad9 	bl	800711e <__i2b>
 8006b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	4605      	mov	r5, r0
 8006b72:	dd0a      	ble.n	8006b8a <_dtoa_r+0x7ba>
 8006b74:	4629      	mov	r1, r5
 8006b76:	461a      	mov	r2, r3
 8006b78:	4650      	mov	r0, sl
 8006b7a:	f000 fb6b 	bl	8007254 <__pow5mult>
 8006b7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	4605      	mov	r5, r0
 8006b84:	dd04      	ble.n	8006b90 <_dtoa_r+0x7c0>
 8006b86:	2700      	movs	r7, #0
 8006b88:	e01b      	b.n	8006bc2 <_dtoa_r+0x7f2>
 8006b8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	dc13      	bgt.n	8006bb8 <_dtoa_r+0x7e8>
 8006b90:	9b02      	ldr	r3, [sp, #8]
 8006b92:	b98b      	cbnz	r3, 8006bb8 <_dtoa_r+0x7e8>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b9a:	b97b      	cbnz	r3, 8006bbc <_dtoa_r+0x7ec>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006ba2:	0d3f      	lsrs	r7, r7, #20
 8006ba4:	053f      	lsls	r7, r7, #20
 8006ba6:	b157      	cbz	r7, 8006bbe <_dtoa_r+0x7ee>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	3301      	adds	r3, #1
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb4:	2701      	movs	r7, #1
 8006bb6:	e002      	b.n	8006bbe <_dtoa_r+0x7ee>
 8006bb8:	2700      	movs	r7, #0
 8006bba:	e000      	b.n	8006bbe <_dtoa_r+0x7ee>
 8006bbc:	9f02      	ldr	r7, [sp, #8]
 8006bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc0:	b143      	cbz	r3, 8006bd4 <_dtoa_r+0x804>
 8006bc2:	692b      	ldr	r3, [r5, #16]
 8006bc4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006bc8:	6918      	ldr	r0, [r3, #16]
 8006bca:	f000 fa5b 	bl	8007084 <__hi0bits>
 8006bce:	f1c0 0020 	rsb	r0, r0, #32
 8006bd2:	e000      	b.n	8006bd6 <_dtoa_r+0x806>
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd8:	4418      	add	r0, r3
 8006bda:	f010 001f 	ands.w	r0, r0, #31
 8006bde:	d008      	beq.n	8006bf2 <_dtoa_r+0x822>
 8006be0:	f1c0 0320 	rsb	r3, r0, #32
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	dd02      	ble.n	8006bee <_dtoa_r+0x81e>
 8006be8:	f1c0 001c 	rsb	r0, r0, #28
 8006bec:	e002      	b.n	8006bf4 <_dtoa_r+0x824>
 8006bee:	d008      	beq.n	8006c02 <_dtoa_r+0x832>
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	301c      	adds	r0, #28
 8006bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf6:	4403      	add	r3, r0
 8006bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfc:	4403      	add	r3, r0
 8006bfe:	4404      	add	r4, r0
 8006c00:	930a      	str	r3, [sp, #40]	; 0x28
 8006c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd05      	ble.n	8006c14 <_dtoa_r+0x844>
 8006c08:	4650      	mov	r0, sl
 8006c0a:	9907      	ldr	r1, [sp, #28]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f000 fb6f 	bl	80072f0 <__lshift>
 8006c12:	9007      	str	r0, [sp, #28]
 8006c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dd05      	ble.n	8006c26 <_dtoa_r+0x856>
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4650      	mov	r0, sl
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f000 fb66 	bl	80072f0 <__lshift>
 8006c24:	4605      	mov	r5, r0
 8006c26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c28:	b1eb      	cbz	r3, 8006c66 <_dtoa_r+0x896>
 8006c2a:	9807      	ldr	r0, [sp, #28]
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f000 fbb2 	bl	8007396 <__mcmp>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	da17      	bge.n	8006c66 <_dtoa_r+0x896>
 8006c36:	2300      	movs	r3, #0
 8006c38:	4650      	mov	r0, sl
 8006c3a:	9907      	ldr	r1, [sp, #28]
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	f000 f9e3 	bl	8007008 <__multadd>
 8006c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c44:	9007      	str	r0, [sp, #28]
 8006c46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 8170 	beq.w	8006f30 <_dtoa_r+0xb60>
 8006c50:	4631      	mov	r1, r6
 8006c52:	2300      	movs	r3, #0
 8006c54:	4650      	mov	r0, sl
 8006c56:	220a      	movs	r2, #10
 8006c58:	f000 f9d6 	bl	8007008 <__multadd>
 8006c5c:	9b06      	ldr	r3, [sp, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	4606      	mov	r6, r0
 8006c62:	dc33      	bgt.n	8006ccc <_dtoa_r+0x8fc>
 8006c64:	e16d      	b.n	8006f42 <_dtoa_r+0xb72>
 8006c66:	9b05      	ldr	r3, [sp, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dc26      	bgt.n	8006cba <_dtoa_r+0x8ea>
 8006c6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	dd23      	ble.n	8006cba <_dtoa_r+0x8ea>
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	9306      	str	r3, [sp, #24]
 8006c76:	9b06      	ldr	r3, [sp, #24]
 8006c78:	b973      	cbnz	r3, 8006c98 <_dtoa_r+0x8c8>
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	2205      	movs	r2, #5
 8006c7e:	4650      	mov	r0, sl
 8006c80:	f000 f9c2 	bl	8007008 <__multadd>
 8006c84:	4605      	mov	r5, r0
 8006c86:	4629      	mov	r1, r5
 8006c88:	9807      	ldr	r0, [sp, #28]
 8006c8a:	f000 fb84 	bl	8007396 <__mcmp>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	dc09      	bgt.n	8006ca6 <_dtoa_r+0x8d6>
 8006c92:	e001      	b.n	8006c98 <_dtoa_r+0x8c8>
 8006c94:	2500      	movs	r5, #0
 8006c96:	462e      	mov	r6, r5
 8006c98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c9a:	9c08      	ldr	r4, [sp, #32]
 8006c9c:	ea6f 0b03 	mvn.w	fp, r3
 8006ca0:	e008      	b.n	8006cb4 <_dtoa_r+0x8e4>
 8006ca2:	46bb      	mov	fp, r7
 8006ca4:	462e      	mov	r6, r5
 8006ca6:	9b08      	ldr	r3, [sp, #32]
 8006ca8:	9a08      	ldr	r2, [sp, #32]
 8006caa:	1c5c      	adds	r4, r3, #1
 8006cac:	2331      	movs	r3, #49	; 0x31
 8006cae:	7013      	strb	r3, [r2, #0]
 8006cb0:	f10b 0b01 	add.w	fp, fp, #1
 8006cb4:	46b1      	mov	r9, r6
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	e114      	b.n	8006ee4 <_dtoa_r+0xb14>
 8006cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cbc:	b923      	cbnz	r3, 8006cc8 <_dtoa_r+0x8f8>
 8006cbe:	9b05      	ldr	r3, [sp, #20]
 8006cc0:	9306      	str	r3, [sp, #24]
 8006cc2:	9f08      	ldr	r7, [sp, #32]
 8006cc4:	9c07      	ldr	r4, [sp, #28]
 8006cc6:	e0cc      	b.n	8006e62 <_dtoa_r+0xa92>
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	9306      	str	r3, [sp, #24]
 8006ccc:	2c00      	cmp	r4, #0
 8006cce:	dd05      	ble.n	8006cdc <_dtoa_r+0x90c>
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4650      	mov	r0, sl
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	f000 fb0b 	bl	80072f0 <__lshift>
 8006cda:	4606      	mov	r6, r0
 8006cdc:	b1b7      	cbz	r7, 8006d0c <_dtoa_r+0x93c>
 8006cde:	6871      	ldr	r1, [r6, #4]
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	f000 f945 	bl	8006f70 <_Balloc>
 8006ce6:	6932      	ldr	r2, [r6, #16]
 8006ce8:	3202      	adds	r2, #2
 8006cea:	4604      	mov	r4, r0
 8006cec:	f106 010c 	add.w	r1, r6, #12
 8006cf0:	0092      	lsls	r2, r2, #2
 8006cf2:	300c      	adds	r0, #12
 8006cf4:	f7fe ff4c 	bl	8005b90 <memcpy>
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f000 faf7 	bl	80072f0 <__lshift>
 8006d02:	4681      	mov	r9, r0
 8006d04:	e003      	b.n	8006d0e <_dtoa_r+0x93e>
 8006d06:	bf00      	nop
 8006d08:	40240000 	.word	0x40240000
 8006d0c:	46b1      	mov	r9, r6
 8006d0e:	9f08      	ldr	r7, [sp, #32]
 8006d10:	9c07      	ldr	r4, [sp, #28]
 8006d12:	4629      	mov	r1, r5
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7ff facb 	bl	80062b0 <quorem>
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	9009      	str	r0, [sp, #36]	; 0x24
 8006d1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fb37 	bl	8007396 <__mcmp>
 8006d28:	464a      	mov	r2, r9
 8006d2a:	9005      	str	r0, [sp, #20]
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4650      	mov	r0, sl
 8006d30:	f000 fb4d 	bl	80073ce <__mdiff>
 8006d34:	68c2      	ldr	r2, [r0, #12]
 8006d36:	4603      	mov	r3, r0
 8006d38:	b93a      	cbnz	r2, 8006d4a <_dtoa_r+0x97a>
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	9307      	str	r3, [sp, #28]
 8006d40:	f000 fb29 	bl	8007396 <__mcmp>
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	4602      	mov	r2, r0
 8006d48:	e000      	b.n	8006d4c <_dtoa_r+0x97c>
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	4619      	mov	r1, r3
 8006d50:	9207      	str	r2, [sp, #28]
 8006d52:	f000 f942 	bl	8006fda <_Bfree>
 8006d56:	9a07      	ldr	r2, [sp, #28]
 8006d58:	b9a2      	cbnz	r2, 8006d84 <_dtoa_r+0x9b4>
 8006d5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d5c:	b993      	cbnz	r3, 8006d84 <_dtoa_r+0x9b4>
 8006d5e:	9b02      	ldr	r3, [sp, #8]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	b973      	cbnz	r3, 8006d84 <_dtoa_r+0x9b4>
 8006d66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	9407      	str	r4, [sp, #28]
 8006d6e:	d040      	beq.n	8006df2 <_dtoa_r+0xa22>
 8006d70:	9b05      	ldr	r3, [sp, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfc8      	it	gt
 8006d76:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8006d78:	f107 0401 	add.w	r4, r7, #1
 8006d7c:	bfc8      	it	gt
 8006d7e:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 8006d82:	e03d      	b.n	8006e00 <_dtoa_r+0xa30>
 8006d84:	9b05      	ldr	r3, [sp, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da04      	bge.n	8006d94 <_dtoa_r+0x9c4>
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	46c4      	mov	ip, r8
 8006d8e:	9407      	str	r4, [sp, #28]
 8006d90:	dc08      	bgt.n	8006da4 <_dtoa_r+0x9d4>
 8006d92:	e021      	b.n	8006dd8 <_dtoa_r+0xa08>
 8006d94:	d124      	bne.n	8006de0 <_dtoa_r+0xa10>
 8006d96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d98:	bb13      	cbnz	r3, 8006de0 <_dtoa_r+0xa10>
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	b9f3      	cbnz	r3, 8006de0 <_dtoa_r+0xa10>
 8006da2:	e7f2      	b.n	8006d8a <_dtoa_r+0x9ba>
 8006da4:	4621      	mov	r1, r4
 8006da6:	2201      	movs	r2, #1
 8006da8:	4650      	mov	r0, sl
 8006daa:	9705      	str	r7, [sp, #20]
 8006dac:	f8cd 8008 	str.w	r8, [sp, #8]
 8006db0:	f000 fa9e 	bl	80072f0 <__lshift>
 8006db4:	4629      	mov	r1, r5
 8006db6:	9007      	str	r0, [sp, #28]
 8006db8:	f000 faed 	bl	8007396 <__mcmp>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006dc2:	9b05      	ldr	r3, [sp, #20]
 8006dc4:	dc03      	bgt.n	8006dce <_dtoa_r+0x9fe>
 8006dc6:	d107      	bne.n	8006dd8 <_dtoa_r+0xa08>
 8006dc8:	f018 0f01 	tst.w	r8, #1
 8006dcc:	d004      	beq.n	8006dd8 <_dtoa_r+0xa08>
 8006dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dd2:	d00e      	beq.n	8006df2 <_dtoa_r+0xa22>
 8006dd4:	f108 0c01 	add.w	ip, r8, #1
 8006dd8:	1c7c      	adds	r4, r7, #1
 8006dda:	f887 c000 	strb.w	ip, [r7]
 8006dde:	e081      	b.n	8006ee4 <_dtoa_r+0xb14>
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	f107 0201 	add.w	r2, r7, #1
 8006de6:	dd0e      	ble.n	8006e06 <_dtoa_r+0xa36>
 8006de8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dec:	463b      	mov	r3, r7
 8006dee:	9407      	str	r4, [sp, #28]
 8006df0:	d103      	bne.n	8006dfa <_dtoa_r+0xa2a>
 8006df2:	2239      	movs	r2, #57	; 0x39
 8006df4:	3701      	adds	r7, #1
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e057      	b.n	8006eaa <_dtoa_r+0xada>
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	f108 0801 	add.w	r8, r8, #1
 8006e00:	f887 8000 	strb.w	r8, [r7]
 8006e04:	e06e      	b.n	8006ee4 <_dtoa_r+0xb14>
 8006e06:	9b08      	ldr	r3, [sp, #32]
 8006e08:	f802 8c01 	strb.w	r8, [r2, #-1]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	4617      	mov	r7, r2
 8006e10:	9a06      	ldr	r2, [sp, #24]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03a      	beq.n	8006e8c <_dtoa_r+0xabc>
 8006e16:	4621      	mov	r1, r4
 8006e18:	220a      	movs	r2, #10
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	f000 f8f3 	bl	8007008 <__multadd>
 8006e22:	454e      	cmp	r6, r9
 8006e24:	4604      	mov	r4, r0
 8006e26:	4631      	mov	r1, r6
 8006e28:	4650      	mov	r0, sl
 8006e2a:	f04f 020a 	mov.w	r2, #10
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	d104      	bne.n	8006e3e <_dtoa_r+0xa6e>
 8006e34:	f000 f8e8 	bl	8007008 <__multadd>
 8006e38:	4606      	mov	r6, r0
 8006e3a:	4681      	mov	r9, r0
 8006e3c:	e769      	b.n	8006d12 <_dtoa_r+0x942>
 8006e3e:	f000 f8e3 	bl	8007008 <__multadd>
 8006e42:	4649      	mov	r1, r9
 8006e44:	4606      	mov	r6, r0
 8006e46:	220a      	movs	r2, #10
 8006e48:	4650      	mov	r0, sl
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f000 f8dc 	bl	8007008 <__multadd>
 8006e50:	4681      	mov	r9, r0
 8006e52:	e75e      	b.n	8006d12 <_dtoa_r+0x942>
 8006e54:	4621      	mov	r1, r4
 8006e56:	4650      	mov	r0, sl
 8006e58:	220a      	movs	r2, #10
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f000 f8d4 	bl	8007008 <__multadd>
 8006e60:	4604      	mov	r4, r0
 8006e62:	4620      	mov	r0, r4
 8006e64:	4629      	mov	r1, r5
 8006e66:	f7ff fa23 	bl	80062b0 <quorem>
 8006e6a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e6e:	f807 8b01 	strb.w	r8, [r7], #1
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	9a06      	ldr	r2, [sp, #24]
 8006e76:	1afb      	subs	r3, r7, r3
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	dbeb      	blt.n	8006e54 <_dtoa_r+0xa84>
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	2a01      	cmp	r2, #1
 8006e80:	bfac      	ite	ge
 8006e82:	189b      	addge	r3, r3, r2
 8006e84:	3301      	addlt	r3, #1
 8006e86:	46b1      	mov	r9, r6
 8006e88:	461f      	mov	r7, r3
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4650      	mov	r0, sl
 8006e92:	f000 fa2d 	bl	80072f0 <__lshift>
 8006e96:	4629      	mov	r1, r5
 8006e98:	9007      	str	r0, [sp, #28]
 8006e9a:	f000 fa7c 	bl	8007396 <__mcmp>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	dc03      	bgt.n	8006eaa <_dtoa_r+0xada>
 8006ea2:	d116      	bne.n	8006ed2 <_dtoa_r+0xb02>
 8006ea4:	f018 0f01 	tst.w	r8, #1
 8006ea8:	d013      	beq.n	8006ed2 <_dtoa_r+0xb02>
 8006eaa:	463c      	mov	r4, r7
 8006eac:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006eb0:	2b39      	cmp	r3, #57	; 0x39
 8006eb2:	f104 32ff 	add.w	r2, r4, #4294967295
 8006eb6:	d109      	bne.n	8006ecc <_dtoa_r+0xafc>
 8006eb8:	9b08      	ldr	r3, [sp, #32]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d104      	bne.n	8006ec8 <_dtoa_r+0xaf8>
 8006ebe:	f10b 0b01 	add.w	fp, fp, #1
 8006ec2:	2331      	movs	r3, #49	; 0x31
 8006ec4:	9a08      	ldr	r2, [sp, #32]
 8006ec6:	e002      	b.n	8006ece <_dtoa_r+0xafe>
 8006ec8:	4614      	mov	r4, r2
 8006eca:	e7ef      	b.n	8006eac <_dtoa_r+0xadc>
 8006ecc:	3301      	adds	r3, #1
 8006ece:	7013      	strb	r3, [r2, #0]
 8006ed0:	e008      	b.n	8006ee4 <_dtoa_r+0xb14>
 8006ed2:	463c      	mov	r4, r7
 8006ed4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006ed8:	2b30      	cmp	r3, #48	; 0x30
 8006eda:	f104 32ff 	add.w	r2, r4, #4294967295
 8006ede:	d101      	bne.n	8006ee4 <_dtoa_r+0xb14>
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	e7f7      	b.n	8006ed4 <_dtoa_r+0xb04>
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f000 f877 	bl	8006fda <_Bfree>
 8006eec:	f1b9 0f00 	cmp.w	r9, #0
 8006ef0:	d00c      	beq.n	8006f0c <_dtoa_r+0xb3c>
 8006ef2:	b12e      	cbz	r6, 8006f00 <_dtoa_r+0xb30>
 8006ef4:	454e      	cmp	r6, r9
 8006ef6:	d003      	beq.n	8006f00 <_dtoa_r+0xb30>
 8006ef8:	4650      	mov	r0, sl
 8006efa:	4631      	mov	r1, r6
 8006efc:	f000 f86d 	bl	8006fda <_Bfree>
 8006f00:	4650      	mov	r0, sl
 8006f02:	4649      	mov	r1, r9
 8006f04:	f000 f869 	bl	8006fda <_Bfree>
 8006f08:	e000      	b.n	8006f0c <_dtoa_r+0xb3c>
 8006f0a:	46bb      	mov	fp, r7
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	9907      	ldr	r1, [sp, #28]
 8006f10:	f000 f863 	bl	8006fda <_Bfree>
 8006f14:	2300      	movs	r3, #0
 8006f16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f18:	7023      	strb	r3, [r4, #0]
 8006f1a:	f10b 0301 	add.w	r3, fp, #1
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f22:	b11b      	cbz	r3, 8006f2c <_dtoa_r+0xb5c>
 8006f24:	601c      	str	r4, [r3, #0]
 8006f26:	e001      	b.n	8006f2c <_dtoa_r+0xb5c>
 8006f28:	480a      	ldr	r0, [pc, #40]	; (8006f54 <_dtoa_r+0xb84>)
 8006f2a:	e00f      	b.n	8006f4c <_dtoa_r+0xb7c>
 8006f2c:	9808      	ldr	r0, [sp, #32]
 8006f2e:	e00d      	b.n	8006f4c <_dtoa_r+0xb7c>
 8006f30:	9b06      	ldr	r3, [sp, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f73f aec5 	bgt.w	8006cc2 <_dtoa_r+0x8f2>
 8006f38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	f73f ae9b 	bgt.w	8006c76 <_dtoa_r+0x8a6>
 8006f40:	e6bf      	b.n	8006cc2 <_dtoa_r+0x8f2>
 8006f42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	f73f ae96 	bgt.w	8006c76 <_dtoa_r+0x8a6>
 8006f4a:	e6bf      	b.n	8006ccc <_dtoa_r+0x8fc>
 8006f4c:	b017      	add	sp, #92	; 0x5c
 8006f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f52:	bf00      	nop
 8006f54:	08007906 	.word	0x08007906

08006f58 <_localeconv_r>:
 8006f58:	4800      	ldr	r0, [pc, #0]	; (8006f5c <_localeconv_r+0x4>)
 8006f5a:	4770      	bx	lr
 8006f5c:	1ffe8a94 	.word	0x1ffe8a94

08006f60 <malloc>:
 8006f60:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <malloc+0xc>)
 8006f62:	4601      	mov	r1, r0
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	f000 baf1 	b.w	800754c <_malloc_r>
 8006f6a:	bf00      	nop
 8006f6c:	1ffe8a90 	.word	0x1ffe8a90

08006f70 <_Balloc>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f74:	4604      	mov	r4, r0
 8006f76:	460e      	mov	r6, r1
 8006f78:	b93d      	cbnz	r5, 8006f8a <_Balloc+0x1a>
 8006f7a:	2010      	movs	r0, #16
 8006f7c:	f7ff fff0 	bl	8006f60 <malloc>
 8006f80:	6260      	str	r0, [r4, #36]	; 0x24
 8006f82:	6045      	str	r5, [r0, #4]
 8006f84:	6085      	str	r5, [r0, #8]
 8006f86:	6005      	str	r5, [r0, #0]
 8006f88:	60c5      	str	r5, [r0, #12]
 8006f8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f8c:	68eb      	ldr	r3, [r5, #12]
 8006f8e:	b143      	cbz	r3, 8006fa2 <_Balloc+0x32>
 8006f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f98:	b178      	cbz	r0, 8006fba <_Balloc+0x4a>
 8006f9a:	6802      	ldr	r2, [r0, #0]
 8006f9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006fa0:	e017      	b.n	8006fd2 <_Balloc+0x62>
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	2104      	movs	r1, #4
 8006fa6:	2221      	movs	r2, #33	; 0x21
 8006fa8:	f000 fac2 	bl	8007530 <_calloc_r>
 8006fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fae:	60e8      	str	r0, [r5, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ec      	bne.n	8006f90 <_Balloc+0x20>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
 8006fba:	2101      	movs	r1, #1
 8006fbc:	fa01 f506 	lsl.w	r5, r1, r6
 8006fc0:	1d6a      	adds	r2, r5, #5
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	0092      	lsls	r2, r2, #2
 8006fc6:	f000 fab3 	bl	8007530 <_calloc_r>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d0f3      	beq.n	8006fb6 <_Balloc+0x46>
 8006fce:	6046      	str	r6, [r0, #4]
 8006fd0:	6085      	str	r5, [r0, #8]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6103      	str	r3, [r0, #16]
 8006fd6:	60c3      	str	r3, [r0, #12]
 8006fd8:	bd70      	pop	{r4, r5, r6, pc}

08006fda <_Bfree>:
 8006fda:	b570      	push	{r4, r5, r6, lr}
 8006fdc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	b93c      	cbnz	r4, 8006ff4 <_Bfree+0x1a>
 8006fe4:	2010      	movs	r0, #16
 8006fe6:	f7ff ffbb 	bl	8006f60 <malloc>
 8006fea:	6270      	str	r0, [r6, #36]	; 0x24
 8006fec:	6044      	str	r4, [r0, #4]
 8006fee:	6084      	str	r4, [r0, #8]
 8006ff0:	6004      	str	r4, [r0, #0]
 8006ff2:	60c4      	str	r4, [r0, #12]
 8006ff4:	b13d      	cbz	r5, 8007006 <_Bfree+0x2c>
 8006ff6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ff8:	686a      	ldr	r2, [r5, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007000:	6029      	str	r1, [r5, #0]
 8007002:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <__multadd>:
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700c:	690f      	ldr	r7, [r1, #16]
 800700e:	4698      	mov	r8, r3
 8007010:	4606      	mov	r6, r0
 8007012:	460c      	mov	r4, r1
 8007014:	f101 0e14 	add.w	lr, r1, #20
 8007018:	2300      	movs	r3, #0
 800701a:	f8de 0000 	ldr.w	r0, [lr]
 800701e:	b285      	uxth	r5, r0
 8007020:	0c01      	lsrs	r1, r0, #16
 8007022:	fb02 8505 	mla	r5, r2, r5, r8
 8007026:	4351      	muls	r1, r2
 8007028:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800702c:	3301      	adds	r3, #1
 800702e:	b2ad      	uxth	r5, r5
 8007030:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8007034:	42bb      	cmp	r3, r7
 8007036:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 800703a:	f84e 1b04 	str.w	r1, [lr], #4
 800703e:	dbec      	blt.n	800701a <__multadd+0x12>
 8007040:	f1b8 0f00 	cmp.w	r8, #0
 8007044:	d01b      	beq.n	800707e <__multadd+0x76>
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	429f      	cmp	r7, r3
 800704a:	db12      	blt.n	8007072 <__multadd+0x6a>
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	4630      	mov	r0, r6
 8007050:	3101      	adds	r1, #1
 8007052:	f7ff ff8d 	bl	8006f70 <_Balloc>
 8007056:	6922      	ldr	r2, [r4, #16]
 8007058:	3202      	adds	r2, #2
 800705a:	f104 010c 	add.w	r1, r4, #12
 800705e:	4605      	mov	r5, r0
 8007060:	0092      	lsls	r2, r2, #2
 8007062:	300c      	adds	r0, #12
 8007064:	f7fe fd94 	bl	8005b90 <memcpy>
 8007068:	4621      	mov	r1, r4
 800706a:	4630      	mov	r0, r6
 800706c:	f7ff ffb5 	bl	8006fda <_Bfree>
 8007070:	462c      	mov	r4, r5
 8007072:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8007076:	3701      	adds	r7, #1
 8007078:	f8c3 8014 	str.w	r8, [r3, #20]
 800707c:	6127      	str	r7, [r4, #16]
 800707e:	4620      	mov	r0, r4
 8007080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007084 <__hi0bits>:
 8007084:	0c03      	lsrs	r3, r0, #16
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	b913      	cbnz	r3, 8007090 <__hi0bits+0xc>
 800708a:	0400      	lsls	r0, r0, #16
 800708c:	2310      	movs	r3, #16
 800708e:	e000      	b.n	8007092 <__hi0bits+0xe>
 8007090:	2300      	movs	r3, #0
 8007092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007096:	bf04      	itt	eq
 8007098:	0200      	lsleq	r0, r0, #8
 800709a:	3308      	addeq	r3, #8
 800709c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070a0:	bf04      	itt	eq
 80070a2:	0100      	lsleq	r0, r0, #4
 80070a4:	3304      	addeq	r3, #4
 80070a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070aa:	bf04      	itt	eq
 80070ac:	0080      	lsleq	r0, r0, #2
 80070ae:	3302      	addeq	r3, #2
 80070b0:	2800      	cmp	r0, #0
 80070b2:	db03      	blt.n	80070bc <__hi0bits+0x38>
 80070b4:	0042      	lsls	r2, r0, #1
 80070b6:	d503      	bpl.n	80070c0 <__hi0bits+0x3c>
 80070b8:	1c58      	adds	r0, r3, #1
 80070ba:	4770      	bx	lr
 80070bc:	4618      	mov	r0, r3
 80070be:	4770      	bx	lr
 80070c0:	2020      	movs	r0, #32
 80070c2:	4770      	bx	lr

080070c4 <__lo0bits>:
 80070c4:	6803      	ldr	r3, [r0, #0]
 80070c6:	f013 0207 	ands.w	r2, r3, #7
 80070ca:	d00b      	beq.n	80070e4 <__lo0bits+0x20>
 80070cc:	07d9      	lsls	r1, r3, #31
 80070ce:	d422      	bmi.n	8007116 <__lo0bits+0x52>
 80070d0:	079a      	lsls	r2, r3, #30
 80070d2:	bf4b      	itete	mi
 80070d4:	085b      	lsrmi	r3, r3, #1
 80070d6:	089b      	lsrpl	r3, r3, #2
 80070d8:	6003      	strmi	r3, [r0, #0]
 80070da:	6003      	strpl	r3, [r0, #0]
 80070dc:	bf4c      	ite	mi
 80070de:	2001      	movmi	r0, #1
 80070e0:	2002      	movpl	r0, #2
 80070e2:	4770      	bx	lr
 80070e4:	b299      	uxth	r1, r3
 80070e6:	b909      	cbnz	r1, 80070ec <__lo0bits+0x28>
 80070e8:	0c1b      	lsrs	r3, r3, #16
 80070ea:	2210      	movs	r2, #16
 80070ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070f0:	bf04      	itt	eq
 80070f2:	0a1b      	lsreq	r3, r3, #8
 80070f4:	3208      	addeq	r2, #8
 80070f6:	0719      	lsls	r1, r3, #28
 80070f8:	bf04      	itt	eq
 80070fa:	091b      	lsreq	r3, r3, #4
 80070fc:	3204      	addeq	r2, #4
 80070fe:	0799      	lsls	r1, r3, #30
 8007100:	bf04      	itt	eq
 8007102:	089b      	lsreq	r3, r3, #2
 8007104:	3202      	addeq	r2, #2
 8007106:	07d9      	lsls	r1, r3, #31
 8007108:	d402      	bmi.n	8007110 <__lo0bits+0x4c>
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	d005      	beq.n	800711a <__lo0bits+0x56>
 800710e:	3201      	adds	r2, #1
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	4610      	mov	r0, r2
 8007114:	4770      	bx	lr
 8007116:	2000      	movs	r0, #0
 8007118:	4770      	bx	lr
 800711a:	2020      	movs	r0, #32
 800711c:	4770      	bx	lr

0800711e <__i2b>:
 800711e:	b510      	push	{r4, lr}
 8007120:	460c      	mov	r4, r1
 8007122:	2101      	movs	r1, #1
 8007124:	f7ff ff24 	bl	8006f70 <_Balloc>
 8007128:	2201      	movs	r2, #1
 800712a:	6144      	str	r4, [r0, #20]
 800712c:	6102      	str	r2, [r0, #16]
 800712e:	bd10      	pop	{r4, pc}

08007130 <__multiply>:
 8007130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	4614      	mov	r4, r2
 8007136:	690a      	ldr	r2, [r1, #16]
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	429a      	cmp	r2, r3
 800713c:	bfb8      	it	lt
 800713e:	460b      	movlt	r3, r1
 8007140:	4688      	mov	r8, r1
 8007142:	bfbc      	itt	lt
 8007144:	46a0      	movlt	r8, r4
 8007146:	461c      	movlt	r4, r3
 8007148:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800714c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007150:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007154:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007158:	eb07 0609 	add.w	r6, r7, r9
 800715c:	429e      	cmp	r6, r3
 800715e:	bfc8      	it	gt
 8007160:	3101      	addgt	r1, #1
 8007162:	f7ff ff05 	bl	8006f70 <_Balloc>
 8007166:	f100 0514 	add.w	r5, r0, #20
 800716a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800716e:	462b      	mov	r3, r5
 8007170:	4563      	cmp	r3, ip
 8007172:	d203      	bcs.n	800717c <__multiply+0x4c>
 8007174:	2200      	movs	r2, #0
 8007176:	f843 2b04 	str.w	r2, [r3], #4
 800717a:	e7f9      	b.n	8007170 <__multiply+0x40>
 800717c:	f104 0214 	add.w	r2, r4, #20
 8007180:	f108 0114 	add.w	r1, r8, #20
 8007184:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007188:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	9b00      	ldr	r3, [sp, #0]
 8007190:	9201      	str	r2, [sp, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d257      	bcs.n	8007246 <__multiply+0x116>
 8007196:	f8b2 b000 	ldrh.w	fp, [r2]
 800719a:	f1bb 0f00 	cmp.w	fp, #0
 800719e:	d023      	beq.n	80071e8 <__multiply+0xb8>
 80071a0:	4689      	mov	r9, r1
 80071a2:	46ae      	mov	lr, r5
 80071a4:	f04f 0800 	mov.w	r8, #0
 80071a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80071ac:	f8be a000 	ldrh.w	sl, [lr]
 80071b0:	b2a3      	uxth	r3, r4
 80071b2:	fb0b a303 	mla	r3, fp, r3, sl
 80071b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071ba:	f8de 4000 	ldr.w	r4, [lr]
 80071be:	4443      	add	r3, r8
 80071c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80071c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80071cc:	46f2      	mov	sl, lr
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80071d4:	454f      	cmp	r7, r9
 80071d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071da:	f84a 3b04 	str.w	r3, [sl], #4
 80071de:	d901      	bls.n	80071e4 <__multiply+0xb4>
 80071e0:	46d6      	mov	lr, sl
 80071e2:	e7e1      	b.n	80071a8 <__multiply+0x78>
 80071e4:	f8ce 8004 	str.w	r8, [lr, #4]
 80071e8:	9b01      	ldr	r3, [sp, #4]
 80071ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80071ee:	3204      	adds	r2, #4
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	d021      	beq.n	800723a <__multiply+0x10a>
 80071f6:	682b      	ldr	r3, [r5, #0]
 80071f8:	462c      	mov	r4, r5
 80071fa:	4689      	mov	r9, r1
 80071fc:	f04f 0800 	mov.w	r8, #0
 8007200:	f8b9 e000 	ldrh.w	lr, [r9]
 8007204:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8007208:	fb0a be0e 	mla	lr, sl, lr, fp
 800720c:	44f0      	add	r8, lr
 800720e:	46a3      	mov	fp, r4
 8007210:	b29b      	uxth	r3, r3
 8007212:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007216:	f84b 3b04 	str.w	r3, [fp], #4
 800721a:	f859 3b04 	ldr.w	r3, [r9], #4
 800721e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007222:	0c1b      	lsrs	r3, r3, #16
 8007224:	fb0a e303 	mla	r3, sl, r3, lr
 8007228:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800722c:	45b9      	cmp	r9, r7
 800722e:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007232:	d201      	bcs.n	8007238 <__multiply+0x108>
 8007234:	465c      	mov	r4, fp
 8007236:	e7e3      	b.n	8007200 <__multiply+0xd0>
 8007238:	6063      	str	r3, [r4, #4]
 800723a:	3504      	adds	r5, #4
 800723c:	e7a7      	b.n	800718e <__multiply+0x5e>
 800723e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007242:	b913      	cbnz	r3, 800724a <__multiply+0x11a>
 8007244:	3e01      	subs	r6, #1
 8007246:	2e00      	cmp	r6, #0
 8007248:	dcf9      	bgt.n	800723e <__multiply+0x10e>
 800724a:	6106      	str	r6, [r0, #16]
 800724c:	b003      	add	sp, #12
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007254 <__pow5mult>:
 8007254:	f012 0303 	ands.w	r3, r2, #3
 8007258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725c:	4606      	mov	r6, r0
 800725e:	460f      	mov	r7, r1
 8007260:	4615      	mov	r5, r2
 8007262:	d007      	beq.n	8007274 <__pow5mult+0x20>
 8007264:	3b01      	subs	r3, #1
 8007266:	4a21      	ldr	r2, [pc, #132]	; (80072ec <__pow5mult+0x98>)
 8007268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800726c:	2300      	movs	r3, #0
 800726e:	f7ff fecb 	bl	8007008 <__multadd>
 8007272:	4607      	mov	r7, r0
 8007274:	10ad      	asrs	r5, r5, #2
 8007276:	d035      	beq.n	80072e4 <__pow5mult+0x90>
 8007278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800727a:	b93c      	cbnz	r4, 800728c <__pow5mult+0x38>
 800727c:	2010      	movs	r0, #16
 800727e:	f7ff fe6f 	bl	8006f60 <malloc>
 8007282:	6270      	str	r0, [r6, #36]	; 0x24
 8007284:	6044      	str	r4, [r0, #4]
 8007286:	6084      	str	r4, [r0, #8]
 8007288:	6004      	str	r4, [r0, #0]
 800728a:	60c4      	str	r4, [r0, #12]
 800728c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007294:	b97c      	cbnz	r4, 80072b6 <__pow5mult+0x62>
 8007296:	4630      	mov	r0, r6
 8007298:	f240 2171 	movw	r1, #625	; 0x271
 800729c:	f7ff ff3f 	bl	800711e <__i2b>
 80072a0:	2300      	movs	r3, #0
 80072a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80072a6:	4604      	mov	r4, r0
 80072a8:	6003      	str	r3, [r0, #0]
 80072aa:	e004      	b.n	80072b6 <__pow5mult+0x62>
 80072ac:	106d      	asrs	r5, r5, #1
 80072ae:	d019      	beq.n	80072e4 <__pow5mult+0x90>
 80072b0:	6820      	ldr	r0, [r4, #0]
 80072b2:	b170      	cbz	r0, 80072d2 <__pow5mult+0x7e>
 80072b4:	4604      	mov	r4, r0
 80072b6:	07eb      	lsls	r3, r5, #31
 80072b8:	d5f8      	bpl.n	80072ac <__pow5mult+0x58>
 80072ba:	4639      	mov	r1, r7
 80072bc:	4622      	mov	r2, r4
 80072be:	4630      	mov	r0, r6
 80072c0:	f7ff ff36 	bl	8007130 <__multiply>
 80072c4:	4639      	mov	r1, r7
 80072c6:	4680      	mov	r8, r0
 80072c8:	4630      	mov	r0, r6
 80072ca:	f7ff fe86 	bl	8006fda <_Bfree>
 80072ce:	4647      	mov	r7, r8
 80072d0:	e7ec      	b.n	80072ac <__pow5mult+0x58>
 80072d2:	4630      	mov	r0, r6
 80072d4:	4621      	mov	r1, r4
 80072d6:	4622      	mov	r2, r4
 80072d8:	f7ff ff2a 	bl	8007130 <__multiply>
 80072dc:	2300      	movs	r3, #0
 80072de:	6020      	str	r0, [r4, #0]
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	e7e7      	b.n	80072b4 <__pow5mult+0x60>
 80072e4:	4638      	mov	r0, r7
 80072e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ea:	bf00      	nop
 80072ec:	08007a10 	.word	0x08007a10

080072f0 <__lshift>:
 80072f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	460c      	mov	r4, r1
 80072f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072fa:	6923      	ldr	r3, [r4, #16]
 80072fc:	6849      	ldr	r1, [r1, #4]
 80072fe:	eb0a 0903 	add.w	r9, sl, r3
 8007302:	68a3      	ldr	r3, [r4, #8]
 8007304:	4607      	mov	r7, r0
 8007306:	4616      	mov	r6, r2
 8007308:	f109 0501 	add.w	r5, r9, #1
 800730c:	429d      	cmp	r5, r3
 800730e:	dd02      	ble.n	8007316 <__lshift+0x26>
 8007310:	3101      	adds	r1, #1
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	e7fa      	b.n	800730c <__lshift+0x1c>
 8007316:	4638      	mov	r0, r7
 8007318:	f7ff fe2a 	bl	8006f70 <_Balloc>
 800731c:	2300      	movs	r3, #0
 800731e:	4680      	mov	r8, r0
 8007320:	f100 0114 	add.w	r1, r0, #20
 8007324:	4553      	cmp	r3, sl
 8007326:	da04      	bge.n	8007332 <__lshift+0x42>
 8007328:	2200      	movs	r2, #0
 800732a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800732e:	3301      	adds	r3, #1
 8007330:	e7f8      	b.n	8007324 <__lshift+0x34>
 8007332:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007336:	6920      	ldr	r0, [r4, #16]
 8007338:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800733c:	f016 021f 	ands.w	r2, r6, #31
 8007340:	f104 0114 	add.w	r1, r4, #20
 8007344:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007348:	d014      	beq.n	8007374 <__lshift+0x84>
 800734a:	f1c2 0c20 	rsb	ip, r2, #32
 800734e:	2000      	movs	r0, #0
 8007350:	680e      	ldr	r6, [r1, #0]
 8007352:	4096      	lsls	r6, r2
 8007354:	4330      	orrs	r0, r6
 8007356:	469a      	mov	sl, r3
 8007358:	f843 0b04 	str.w	r0, [r3], #4
 800735c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007360:	4571      	cmp	r1, lr
 8007362:	fa20 f00c 	lsr.w	r0, r0, ip
 8007366:	d3f3      	bcc.n	8007350 <__lshift+0x60>
 8007368:	f8ca 0004 	str.w	r0, [sl, #4]
 800736c:	b148      	cbz	r0, 8007382 <__lshift+0x92>
 800736e:	f109 0502 	add.w	r5, r9, #2
 8007372:	e006      	b.n	8007382 <__lshift+0x92>
 8007374:	3b04      	subs	r3, #4
 8007376:	f851 2b04 	ldr.w	r2, [r1], #4
 800737a:	f843 2f04 	str.w	r2, [r3, #4]!
 800737e:	4571      	cmp	r1, lr
 8007380:	d3f9      	bcc.n	8007376 <__lshift+0x86>
 8007382:	3d01      	subs	r5, #1
 8007384:	4638      	mov	r0, r7
 8007386:	f8c8 5010 	str.w	r5, [r8, #16]
 800738a:	4621      	mov	r1, r4
 800738c:	f7ff fe25 	bl	8006fda <_Bfree>
 8007390:	4640      	mov	r0, r8
 8007392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007396 <__mcmp>:
 8007396:	6903      	ldr	r3, [r0, #16]
 8007398:	690a      	ldr	r2, [r1, #16]
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	b510      	push	{r4, lr}
 800739e:	d111      	bne.n	80073c4 <__mcmp+0x2e>
 80073a0:	0092      	lsls	r2, r2, #2
 80073a2:	3014      	adds	r0, #20
 80073a4:	3114      	adds	r1, #20
 80073a6:	1883      	adds	r3, r0, r2
 80073a8:	440a      	add	r2, r1
 80073aa:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80073ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80073b2:	428c      	cmp	r4, r1
 80073b4:	d002      	beq.n	80073bc <__mcmp+0x26>
 80073b6:	d307      	bcc.n	80073c8 <__mcmp+0x32>
 80073b8:	2001      	movs	r0, #1
 80073ba:	bd10      	pop	{r4, pc}
 80073bc:	4283      	cmp	r3, r0
 80073be:	d8f4      	bhi.n	80073aa <__mcmp+0x14>
 80073c0:	2000      	movs	r0, #0
 80073c2:	bd10      	pop	{r4, pc}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd10      	pop	{r4, pc}
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	bd10      	pop	{r4, pc}

080073ce <__mdiff>:
 80073ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d2:	4607      	mov	r7, r0
 80073d4:	460c      	mov	r4, r1
 80073d6:	4608      	mov	r0, r1
 80073d8:	4611      	mov	r1, r2
 80073da:	4615      	mov	r5, r2
 80073dc:	f7ff ffdb 	bl	8007396 <__mcmp>
 80073e0:	1e06      	subs	r6, r0, #0
 80073e2:	d108      	bne.n	80073f6 <__mdiff+0x28>
 80073e4:	4638      	mov	r0, r7
 80073e6:	4631      	mov	r1, r6
 80073e8:	f7ff fdc2 	bl	8006f70 <_Balloc>
 80073ec:	2301      	movs	r3, #1
 80073ee:	6103      	str	r3, [r0, #16]
 80073f0:	6146      	str	r6, [r0, #20]
 80073f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f6:	bfbc      	itt	lt
 80073f8:	4623      	movlt	r3, r4
 80073fa:	462c      	movlt	r4, r5
 80073fc:	4638      	mov	r0, r7
 80073fe:	6861      	ldr	r1, [r4, #4]
 8007400:	bfba      	itte	lt
 8007402:	461d      	movlt	r5, r3
 8007404:	2601      	movlt	r6, #1
 8007406:	2600      	movge	r6, #0
 8007408:	f7ff fdb2 	bl	8006f70 <_Balloc>
 800740c:	692b      	ldr	r3, [r5, #16]
 800740e:	60c6      	str	r6, [r0, #12]
 8007410:	6926      	ldr	r6, [r4, #16]
 8007412:	f105 0914 	add.w	r9, r5, #20
 8007416:	3414      	adds	r4, #20
 8007418:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800741c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007420:	f100 0514 	add.w	r5, r0, #20
 8007424:	f04f 0c00 	mov.w	ip, #0
 8007428:	f854 3b04 	ldr.w	r3, [r4], #4
 800742c:	f859 2b04 	ldr.w	r2, [r9], #4
 8007430:	fa1c f183 	uxtah	r1, ip, r3
 8007434:	fa1f fe82 	uxth.w	lr, r2
 8007438:	0c12      	lsrs	r2, r2, #16
 800743a:	ebce 0101 	rsb	r1, lr, r1
 800743e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8007442:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007446:	b289      	uxth	r1, r1
 8007448:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800744c:	45c8      	cmp	r8, r9
 800744e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007452:	46a6      	mov	lr, r4
 8007454:	f845 3b04 	str.w	r3, [r5], #4
 8007458:	d8e6      	bhi.n	8007428 <__mdiff+0x5a>
 800745a:	45be      	cmp	lr, r7
 800745c:	d20e      	bcs.n	800747c <__mdiff+0xae>
 800745e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007462:	fa1c f482 	uxtah	r4, ip, r2
 8007466:	0c12      	lsrs	r2, r2, #16
 8007468:	eb02 4224 	add.w	r2, r2, r4, asr #16
 800746c:	b2a4      	uxth	r4, r4
 800746e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007472:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8007476:	f845 2b04 	str.w	r2, [r5], #4
 800747a:	e7ee      	b.n	800745a <__mdiff+0x8c>
 800747c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007480:	b90b      	cbnz	r3, 8007486 <__mdiff+0xb8>
 8007482:	3e01      	subs	r6, #1
 8007484:	e7fa      	b.n	800747c <__mdiff+0xae>
 8007486:	6106      	str	r6, [r0, #16]
 8007488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800748c <__d2b>:
 800748c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007490:	2101      	movs	r1, #1
 8007492:	461d      	mov	r5, r3
 8007494:	9f08      	ldr	r7, [sp, #32]
 8007496:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007498:	4614      	mov	r4, r2
 800749a:	f7ff fd69 	bl	8006f70 <_Balloc>
 800749e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80074a2:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80074a6:	4680      	mov	r8, r0
 80074a8:	b10d      	cbz	r5, 80074ae <__d2b+0x22>
 80074aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	b1ec      	cbz	r4, 80074ee <__d2b+0x62>
 80074b2:	a802      	add	r0, sp, #8
 80074b4:	f840 4d08 	str.w	r4, [r0, #-8]!
 80074b8:	f7ff fe04 	bl	80070c4 <__lo0bits>
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	b150      	cbz	r0, 80074d6 <__d2b+0x4a>
 80074c0:	9a01      	ldr	r2, [sp, #4]
 80074c2:	f1c0 0120 	rsb	r1, r0, #32
 80074c6:	fa02 f101 	lsl.w	r1, r2, r1
 80074ca:	430b      	orrs	r3, r1
 80074cc:	40c2      	lsrs	r2, r0
 80074ce:	f8c8 3014 	str.w	r3, [r8, #20]
 80074d2:	9201      	str	r2, [sp, #4]
 80074d4:	e001      	b.n	80074da <__d2b+0x4e>
 80074d6:	f8c8 3014 	str.w	r3, [r8, #20]
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	f8c8 3018 	str.w	r3, [r8, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bf14      	ite	ne
 80074e4:	2402      	movne	r4, #2
 80074e6:	2401      	moveq	r4, #1
 80074e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80074ec:	e009      	b.n	8007502 <__d2b+0x76>
 80074ee:	a801      	add	r0, sp, #4
 80074f0:	f7ff fde8 	bl	80070c4 <__lo0bits>
 80074f4:	2401      	movs	r4, #1
 80074f6:	9b01      	ldr	r3, [sp, #4]
 80074f8:	f8c8 3014 	str.w	r3, [r8, #20]
 80074fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007500:	3020      	adds	r0, #32
 8007502:	b135      	cbz	r5, 8007512 <__d2b+0x86>
 8007504:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007508:	4405      	add	r5, r0
 800750a:	603d      	str	r5, [r7, #0]
 800750c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007510:	e009      	b.n	8007526 <__d2b+0x9a>
 8007512:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007516:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800751a:	6038      	str	r0, [r7, #0]
 800751c:	6918      	ldr	r0, [r3, #16]
 800751e:	f7ff fdb1 	bl	8007084 <__hi0bits>
 8007522:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8007526:	6030      	str	r0, [r6, #0]
 8007528:	4640      	mov	r0, r8
 800752a:	b002      	add	sp, #8
 800752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007530 <_calloc_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	fb02 f401 	mul.w	r4, r2, r1
 8007536:	4621      	mov	r1, r4
 8007538:	f000 f808 	bl	800754c <_malloc_r>
 800753c:	4605      	mov	r5, r0
 800753e:	b118      	cbz	r0, 8007548 <_calloc_r+0x18>
 8007540:	2100      	movs	r1, #0
 8007542:	4622      	mov	r2, r4
 8007544:	f7fe fb2f 	bl	8005ba6 <memset>
 8007548:	4628      	mov	r0, r5
 800754a:	bd38      	pop	{r3, r4, r5, pc}

0800754c <_malloc_r>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	1ccc      	adds	r4, r1, #3
 8007550:	f024 0403 	bic.w	r4, r4, #3
 8007554:	3408      	adds	r4, #8
 8007556:	2c0c      	cmp	r4, #12
 8007558:	bf38      	it	cc
 800755a:	240c      	movcc	r4, #12
 800755c:	2c00      	cmp	r4, #0
 800755e:	4606      	mov	r6, r0
 8007560:	da03      	bge.n	800756a <_malloc_r+0x1e>
 8007562:	230c      	movs	r3, #12
 8007564:	6033      	str	r3, [r6, #0]
 8007566:	2000      	movs	r0, #0
 8007568:	bd70      	pop	{r4, r5, r6, pc}
 800756a:	428c      	cmp	r4, r1
 800756c:	d3f9      	bcc.n	8007562 <_malloc_r+0x16>
 800756e:	4a20      	ldr	r2, [pc, #128]	; (80075f0 <_malloc_r+0xa4>)
 8007570:	6813      	ldr	r3, [r2, #0]
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	b1a1      	cbz	r1, 80075a2 <_malloc_r+0x56>
 8007578:	680a      	ldr	r2, [r1, #0]
 800757a:	1b12      	subs	r2, r2, r4
 800757c:	d40e      	bmi.n	800759c <_malloc_r+0x50>
 800757e:	2a0b      	cmp	r2, #11
 8007580:	d903      	bls.n	800758a <_malloc_r+0x3e>
 8007582:	600a      	str	r2, [r1, #0]
 8007584:	188b      	adds	r3, r1, r2
 8007586:	508c      	str	r4, [r1, r2]
 8007588:	e01f      	b.n	80075ca <_malloc_r+0x7e>
 800758a:	428b      	cmp	r3, r1
 800758c:	bf0d      	iteet	eq
 800758e:	685a      	ldreq	r2, [r3, #4]
 8007590:	684a      	ldrne	r2, [r1, #4]
 8007592:	605a      	strne	r2, [r3, #4]
 8007594:	6002      	streq	r2, [r0, #0]
 8007596:	bf18      	it	ne
 8007598:	460b      	movne	r3, r1
 800759a:	e016      	b.n	80075ca <_malloc_r+0x7e>
 800759c:	460b      	mov	r3, r1
 800759e:	6849      	ldr	r1, [r1, #4]
 80075a0:	e7e9      	b.n	8007576 <_malloc_r+0x2a>
 80075a2:	4d14      	ldr	r5, [pc, #80]	; (80075f4 <_malloc_r+0xa8>)
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b91b      	cbnz	r3, 80075b0 <_malloc_r+0x64>
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 f825 	bl	80075f8 <_sbrk_r>
 80075ae:	6028      	str	r0, [r5, #0]
 80075b0:	4630      	mov	r0, r6
 80075b2:	4621      	mov	r1, r4
 80075b4:	f000 f820 	bl	80075f8 <_sbrk_r>
 80075b8:	1c42      	adds	r2, r0, #1
 80075ba:	4603      	mov	r3, r0
 80075bc:	d0d1      	beq.n	8007562 <_malloc_r+0x16>
 80075be:	1cc5      	adds	r5, r0, #3
 80075c0:	f025 0503 	bic.w	r5, r5, #3
 80075c4:	4285      	cmp	r5, r0
 80075c6:	d10a      	bne.n	80075de <_malloc_r+0x92>
 80075c8:	601c      	str	r4, [r3, #0]
 80075ca:	f103 000b 	add.w	r0, r3, #11
 80075ce:	1d1a      	adds	r2, r3, #4
 80075d0:	f020 0007 	bic.w	r0, r0, #7
 80075d4:	1a82      	subs	r2, r0, r2
 80075d6:	d00a      	beq.n	80075ee <_malloc_r+0xa2>
 80075d8:	4251      	negs	r1, r2
 80075da:	5099      	str	r1, [r3, r2]
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
 80075de:	4630      	mov	r0, r6
 80075e0:	1ae9      	subs	r1, r5, r3
 80075e2:	f000 f809 	bl	80075f8 <_sbrk_r>
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0bb      	beq.n	8007562 <_malloc_r+0x16>
 80075ea:	462b      	mov	r3, r5
 80075ec:	e7ec      	b.n	80075c8 <_malloc_r+0x7c>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	1ffe8b44 	.word	0x1ffe8b44
 80075f4:	1ffe8b40 	.word	0x1ffe8b40

080075f8 <_sbrk_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4c06      	ldr	r4, [pc, #24]	; (8007614 <_sbrk_r+0x1c>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4605      	mov	r5, r0
 8007600:	4608      	mov	r0, r1
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	f7fa fda4 	bl	8002150 <_sbrk>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_sbrk_r+0x1a>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	b103      	cbz	r3, 8007612 <_sbrk_r+0x1a>
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	1ffe8d70 	.word	0x1ffe8d70

08007618 <__gedf2>:
 8007618:	f04f 3cff 	mov.w	ip, #4294967295
 800761c:	e006      	b.n	800762c <__cmpdf2+0x4>
 800761e:	bf00      	nop

08007620 <__ledf2>:
 8007620:	f04f 0c01 	mov.w	ip, #1
 8007624:	e002      	b.n	800762c <__cmpdf2+0x4>
 8007626:	bf00      	nop

08007628 <__cmpdf2>:
 8007628:	f04f 0c01 	mov.w	ip, #1
 800762c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800763c:	bf18      	it	ne
 800763e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007642:	d01b      	beq.n	800767c <__cmpdf2+0x54>
 8007644:	b001      	add	sp, #4
 8007646:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800764a:	bf0c      	ite	eq
 800764c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007650:	ea91 0f03 	teqne	r1, r3
 8007654:	bf02      	ittt	eq
 8007656:	ea90 0f02 	teqeq	r0, r2
 800765a:	2000      	moveq	r0, #0
 800765c:	4770      	bxeq	lr
 800765e:	f110 0f00 	cmn.w	r0, #0
 8007662:	ea91 0f03 	teq	r1, r3
 8007666:	bf58      	it	pl
 8007668:	4299      	cmppl	r1, r3
 800766a:	bf08      	it	eq
 800766c:	4290      	cmpeq	r0, r2
 800766e:	bf2c      	ite	cs
 8007670:	17d8      	asrcs	r0, r3, #31
 8007672:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007676:	f040 0001 	orr.w	r0, r0, #1
 800767a:	4770      	bx	lr
 800767c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007684:	d102      	bne.n	800768c <__cmpdf2+0x64>
 8007686:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800768a:	d107      	bne.n	800769c <__cmpdf2+0x74>
 800768c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007694:	d1d6      	bne.n	8007644 <__cmpdf2+0x1c>
 8007696:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800769a:	d0d3      	beq.n	8007644 <__cmpdf2+0x1c>
 800769c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop

080076a4 <__aeabi_cdrcmple>:
 80076a4:	4684      	mov	ip, r0
 80076a6:	4610      	mov	r0, r2
 80076a8:	4662      	mov	r2, ip
 80076aa:	468c      	mov	ip, r1
 80076ac:	4619      	mov	r1, r3
 80076ae:	4663      	mov	r3, ip
 80076b0:	e000      	b.n	80076b4 <__aeabi_cdcmpeq>
 80076b2:	bf00      	nop

080076b4 <__aeabi_cdcmpeq>:
 80076b4:	b501      	push	{r0, lr}
 80076b6:	f7ff ffb7 	bl	8007628 <__cmpdf2>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	bf48      	it	mi
 80076be:	f110 0f00 	cmnmi.w	r0, #0
 80076c2:	bd01      	pop	{r0, pc}

080076c4 <__aeabi_dcmpeq>:
 80076c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80076c8:	f7ff fff4 	bl	80076b4 <__aeabi_cdcmpeq>
 80076cc:	bf0c      	ite	eq
 80076ce:	2001      	moveq	r0, #1
 80076d0:	2000      	movne	r0, #0
 80076d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80076d6:	bf00      	nop

080076d8 <__aeabi_dcmplt>:
 80076d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80076dc:	f7ff ffea 	bl	80076b4 <__aeabi_cdcmpeq>
 80076e0:	bf34      	ite	cc
 80076e2:	2001      	movcc	r0, #1
 80076e4:	2000      	movcs	r0, #0
 80076e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80076ea:	bf00      	nop

080076ec <__aeabi_dcmple>:
 80076ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80076f0:	f7ff ffe0 	bl	80076b4 <__aeabi_cdcmpeq>
 80076f4:	bf94      	ite	ls
 80076f6:	2001      	movls	r0, #1
 80076f8:	2000      	movhi	r0, #0
 80076fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80076fe:	bf00      	nop

08007700 <__aeabi_dcmpge>:
 8007700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007704:	f7ff ffce 	bl	80076a4 <__aeabi_cdrcmple>
 8007708:	bf94      	ite	ls
 800770a:	2001      	movls	r0, #1
 800770c:	2000      	movhi	r0, #0
 800770e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007712:	bf00      	nop

08007714 <__aeabi_dcmpgt>:
 8007714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007718:	f7ff ffc4 	bl	80076a4 <__aeabi_cdrcmple>
 800771c:	bf34      	ite	cc
 800771e:	2001      	movcc	r0, #1
 8007720:	2000      	movcs	r0, #0
 8007722:	f85d fb08 	ldr.w	pc, [sp], #8
 8007726:	bf00      	nop

08007728 <g_xmc_vadc_group_array>:
 8007728:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

08007738 <UART_PROTOKOLL_channel_config>:
 8007738:	c200 0001 0800 0108 0010 0000               ............

08007744 <UART_PROTOKOLL_tx_pin_config>:
 8007744:	0088 0000 0001 0000 0002 0000               ............

08007750 <UART_PROTOKOLL_tx_pin>:
 8007750:	8600 4802 0006 0000 7744 0800               ...H....Dw..

0800775c <UART_PROTOKOLL_config>:
 800775c:	7738 0800 26cd 0800 0000 0000 0000 0000     8w...&..........
	...
 800777c:	7750 0800 0000 0402 0203 0000               Pw..........

08007788 <UART_PROTOKOLL_rx_pin_config>:
 8007788:	0000 0000 0001 0000 0002 0000               ............

08007794 <PWM_LENKUNG_compare_config>:
	...
 80077a0:	0006 0000                                   ....

080077a4 <PWM_LENKUNG_gpio_out_config>:
 80077a4:	0098 0000 0000 0001 0004 0000               ............

080077b0 <PWM_MOTOR_compare_config>:
	...
 80077bc:	0006 0000                                   ....

080077c0 <PWM_MOTOR_gpio_out_config>:
 80077c0:	0098 0000 0000 0001 0004 0000               ............

080077cc <PWM_ULTRA_compare_config>:
 80077cc:	0000 0000 0008 0000                         ........

080077d4 <PWM_ULTRA_gpio_out_config>:
 80077d4:	0098 0000 0000 0001 0004 0000               ............

080077e0 <PWM_BUZZER_compare_config>:
	...

080077e8 <PWM_BUZZER_gpio_out_config>:
 80077e8:	0098 0000 0000 0001 0004 0000               ............

080077f4 <LICHTSCHRANKE_INPUT_PIN>:
 80077f4:	4800 5000 8000 4802 0000 0000 0000 0000     .H.P...H........
 8007804:	0000 0000 0002 0000 0035 0000 3f04 0300     ........5....?..
 8007814:	0b03 0001                                   ....

08007818 <INTERRUPT_GESCHWINDIGKEIT>:
 8007818:	3f35 0100                                   5?..

0800781c <group_init_handle0>:
	...

08007830 <group_init_handle1>:
	...

08007844 <group_init_handle2>:
	...

08007858 <group_init_handle3>:
	...

0800786c <global_config>:
 800786c:	0000 0000 0004 0000 0000 0000 0000 0000     ................
	...

08007884 <LED_TEST>:
 8007884:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 8007894:	0009 0000                                   ....

08007898 <BUTTON_TEST>:
 8007898:	8f00 4802 0000 0000 0000 0000 0000 0000     ...H............
 80078a8:	000d 0000 0230 0101 0000 0001 0000 0000     ....0...........
 80078b8:	0000 0001 0102 0101                         ........

080078c0 <CAPTURE_ULTRA_input>:
 80078c0:	8000 4802 000f 0000                         ...H....

080078c8 <CAPTURE_ULTRA_input_pin_config>:
	...

080078d4 <CAPTURE_ULTRA_event0_config>:
 80078d4:	0102 0000                                   ....

080078d8 <CAPTURE_ULTRA_event1_config>:
 80078d8:	0202 0000                                   ....

080078dc <CAPTURE_ULTRA_config>:
 80078dc:	1060 0001 00f6 0000                         `.......

080078e4 <global_iclass_config>:
 80078e4:	0011 0000                                   ....

080078e8 <backgnd_config>:
 80078e8:	0005 0000 0000 0000 0010 0000 0043 4e49     ............C.IN
 80078f8:	0046 6e69 0066 414e 004e 616e 006e 0030     F.inf.NAN.nan.0.
 8007908:	6e49 6966 696e 7974 4e00 4e61 5000 534f     Infinity.NaN.POS
 8007918:	5849 2e00 0000 0000                         IX......

08007920 <__mprec_tens>:
 8007920:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8007930:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8007940:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8007950:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8007960:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8007970:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8007980:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8007990:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80079a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80079b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80079c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80079d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80079e0:	9db4 79d9 7843 44ea                         ...yCx.D

080079e8 <__mprec_bigtens>:
 80079e8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80079f8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8007a08:	bf3c 7f73 4fdd 7515                         <.s..O.u

08007a10 <p05.5277>:
 8007a10:	0005 0000 0019 0000 007d 0000               ........}...
